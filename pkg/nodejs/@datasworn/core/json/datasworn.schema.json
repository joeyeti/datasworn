{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "https://ironswornrpg.com/datasworn.schema.json",
	"$ref": "#/definitions/RulesPackage",
	"title": "Datasworn v0.1.0",
	"description": "Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.",
	"definitions": {
		"ActionRollMethod": {
			"title": "ActionRollMethod",
			"description": "  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `player_choice`: The player chooses which roll option to use.\n  - `highest`: Use the roll option with the best/highest value.\n  - `lowest`: Use the roll option with the worst/lowest value.\n  - `all`: Use _every_ roll option at once.",
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			]
		},
		"AnyId": {
			"title": "AnyId",
			"description": "Represents any kind of non-wildcard ID, including IDs of embedded objects.",
			"anyOf": [
				{
					"$ref": "#/definitions/AtlasEntryId"
				},
				{
					"$ref": "#/definitions/NpcId"
				},
				{
					"$ref": "#/definitions/NpcVariantId"
				},
				{
					"$ref": "#/definitions/OracleRollableId"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableId"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableId"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableId"
				},
				{
					"$ref": "#/definitions/OracleRollableRowId"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableRowId"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableRowId"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableRowId"
				},
				{
					"$ref": "#/definitions/AssetId"
				},
				{
					"$ref": "#/definitions/AssetAbilityId"
				},
				{
					"$ref": "#/definitions/AssetAbilityMoveId"
				},
				{
					"$ref": "#/definitions/MoveId"
				},
				{
					"$ref": "#/definitions/AtlasCollectionId"
				},
				{
					"$ref": "#/definitions/NpcCollectionId"
				},
				{
					"$ref": "#/definitions/OracleCollectionId"
				},
				{
					"$ref": "#/definitions/AssetCollectionId"
				},
				{
					"$ref": "#/definitions/MoveCategoryId"
				},
				{
					"$ref": "#/definitions/DelveSiteId"
				},
				{
					"$ref": "#/definitions/DelveSiteDenizenId"
				},
				{
					"$ref": "#/definitions/DelveSiteDomainId"
				},
				{
					"$ref": "#/definitions/DelveSiteDomainFeatureId"
				},
				{
					"$ref": "#/definitions/DelveSiteThemeFeatureId"
				},
				{
					"$ref": "#/definitions/DelveSiteDomainDangerId"
				},
				{
					"$ref": "#/definitions/DelveSiteThemeDangerId"
				},
				{
					"$ref": "#/definitions/DelveSiteThemeId"
				},
				{
					"$ref": "#/definitions/RarityId"
				},
				{
					"$ref": "#/definitions/TruthId"
				},
				{
					"$ref": "#/definitions/TruthOptionId"
				}
			]
		},
		"AnyIdWildcard": {
			"title": "AnyIdWildcard",
			"description": "Represents any kind of wildcard ID, including IDs of embedded objects.",
			"anyOf": [
				{
					"$ref": "#/definitions/AtlasEntryIdWildcard"
				},
				{
					"$ref": "#/definitions/NpcIdWildcard"
				},
				{
					"$ref": "#/definitions/NpcVariantIdWildcard"
				},
				{
					"$ref": "#/definitions/OracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/OracleRollableRowIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableRowIdWildcard"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableRowIdWildcard"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableRowIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetAbilityIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetAbilityMoveIdWildcard"
				},
				{
					"$ref": "#/definitions/MoveIdWildcard"
				},
				{
					"$ref": "#/definitions/AtlasCollectionIdWildcard"
				},
				{
					"$ref": "#/definitions/NpcCollectionIdWildcard"
				},
				{
					"$ref": "#/definitions/OracleCollectionIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetCollectionIdWildcard"
				},
				{
					"$ref": "#/definitions/MoveCategoryIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteDenizenIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteDomainIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteDomainFeatureIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteThemeFeatureIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteDomainDangerIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteThemeDangerIdWildcard"
				},
				{
					"$ref": "#/definitions/DelveSiteThemeIdWildcard"
				},
				{
					"$ref": "#/definitions/RarityIdWildcard"
				},
				{
					"$ref": "#/definitions/TruthIdWildcard"
				},
				{
					"$ref": "#/definitions/TruthOptionIdWildcard"
				}
			]
		},
		"AnyMove": {
			"title": "AnyMove",
			"anyOf": [
				{
					"$ref": "#/definitions/Move"
				},
				{
					"$ref": "#/definitions/EmbeddedMove"
				}
			]
		},
		"AnyMoveId": {
			"title": "AnyMoveId",
			"anyOf": [
				{
					"$ref": "#/definitions/MoveId"
				},
				{
					"$ref": "#/definitions/AssetAbilityMoveId"
				}
			]
		},
		"AnyMoveIdWildcard": {
			"title": "AnyMoveIdWildcard",
			"anyOf": [
				{
					"$ref": "#/definitions/MoveIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetAbilityMoveIdWildcard"
				}
			]
		},
		"AnyOracleRollable": {
			"title": "AnyOracleRollable",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleRollable"
				},
				{
					"$ref": "#/definitions/EmbeddedOracleRollable"
				}
			]
		},
		"AnyOracleRollableId": {
			"title": "AnyOracleRollableId",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleRollableId"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableId"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableId"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableId"
				}
			]
		},
		"AnyOracleRollableIdWildcard": {
			"title": "AnyOracleRollableIdWildcard",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableIdWildcard"
				}
			]
		},
		"AnyOracleRollableRowId": {
			"title": "AnyOracleRollableRowId",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleRollableRowId"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableRowId"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableRowId"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableRowId"
				}
			]
		},
		"AnyOracleRollableRowIdWildcard": {
			"title": "AnyOracleRollableRowIdWildcard",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleRollableRowIdWildcard"
				},
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableRowIdWildcard"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableRowIdWildcard"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableRowIdWildcard"
				}
			]
		},
		"Asset": {
			"title": "Asset",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"category",
				"options",
				"count_as_impact",
				"shared",
				"abilities",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AssetId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "asset"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"category": {
					"$ref": "#/definitions/Label",
					"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
					"examples": [
						"Combat Talent",
						"Command Vehicle",
						"Companion",
						"Deed",
						"Module",
						"Path",
						"Ritual",
						"Support Vehicle"
					]
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/AssetIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"options": {
					"type": "object",
					"description": "Options are input fields set when the player purchases the asset. They're likely to remain the same through the life of the asset. Typically, they are rendered at the top of the asset card.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetOptionField"
						}
					}
				},
				"count_as_impact": {
					"type": "boolean",
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).",
					"default": false
				},
				"shared": {
					"type": "boolean",
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.",
					"default": false
				},
				"attachments": {
					"$ref": "#/definitions/AssetAttachment"
				},
				"requirement": {
					"$ref": "#/definitions/MarkdownString",
					"description": "Describes prerequisites for purchasing or using this asset."
				},
				"abilities": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssetAbility",
						"description": "Abilities provided by this asset. Most assets have 3."
					}
				},
				"controls": {
					"type": "object",
					"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetControlField"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"AssetAbility": {
			"title": "AssetAbility",
			"type": "object",
			"description": "An asset ability: one of the purchasable features of an asset. Most assets have three.",
			"required": ["_id", "enabled", "text"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AssetAbilityId",
					"description": "The unique Datasworn ID for this node."
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "A handful of asset abilities have a label/name, for instance classic Ironsworn companion assets. Most canonical assets omit this property."
				},
				"enabled": {
					"type": "boolean",
					"description": "Is this asset ability enabled?",
					"default": false
				},
				"options": {
					"type": "object",
					"description": "Fields that are expected to be set once and remain the same through the life of the asset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetAbilityOptionField"
						}
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of this asset ability."
				},
				"controls": {
					"type": "object",
					"description": "Fields whose values are expected to change over the life of the asset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetAbilityControlField"
						}
					}
				},
				"oracles": {
					"title": "AssetAbilityOracles",
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/EmbeddedOracleRollable",
							"title": "AssetAbilityOracleRollable"
						}
					}
				},
				"enhance_asset": {
					"$ref": "#/definitions/AssetEnhancement",
					"description": "Changes made to the asset, when this ability is enabled."
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"enhance_moves": {
					"type": "array",
					"description": "Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.",
					"items": {
						"$ref": "#/definitions/MoveEnhancement"
					}
				},
				"moves": {
					"title": "AssetAbilityMoves",
					"type": "object",
					"description": "Unique moves added by this asset ability.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/EmbeddedMove",
							"title": "AssetAbilityMove"
						}
					}
				}
			}
		},
		"AssetAbilityControlField": {
			"title": "AssetAbilityControlField",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": ["field_type"],
			"properties": {
				"field_type": {
					"enum": ["clock", "counter", "checkbox", "text"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "clock"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/ClockField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "counter"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/CounterField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "checkbox"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetCheckboxField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/TextField"
					}
				}
			]
		},
		"AssetAbilityId": {
			"title": "AssetAbilityId",
			"type": "string",
			"description": "A unique ID representing an AssetAbility object.",
			"pattern": "^asset\\.ability:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)$"
		},
		"AssetAbilityIdWildcard": {
			"title": "AssetAbilityIdWildcard",
			"type": "string",
			"description": "A wildcarded AssetAbilityId that can be used to match multiple AssetAbility objects.",
			"pattern": "^asset\\.ability:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"
		},
		"AssetAbilityMoveId": {
			"title": "AssetAbilityMoveId",
			"type": "string",
			"description": "A unique ID representing an AssetAbilityMove object.",
			"pattern": "^asset\\.ability\\.move:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"AssetAbilityMoveIdWildcard": {
			"title": "AssetAbilityMoveIdWildcard",
			"type": "string",
			"description": "A wildcarded AssetAbilityMoveId that can be used to match multiple AssetAbilityMove objects.",
			"pattern": "^asset\\.ability\\.move:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"AssetAbilityOptionField": {
			"title": "AssetAbilityOptionField",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": ["field_type"],
			"properties": {
				"field_type": {
					"enum": ["text"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/TextField"
					}
				}
			]
		},
		"AssetAbilityOracleRollableId": {
			"title": "AssetAbilityOracleRollableId",
			"type": "string",
			"description": "A unique ID representing an AssetAbilityOracleRollable object.",
			"pattern": "^asset\\.ability\\.oracle_rollable:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"AssetAbilityOracleRollableIdWildcard": {
			"title": "AssetAbilityOracleRollableIdWildcard",
			"type": "string",
			"description": "A wildcarded AssetAbilityOracleRollableId that can be used to match multiple AssetAbilityOracleRollable objects.",
			"pattern": "^asset\\.ability\\.oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"AssetAbilityOracleRollableRowId": {
			"title": "AssetAbilityOracleRollableRowId",
			"type": "string",
			"description": "A unique ID representing an AssetAbilityOracleRollableRow object.",
			"pattern": "^asset\\.ability\\.oracle_rollable\\.row:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+)$"
		},
		"AssetAbilityOracleRollableRowIdWildcard": {
			"title": "AssetAbilityOracleRollableRowIdWildcard",
			"type": "string",
			"description": "A wildcarded AssetAbilityOracleRollableRowId that can be used to match multiple AssetAbilityOracleRollableRow objects.",
			"pattern": "^asset\\.ability\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+|\\*)$"
		},
		"AssetAttachment": {
			"title": "AssetAttachment",
			"type": "object",
			"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.",
			"required": ["max", "assets"],
			"properties": {
				"max": {
					"description": "Null if there's no upper limit to the number of attached assets.",
					"default": null,
					"anyOf": [
						{
							"type": "integer",
							"minimum": 1
						},
						{
							"type": "null"
						}
					]
				},
				"assets": {
					"type": "array",
					"description": "Asset IDs (which may be wildcards) that may be attached to this asset",
					"items": {
						"$ref": "#/definitions/AssetIdWildcard"
					}
				}
			}
		},
		"AssetCardFlipField": {
			"title": "AssetCardFlipField",
			"type": "object",
			"required": [
				"label",
				"field_type",
				"value",
				"is_impact",
				"disables_asset"
			],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "card_flip"
				},
				"value": {
					"type": "boolean",
					"description": "Is the card flipped over?",
					"default": false
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				},
				"is_impact": {
					"type": "boolean",
					"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
					"default": false
				},
				"disables_asset": {
					"type": "boolean",
					"description": "Does this field disable the asset when its value is set to `true`?",
					"default": false
				}
			}
		},
		"AssetCheckboxField": {
			"title": "AssetCheckboxField",
			"type": "object",
			"required": [
				"label",
				"field_type",
				"value",
				"is_impact",
				"disables_asset"
			],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "checkbox"
				},
				"value": {
					"type": "boolean",
					"description": "Is the box checked?",
					"default": false
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				},
				"is_impact": {
					"type": "boolean",
					"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?",
					"default": false
				},
				"disables_asset": {
					"type": "boolean",
					"description": "Does this field disable the asset when its value is set to `true`?",
					"default": false
				}
			}
		},
		"AssetCollection": {
			"title": "AssetCollection",
			"type": "object",
			"required": ["_id", "type", "name", "contents", "collections", "_source"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AssetCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "asset_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/AssetCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/AssetCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Asset"
						}
					}
				},
				"collections": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetCollection"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"AssetCollectionId": {
			"title": "AssetCollectionId",
			"type": "string",
			"description": "A unique ID representing an AssetCollection object.",
			"pattern": "^asset_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
		},
		"AssetCollectionIdWildcard": {
			"title": "AssetCollectionIdWildcard",
			"type": "string",
			"description": "A wildcarded AssetCollectionId that can be used to match multiple AssetCollection objects.",
			"pattern": "^asset_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
		},
		"AssetConditionMeter": {
			"title": "AssetConditionMeter",
			"type": "object",
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".",
			"required": [
				"label",
				"field_type",
				"rollable",
				"min",
				"max",
				"value",
				"controls"
			],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "condition_meter"
				},
				"rollable": {
					"type": "boolean",
					"description": "Is this meter's `value` usable as a stat in an action roll?",
					"default": true,
					"const": true
				},
				"min": {
					"type": "integer",
					"description": "The minimum value of this meter.",
					"default": 0
				},
				"max": {
					"type": "integer",
					"description": "The maximum value of this meter."
				},
				"value": {
					"type": "integer",
					"description": "The current value of this meter.",
					"default": 0
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				},
				"controls": {
					"type": "object",
					"description": "Checkbox controls rendered as part of the condition meter.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetConditionMeterControlField"
						}
					}
				},
				"moves": {
					"type": "object",
					"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.",
					"releaseStage": "experimental",
					"properties": {
						"recover": {
							"type": "array",
							"description": "The ID(s) of recovery moves associated with this meter.",
							"items": {
								"$ref": "#/definitions/AnyMoveIdWildcard",
								"examples": [
									"move:classic/adventure/heal",
									"move:classic/adventure/make_camp",
									"move:classic/relationship/sojourn",
									"move:starforged/recover/heal",
									"move:starforged/recover/repair"
								]
							}
						},
						"suffer": {
							"type": "array",
							"description": "The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option.",
							"items": {
								"$ref": "#/definitions/AnyMoveIdWildcard",
								"examples": [
									"move:classic/suffer/companion_endure_harm",
									"move:starforged/suffer/companion_takes_a_hit",
									"move:starforged/suffer/withstand_damage"
								]
							}
						}
					}
				}
			}
		},
		"AssetConditionMeterControlField": {
			"title": "AssetConditionMeterControlField",
			"type": "object",
			"description": "A checkbox control field, rendered as part of an asset condition meter.",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": ["field_type"],
			"properties": {
				"field_type": {
					"enum": ["checkbox", "card_flip"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "checkbox"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetCheckboxField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "card_flip"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetCardFlipField"
					}
				}
			]
		},
		"AssetConditionMeterEnhancement": {
			"title": "AssetConditionMeterEnhancement",
			"type": "object",
			"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".",
			"required": ["field_type", "max"],
			"properties": {
				"field_type": {
					"type": "string",
					"const": "condition_meter"
				},
				"max": {
					"type": "integer",
					"description": "The maximum value of this meter."
				}
			}
		},
		"AssetControlField": {
			"title": "AssetControlField",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": ["field_type"],
			"properties": {
				"field_type": {
					"enum": [
						"condition_meter",
						"select_enhancement",
						"checkbox",
						"card_flip"
					]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "condition_meter"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetConditionMeter"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "select_enhancement"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/SelectEnhancementField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "checkbox"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetCheckboxField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "card_flip"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetCardFlipField"
					}
				}
			]
		},
		"AssetControlFieldEnhancement": {
			"title": "AssetControlFieldEnhancement",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": ["field_type"],
			"properties": {
				"field_type": {
					"enum": ["condition_meter"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "condition_meter"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetConditionMeterEnhancement"
					}
				}
			]
		},
		"AssetControlValueRef": {
			"title": "AssetControlValueRef",
			"type": "object",
			"description": "A reference to the value of an asset control.",
			"required": ["using", "control", "assets"],
			"properties": {
				"using": {
					"type": "string",
					"description": "A reference to the value of an asset control.",
					"const": "asset_control"
				},
				"control": {
					"$ref": "#/definitions/DictKey",
					"description": "The dictionary key of the asset control field.",
					"examples": ["health", "integrity"]
				},
				"assets": {
					"description": "Asset IDs (which may be wildcarded) that may provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.",
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"default": null,
							"items": {
								"$ref": "#/definitions/AssetIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				}
			}
		},
		"AssetEnhancement": {
			"title": "AssetEnhancement",
			"type": "object",
			"description": "Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.",
			"properties": {
				"count_as_impact": {
					"type": "boolean",
					"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
				},
				"shared": {
					"type": "boolean",
					"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
				},
				"attachments": {
					"$ref": "#/definitions/AssetAttachment"
				},
				"controls": {
					"type": "object",
					"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.",
					"remarks": "Deserialize as a dictionary object.",
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetControlFieldEnhancement"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				}
			}
		},
		"AssetId": {
			"title": "AssetId",
			"type": "string",
			"description": "A unique ID representing an Asset object.",
			"pattern": "^asset:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
		},
		"AssetIdWildcard": {
			"title": "AssetIdWildcard",
			"type": "string",
			"description": "A wildcarded AssetId that can be used to match multiple Asset objects.",
			"pattern": "^asset:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
		},
		"AssetOptionField": {
			"title": "AssetOptionField",
			"type": "object",
			"description": "Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.",
			"required": ["field_type"],
			"properties": {
				"field_type": {
					"enum": ["select_value", "select_enhancement", "text"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "select_value"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/SelectValueField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "select_enhancement"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/SelectEnhancementField"
					}
				},
				{
					"if": {
						"properties": {
							"field_type": {
								"type": "string",
								"const": "text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/TextField"
					}
				}
			]
		},
		"AssetOptionValueRef": {
			"title": "AssetOptionValueRef",
			"type": "object",
			"description": "A reference to the value of an asset option.",
			"required": ["using", "option", "assets"],
			"properties": {
				"using": {
					"type": "string",
					"description": "A reference to the value of an asset option.",
					"const": "asset_option"
				},
				"option": {
					"$ref": "#/definitions/DictKey",
					"description": "The dictionary key of the asset option field."
				},
				"assets": {
					"description": "Asset IDs (which may be wildcarded) that may provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.",
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/AssetIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				}
			}
		},
		"AtlasCollection": {
			"title": "AtlasCollection",
			"type": "object",
			"required": ["_id", "type", "name", "contents", "collections", "_source"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AtlasCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "atlas_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/AtlasCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/AtlasCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AtlasEntry"
						}
					}
				},
				"collections": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AtlasCollection"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"AtlasCollectionId": {
			"title": "AtlasCollectionId",
			"type": "string",
			"description": "A unique ID representing an AtlasCollection object.",
			"pattern": "^atlas_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
		},
		"AtlasCollectionIdWildcard": {
			"title": "AtlasCollectionIdWildcard",
			"type": "string",
			"description": "A wildcarded AtlasCollectionId that can be used to match multiple AtlasCollection objects.",
			"pattern": "^atlas_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
		},
		"AtlasEntry": {
			"title": "AtlasEntry",
			"type": "object",
			"description": "An atlas entry, like the Ironlands region entries found in classic Ironsworn.",
			"required": ["_id", "type", "name", "features", "description", "_source"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AtlasEntryId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "atlas_entry"
				},
				"name": {
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/AtlasEntryIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/definitions/MarkdownString"
				},
				"your_truth": {
					"$ref": "#/definitions/MarkdownString"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"AtlasEntryId": {
			"title": "AtlasEntryId",
			"type": "string",
			"description": "A unique ID representing an AtlasEntry object.",
			"pattern": "^atlas_entry:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
		},
		"AtlasEntryIdWildcard": {
			"title": "AtlasEntryIdWildcard",
			"type": "string",
			"description": "A wildcarded AtlasEntryId that can be used to match multiple AtlasEntry objects.",
			"pattern": "^atlas_entry:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
		},
		"AttachedAssetControlValueRef": {
			"title": "AttachedAssetControlValueRef",
			"type": "object",
			"description": "A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.",
			"required": ["using", "control"],
			"properties": {
				"using": {
					"type": "string",
					"description": "A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.",
					"const": "attached_asset_control"
				},
				"control": {
					"$ref": "#/definitions/DictKey",
					"description": "The dictionary key of the asset control field.",
					"examples": ["health", "integrity"]
				}
			}
		},
		"AttachedAssetOptionValueRef": {
			"title": "AttachedAssetOptionValueRef",
			"type": "object",
			"description": "A reference to the value of an attached asset option.",
			"required": ["using", "option"],
			"properties": {
				"using": {
					"type": "string",
					"description": "A reference to the value of an attached asset option.",
					"const": "attached_asset_option"
				},
				"option": {
					"$ref": "#/definitions/DictKey",
					"description": "The dictionary key of the asset option field."
				}
			}
		},
		"AuthorInfo": {
			"title": "AuthorInfo",
			"type": "object",
			"description": "Information on the original creator of this material.",
			"examples": [
				{
					"name": "Shawn Tomkin",
					"url": "https://ironswornrpg.com"
				}
			],
			"required": ["name"],
			"properties": {
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The name of the author.",
					"examples": ["Shawn Tomkin"]
				},
				"email": {
					"$ref": "#/definitions/Email",
					"description": "An optional email contact for the author"
				},
				"url": {
					"$ref": "#/definitions/WebUrl",
					"description": "An optional URL for the author's website."
				}
			}
		},
		"ChallengeRank": {
			"title": "ChallengeRank",
			"description": "Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).\n\n  - `1`: Troublesome\n  - `2`: Dangerous\n  - `3`: Formidable\n  - `4`: Extreme\n  - `5`: Epic",
			"enum": [1, 2, 3, 4, 5]
		},
		"ClockField": {
			"title": "ClockField",
			"type": "object",
			"description": "A clock with 4 or more segments.",
			"remarks": "Semantics are similar to HTML `<input type=\"number\">`, but rendered as a clock (a circle with equally sized wedges).",
			"required": ["label", "field_type", "rollable", "min", "max", "value"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "clock"
				},
				"rollable": {
					"type": "boolean",
					"default": false,
					"const": false
				},
				"min": {
					"type": "integer",
					"description": "The minimum number of filled clock segments. This is always 0.",
					"default": 0,
					"const": 0
				},
				"max": {
					"title": "ClockSize",
					"type": "integer",
					"description": "The size of the clock -- in other words, the maximum number of filled clock segments. Standard clocks have 4, 6, 8, or 10 segments.",
					"multipleOf": 2,
					"minimum": 2
				},
				"value": {
					"type": "integer",
					"description": "The current value of this input.",
					"default": 0
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				}
			}
		},
		"CollectableType": {
			"title": "CollectableType",
			"enum": ["atlas_entry", "npc", "oracle_rollable", "asset", "move"]
		},
		"CollectionType": {
			"title": "CollectionType",
			"enum": [
				"atlas_collection",
				"npc_collection",
				"oracle_collection",
				"asset_collection",
				"move_category"
			]
		},
		"ConditionMeterField": {
			"title": "ConditionMeterField",
			"type": "object",
			"description": "A meter with an integer value, bounded by a minimum and maximum.",
			"required": ["label", "field_type", "rollable", "min", "max", "value"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "condition_meter"
				},
				"rollable": {
					"type": "boolean",
					"description": "Is this meter's `value` usable as a stat in an action roll?",
					"default": true,
					"const": true
				},
				"min": {
					"type": "integer",
					"description": "The minimum value of this meter.",
					"default": 0
				},
				"max": {
					"type": "integer",
					"description": "The maximum value of this meter."
				},
				"value": {
					"type": "integer",
					"description": "The current value of this meter.",
					"default": 0
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				}
			}
		},
		"ConditionMeterKey": {
			"$ref": "#/definitions/DictKey",
			"title": "ConditionMeterKey",
			"description": "A basic, rollable player character resource specified by the ruleset.",
			"examples": ["health", "spirit", "supply"]
		},
		"ConditionMeterRule": {
			"title": "ConditionMeterRule",
			"type": "object",
			"description": "Describes a standard player character condition meter.",
			"required": [
				"label",
				"rollable",
				"min",
				"max",
				"value",
				"shared",
				"description"
			],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"rollable": {
					"type": "boolean",
					"description": "Is this meter's `value` usable as a stat in an action roll?",
					"default": true,
					"const": true
				},
				"min": {
					"type": "integer",
					"description": "The minimum value of this meter.",
					"default": 0
				},
				"max": {
					"type": "integer",
					"description": "The maximum value of this meter."
				},
				"value": {
					"type": "integer",
					"description": "The current value of this meter.",
					"default": 0
				},
				"shared": {
					"type": "boolean",
					"description": "Is this condition meter shared by all players?",
					"default": false
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A description of this condition meter."
				}
			}
		},
		"ConditionMeterValueRef": {
			"title": "ConditionMeterValueRef",
			"type": "object",
			"description": "A reference to the value of a standard player condition meter.",
			"required": ["using", "condition_meter"],
			"properties": {
				"using": {
					"type": "string",
					"description": "A reference to the value of a standard player condition meter.",
					"const": "condition_meter"
				},
				"condition_meter": {
					"$ref": "#/definitions/ConditionMeterKey"
				}
			}
		},
		"CoreTags": {
			"title": "CoreTags",
			"type": "object",
			"properties": {
				"requires_allies": {
					"type": "boolean",
					"description": "This object requires allies to function, and is intended for co-op play, or guided play with allies. It is not appropriate for solo play."
				},
				"supernatural": {
					"type": "boolean",
					"description": "This object is supernatural in nature, and is ideal for settings that feature supernatural or mythic powers."
				},
				"technological": {
					"type": "boolean",
					"description": "This object is technological in nature, and is ideal for settings that feature remarkable technologies."
				}
			}
		},
		"CounterField": {
			"title": "CounterField",
			"type": "object",
			"description": "A basic counter representing a non-rollable integer value. They usually start at 0, and may or may not have a maximum.",
			"remarks": "Semantics are similar to `<input type=\"number\" step=\"1\">`",
			"required": ["label", "field_type", "rollable", "min", "max", "value"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "counter"
				},
				"rollable": {
					"type": "boolean",
					"default": false,
					"const": false
				},
				"min": {
					"type": "integer",
					"description": "The (inclusive) minimum value.",
					"default": 0
				},
				"max": {
					"description": "The (inclusive) maximum value, or `null` if there's no maximum.",
					"default": null,
					"anyOf": [
						{
							"type": "integer"
						},
						{
							"type": "null"
						}
					]
				},
				"value": {
					"type": "integer",
					"description": "The current value of this input.",
					"default": 0
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				}
			}
		},
		"CssColor": {
			"title": "CssColor",
			"type": "string",
			"description": "A CSS color value.",
			"remarks": "See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"
		},
		"CustomValue": {
			"title": "CustomValue",
			"type": "object",
			"description": "An arbitrary static integer value with a label.",
			"required": ["label", "using", "value"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"using": {
					"type": "string",
					"description": "An arbitrary static integer value with a label.",
					"const": "custom"
				},
				"value": {
					"type": "integer"
				}
			}
		},
		"DelveSite": {
			"title": "DelveSite",
			"type": "object",
			"description": "A delve site with a theme, domain, and denizens.",
			"required": [
				"_id",
				"type",
				"name",
				"theme",
				"domain",
				"rank",
				"description",
				"denizens",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "delve_site"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/DelveSiteIdWildcard"
					}
				},
				"region": {
					"$ref": "#/definitions/AtlasEntryId",
					"description": "The ID of an atlas entry representing the region in which this delve site is located."
				},
				"theme": {
					"$ref": "#/definitions/DelveSiteThemeId",
					"description": "The ID of the site's DelveSiteTheme card."
				},
				"domain": {
					"$ref": "#/definitions/DelveSiteDomainId",
					"description": "The ID of the site's DelveSiteDomain card."
				},
				"extra_card": {
					"description": "An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve.",
					"anyOf": [
						{
							"$ref": "#/definitions/DelveSiteThemeId"
						},
						{
							"$ref": "#/definitions/DelveSiteDomainId"
						}
					]
				},
				"rank": {
					"$ref": "#/definitions/ChallengeRank"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"denizens": {
					"description": "Represents the delve site's denizen matrix as an array of objects.",
					"rollable": "1d100",
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/DelveSiteDenizen"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "very_common"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 1
												},
												"max": {
													"type": "number",
													"const": 27
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "common"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 28
												},
												"max": {
													"type": "number",
													"const": 41
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "common"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 42
												},
												"max": {
													"type": "number",
													"const": 55
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "common"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 56
												},
												"max": {
													"type": "number",
													"const": 69
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "uncommon"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 70
												},
												"max": {
													"type": "number",
													"const": 75
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "uncommon"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 76
												},
												"max": {
													"type": "number",
													"const": 81
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "uncommon"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 82
												},
												"max": {
													"type": "number",
													"const": 87
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "uncommon"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 88
												},
												"max": {
													"type": "number",
													"const": 93
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "rare"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 94
												},
												"max": {
													"type": "number",
													"const": 95
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "rare"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 96
												},
												"max": {
													"type": "number",
													"const": 97
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "rare"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 98
												},
												"max": {
													"type": "number",
													"const": 99
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"title": "DelveSiteDenizenStatic",
									"type": "object",
									"required": ["frequency", "roll"],
									"properties": {
										"frequency": {
											"type": "string",
											"const": "unforeseen"
										},
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 100
												},
												"max": {
													"type": "number",
													"const": 100
												}
											}
										}
									},
									"additionalProperties": {}
								}
							],
							"minItems": 12,
							"maxItems": 12,
							"additionalItems": {}
						}
					]
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"DelveSiteDenizen": {
			"title": "DelveSiteDenizen",
			"type": "object",
			"description": "Represents an entry in a delve site denizen matrix. Denizen matrices are described in Ironsworn: Delve.",
			"required": ["frequency", "roll"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteDenizenId"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "A name for the denizen, if it's different than the `name` property of the NPC."
				},
				"npc": {
					"$ref": "#/definitions/NpcId",
					"description": "The ID of the relevant NPC entry, if one is specified."
				},
				"frequency": {
					"$ref": "#/definitions/DelveSiteDenizenFrequency"
				},
				"roll": {
					"$ref": "#/definitions/DiceRange"
				}
			}
		},
		"DelveSiteDenizenFrequency": {
			"title": "DelveSiteDenizenFrequency",
			"enum": ["very_common", "common", "uncommon", "rare", "unforeseen"]
		},
		"DelveSiteDenizenId": {
			"title": "DelveSiteDenizenId",
			"type": "string",
			"description": "A unique ID representing a DelveSiteDenizen object.",
			"pattern": "^delve_site\\.denizen:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
		},
		"DelveSiteDenizenIdWildcard": {
			"title": "DelveSiteDenizenIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteDenizenId that can be used to match multiple DelveSiteDenizen objects.",
			"pattern": "^delve_site\\.denizen:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
		},
		"DelveSiteDomain": {
			"title": "DelveSiteDomain",
			"type": "object",
			"description": "A delve site Domain card.",
			"required": [
				"_id",
				"type",
				"name",
				"summary",
				"features",
				"dangers",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteDomainId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "delve_site_domain"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/DelveSiteDomainIdWildcard"
					}
				},
				"name_oracle": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "An oracle table ID containing place name elements. For examples, see oracle ID `oracle_rollable:delve/site_name/place/barrow`, and its siblings in oracle collection ID `oracle_collection:delve/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (`oracle_rollable:delve/site_name/format`) to create random names for delve sites."
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The text that appears below the title on the card."
				},
				"features": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/DelveSiteDomainFeature"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 21
												},
												"max": {
													"type": "number",
													"const": 43
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 44
												},
												"max": {
													"type": "number",
													"const": 56
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 57
												},
												"max": {
													"type": "number",
													"const": 64
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 65
												},
												"max": {
													"type": "number",
													"const": 68
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 69
												},
												"max": {
													"type": "number",
													"const": 72
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 73
												},
												"max": {
													"type": "number",
													"const": 76
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 77
												},
												"max": {
													"type": "number",
													"const": 80
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 81
												},
												"max": {
													"type": "number",
													"const": 84
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 85
												},
												"max": {
													"type": "number",
													"const": 88
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 89
												},
												"max": {
													"type": "number",
													"const": 98
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 99
												},
												"max": {
													"type": "number",
													"const": 99
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 100
												},
												"max": {
													"type": "number",
													"const": 100
												}
											}
										}
									},
									"additionalProperties": {}
								}
							],
							"minItems": 12,
							"maxItems": 12,
							"additionalItems": {}
						}
					]
				},
				"dangers": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/DelveSiteDomainDanger"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 31
												},
												"max": {
													"type": "number",
													"const": 33
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 34
												},
												"max": {
													"type": "number",
													"const": 36
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 37
												},
												"max": {
													"type": "number",
													"const": 39
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 40
												},
												"max": {
													"type": "number",
													"const": 42
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 43
												},
												"max": {
													"type": "number",
													"const": 45
												}
											}
										}
									},
									"additionalProperties": {}
								}
							],
							"minItems": 5,
							"maxItems": 5,
							"additionalItems": {}
						}
					]
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				},
				"descriptipn": {
					"$ref": "#/definitions/MarkdownString",
					"description": "Optional extended description text."
				}
			}
		},
		"DelveSiteDomainDanger": {
			"title": "DelveSiteDomainDanger",
			"type": "object",
			"description": "Represents a row in an oracle table, with a single text cell.",
			"required": ["_id", "roll", "text"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteDomainDangerId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"roll": {
					"description": "`null` represents an unrollable row, included only for rendering purposes.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceRange"
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The primary text content of this row."
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate",
					"releaseStage": "experimental"
				},
				"embed_table": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "Hints that the identified table should be rendered inside this table row.",
					"releaseStage": "experimental"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"oracle_rolls": {
					"type": "array",
					"description": "Further oracle rolls prompted by this table row.",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_i18n": {
					"$ref": "#/definitions/I18nHints",
					"releaseStage": "experimental"
				}
			}
		},
		"DelveSiteDomainDangerId": {
			"title": "DelveSiteDomainDangerId",
			"type": "string",
			"description": "A unique ID representing a DelveSiteDomainDanger object.",
			"pattern": "^delve_site_domain\\.danger:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
		},
		"DelveSiteDomainDangerIdWildcard": {
			"title": "DelveSiteDomainDangerIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteDomainDangerId that can be used to match multiple DelveSiteDomainDanger objects.",
			"pattern": "^delve_site_domain\\.danger:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
		},
		"DelveSiteDomainFeature": {
			"title": "DelveSiteDomainFeature",
			"type": "object",
			"description": "Represents a row in an oracle table, with a single text cell.",
			"required": ["_id", "roll", "text"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteDomainFeatureId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"roll": {
					"description": "`null` represents an unrollable row, included only for rendering purposes.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceRange"
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The primary text content of this row."
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate",
					"releaseStage": "experimental"
				},
				"embed_table": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "Hints that the identified table should be rendered inside this table row.",
					"releaseStage": "experimental"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"oracle_rolls": {
					"type": "array",
					"description": "Further oracle rolls prompted by this table row.",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_i18n": {
					"$ref": "#/definitions/I18nHints",
					"releaseStage": "experimental"
				}
			}
		},
		"DelveSiteDomainFeatureId": {
			"title": "DelveSiteDomainFeatureId",
			"type": "string",
			"description": "A unique ID representing a DelveSiteDomainFeature object.",
			"pattern": "^delve_site_domain\\.feature:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
		},
		"DelveSiteDomainFeatureIdWildcard": {
			"title": "DelveSiteDomainFeatureIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteDomainFeatureId that can be used to match multiple DelveSiteDomainFeature objects.",
			"pattern": "^delve_site_domain\\.feature:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
		},
		"DelveSiteDomainId": {
			"title": "DelveSiteDomainId",
			"type": "string",
			"description": "A unique ID representing a DelveSiteDomain object.",
			"pattern": "^delve_site_domain:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
		},
		"DelveSiteDomainIdWildcard": {
			"title": "DelveSiteDomainIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteDomainId that can be used to match multiple DelveSiteDomain objects.",
			"pattern": "^delve_site_domain:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
		},
		"DelveSiteId": {
			"title": "DelveSiteId",
			"type": "string",
			"description": "A unique ID representing a DelveSite object.",
			"pattern": "^delve_site:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
		},
		"DelveSiteIdWildcard": {
			"title": "DelveSiteIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteId that can be used to match multiple DelveSite objects.",
			"pattern": "^delve_site:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
		},
		"DelveSiteTheme": {
			"title": "DelveSiteTheme",
			"type": "object",
			"description": "A delve site theme card.",
			"required": [
				"_id",
				"type",
				"name",
				"summary",
				"features",
				"dangers",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteThemeId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "delve_site_theme"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/DelveSiteThemeIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The text that appears below the title on the card."
				},
				"features": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/DelveSiteThemeFeature"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 1
												},
												"max": {
													"type": "number",
													"const": 4
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 5
												},
												"max": {
													"type": "number",
													"const": 8
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 9
												},
												"max": {
													"type": "number",
													"const": 12
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 13
												},
												"max": {
													"type": "number",
													"const": 16
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 17
												},
												"max": {
													"type": "number",
													"const": 20
												}
											}
										}
									},
									"additionalProperties": {}
								}
							],
							"minItems": 5,
							"maxItems": 5,
							"additionalItems": {}
						}
					]
				},
				"dangers": {
					"allOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/DelveSiteThemeDanger"
							}
						},
						{
							"type": "array",
							"items": [
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 1
												},
												"max": {
													"type": "number",
													"const": 5
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 6
												},
												"max": {
													"type": "number",
													"const": 10
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 11
												},
												"max": {
													"type": "number",
													"const": 12
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 13
												},
												"max": {
													"type": "number",
													"const": 14
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 15
												},
												"max": {
													"type": "number",
													"const": 16
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 17
												},
												"max": {
													"type": "number",
													"const": 18
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 19
												},
												"max": {
													"type": "number",
													"const": 20
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 21
												},
												"max": {
													"type": "number",
													"const": 22
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 23
												},
												"max": {
													"type": "number",
													"const": 24
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 25
												},
												"max": {
													"type": "number",
													"const": 26
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 27
												},
												"max": {
													"type": "number",
													"const": 28
												}
											}
										}
									},
									"additionalProperties": {}
								},
								{
									"type": "object",
									"required": ["roll"],
									"properties": {
										"roll": {
											"title": "DiceRangeStatic",
											"type": "object",
											"required": ["min", "max"],
											"properties": {
												"min": {
													"type": "number",
													"const": 29
												},
												"max": {
													"type": "number",
													"const": 30
												}
											}
										}
									},
									"additionalProperties": {}
								}
							],
							"minItems": 12,
							"maxItems": 12,
							"additionalItems": {}
						}
					]
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				},
				"descriptipn": {
					"$ref": "#/definitions/MarkdownString",
					"description": "Optional extended description text."
				}
			}
		},
		"DelveSiteThemeDanger": {
			"title": "DelveSiteThemeDanger",
			"type": "object",
			"description": "Represents a row in an oracle table, with a single text cell.",
			"required": ["_id", "roll", "text"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteThemeDangerId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"roll": {
					"description": "`null` represents an unrollable row, included only for rendering purposes.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceRange"
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The primary text content of this row."
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate",
					"releaseStage": "experimental"
				},
				"embed_table": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "Hints that the identified table should be rendered inside this table row.",
					"releaseStage": "experimental"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"oracle_rolls": {
					"type": "array",
					"description": "Further oracle rolls prompted by this table row.",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_i18n": {
					"$ref": "#/definitions/I18nHints",
					"releaseStage": "experimental"
				}
			}
		},
		"DelveSiteThemeDangerId": {
			"title": "DelveSiteThemeDangerId",
			"type": "string",
			"description": "A unique ID representing a DelveSiteThemeDanger object.",
			"pattern": "^delve_site_theme\\.danger:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
		},
		"DelveSiteThemeDangerIdWildcard": {
			"title": "DelveSiteThemeDangerIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteThemeDangerId that can be used to match multiple DelveSiteThemeDanger objects.",
			"pattern": "^delve_site_theme\\.danger:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
		},
		"DelveSiteThemeFeature": {
			"title": "DelveSiteThemeFeature",
			"type": "object",
			"description": "Represents a row in an oracle table, with a single text cell.",
			"required": ["_id", "roll", "text"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/DelveSiteThemeFeatureId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"roll": {
					"description": "`null` represents an unrollable row, included only for rendering purposes.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceRange"
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The primary text content of this row."
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate",
					"releaseStage": "experimental"
				},
				"embed_table": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "Hints that the identified table should be rendered inside this table row.",
					"releaseStage": "experimental"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"oracle_rolls": {
					"type": "array",
					"description": "Further oracle rolls prompted by this table row.",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_i18n": {
					"$ref": "#/definitions/I18nHints",
					"releaseStage": "experimental"
				}
			}
		},
		"DelveSiteThemeFeatureId": {
			"title": "DelveSiteThemeFeatureId",
			"type": "string",
			"description": "A unique ID representing a DelveSiteThemeFeature object.",
			"pattern": "^delve_site_theme\\.feature:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
		},
		"DelveSiteThemeFeatureIdWildcard": {
			"title": "DelveSiteThemeFeatureIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteThemeFeatureId that can be used to match multiple DelveSiteThemeFeature objects.",
			"pattern": "^delve_site_theme\\.feature:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
		},
		"DelveSiteThemeId": {
			"title": "DelveSiteThemeId",
			"type": "string",
			"description": "A unique ID representing a DelveSiteTheme object.",
			"pattern": "^delve_site_theme:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
		},
		"DelveSiteThemeIdWildcard": {
			"title": "DelveSiteThemeIdWildcard",
			"type": "string",
			"description": "A wildcarded DelveSiteThemeId that can be used to match multiple DelveSiteTheme objects.",
			"pattern": "^delve_site_theme:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
		},
		"DiceExpression": {
			"title": "DiceExpression",
			"type": "string",
			"description": "A simple dice roll expression with an optional (positive or negative) modifer.",
			"examples": ["1d100", "1d6+2", "2d10"],
			"pattern": "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"
		},
		"DiceRange": {
			"title": "DiceRange",
			"type": "object",
			"description": "Represents a range of dice roll results, bounded by `min` and `max` (inclusive).",
			"required": ["min", "max"],
			"properties": {
				"min": {
					"type": "integer",
					"description": "Low end of the dice range."
				},
				"max": {
					"type": "integer",
					"description": "High end of the dice range."
				}
			}
		},
		"DictKey": {
			"title": "DictKey",
			"type": "string",
			"description": "A `snake_case` key used in a Datasworn dictionary object.",
			"remarks": "If you need to generate a key from a user-provided label, it's recommended to use a 'slugify' function/library, e.g. https://www.npmjs.com/package/slugify for NodeJS.",
			"pattern": "^[a-z][a-z0-9_]*$"
		},
		"Documentation": {
			"title": "Documentation",
			"type": "string",
			"description": "Implementation hints or other developer-facing comments on this node. These should be omitted when representing an object for gameplay."
		},
		"Email": {
			"title": "Email",
			"type": "string",
			"description": "An email address.",
			"format": "email"
		},
		"EmbeddedActionRollMove": {
			"title": "EmbeddedActionRollMove",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedMoveId"
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "action_roll"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerActionRoll",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/definitions/MoveOutcomes",
					"title": "MoveOutcomes"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": true
				}
			}
		},
		"EmbeddedMove": {
			"title": "EmbeddedMove",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.",
			"required": ["roll_type"],
			"properties": {
				"roll_type": {
					"enum": ["action_roll", "no_roll", "progress_roll", "special_track"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "action_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedActionRollMove"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "no_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedNoRollMove"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "progress_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedProgressRollMove"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "special_track"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedSpecialTrackMove"
					}
				}
			]
		},
		"EmbeddedMoveId": {
			"$ref": "#/definitions/AssetAbilityMoveId",
			"title": "EmbeddedMoveId"
		},
		"EmbeddedMoveIdWildcard": {
			"$ref": "#/definitions/AssetAbilityMoveIdWildcard",
			"title": "EmbeddedMoveIdWildcard"
		},
		"EmbeddedNoRollMove": {
			"title": "EmbeddedNoRollMove",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedMoveId"
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "no_roll"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerNoRoll",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"title": "MoveOutcomes",
					"type": "null",
					"default": null
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": false,
					"const": false
				}
			}
		},
		"EmbeddedOracleColumnText": {
			"title": "EmbeddedOracleColumnText",
			"type": "object",
			"required": ["_id", "type", "name", "oracle_type", "dice", "rows"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedOracleRollableId"
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "column_text"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText"
					}
				}
			}
		},
		"EmbeddedOracleColumnText2": {
			"title": "EmbeddedOracleColumnText2",
			"type": "object",
			"required": ["_id", "type", "name", "oracle_type", "dice", "rows"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedOracleRollableId"
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "column_text2"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText2"
					}
				}
			}
		},
		"EmbeddedOracleColumnText3": {
			"title": "EmbeddedOracleColumnText3",
			"type": "object",
			"required": ["_id", "type", "name", "oracle_type", "dice", "rows"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedOracleRollableId"
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "column_text3"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText3"
					}
				}
			}
		},
		"EmbeddedOracleRollable": {
			"title": "EmbeddedOracleRollable",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.",
			"required": ["oracle_type"],
			"properties": {
				"oracle_type": {
					"enum": [
						"table_text",
						"table_text2",
						"table_text3",
						"column_text",
						"column_text2",
						"column_text3"
					]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedOracleTableText"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text2"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedOracleTableText2"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text3"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedOracleTableText3"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "column_text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedOracleColumnText"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "column_text2"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedOracleColumnText2"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "column_text3"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/EmbeddedOracleColumnText3"
					}
				}
			]
		},
		"EmbeddedOracleRollableId": {
			"title": "EmbeddedOracleRollableId",
			"anyOf": [
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableId"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableId"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableId"
				}
			]
		},
		"EmbeddedOracleRollableIdWildcard": {
			"title": "EmbeddedOracleRollableIdWildcard",
			"anyOf": [
				{
					"$ref": "#/definitions/AssetAbilityOracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/TruthOptionOracleRollableIdWildcard"
				},
				{
					"$ref": "#/definitions/MoveOracleRollableIdWildcard"
				}
			]
		},
		"EmbeddedOracleTableText": {
			"title": "EmbeddedOracleTableText",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"dice",
				"column_labels",
				"rows"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedOracleRollableId"
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_text"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "TextColumnLabels",
					"type": "object",
					"default": {
						"roll": "Roll",
						"text": "Result"
					},
					"required": ["roll", "text"],
					"properties": {
						"roll": {
							"$ref": "#/definitions/Label"
						},
						"text": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText"
					}
				}
			}
		},
		"EmbeddedOracleTableText2": {
			"title": "EmbeddedOracleTableText2",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"dice",
				"column_labels",
				"rows"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedOracleRollableId"
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_text2"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "Text2ColumnLabels",
					"type": "object",
					"default": {
						"roll": "Roll",
						"text": "Result",
						"text2": "Details"
					},
					"required": ["roll", "text", "text2"],
					"properties": {
						"roll": {
							"$ref": "#/definitions/Label"
						},
						"text": {
							"$ref": "#/definitions/Label"
						},
						"text2": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText2"
					}
				}
			}
		},
		"EmbeddedOracleTableText3": {
			"title": "EmbeddedOracleTableText3",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"dice",
				"column_labels",
				"rows"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedOracleRollableId"
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_text3"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "Text3ColumnLabels",
					"type": "object",
					"required": ["roll", "text", "text2", "text3"],
					"properties": {
						"roll": {
							"$ref": "#/definitions/Label"
						},
						"text": {
							"$ref": "#/definitions/Label"
						},
						"text2": {
							"$ref": "#/definitions/Label"
						},
						"text3": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText3"
					}
				}
			}
		},
		"EmbeddedProgressRollMove": {
			"title": "EmbeddedProgressRollMove",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"tracks",
				"trigger",
				"text",
				"outcomes",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedMoveId"
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "progress_roll"
				},
				"tracks": {
					"$ref": "#/definitions/ProgressTrackTypeInfo",
					"description": "Describes the common features of progress tracks associated with this move."
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerProgressRoll",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/definitions/MoveOutcomes",
					"title": "MoveOutcomes"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": false,
					"const": false
				}
			}
		},
		"EmbeddedSpecialTrackMove": {
			"title": "EmbeddedSpecialTrackMove",
			"type": "object",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/EmbeddedMoveId"
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "special_track"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerSpecialTrack",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/definitions/MoveOutcomes",
					"title": "MoveOutcomes"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": false,
					"const": false
				}
			}
		},
		"EmbedOnlyType": {
			"title": "EmbedOnlyType",
			"enum": [
				"ability",
				"option",
				"row",
				"feature",
				"danger",
				"denizen",
				"variant"
			]
		},
		"EntityPrompt": {
			"title": "EntityPrompt",
			"type": "object",
			"description": "This type is a placeholder and may see signficant changes in v0.2.0.",
			"releaseStage": "experimental",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/definitions/MarkdownString"
				}
			}
		},
		"Expansion": {
			"title": "Expansion",
			"type": "object",
			"description": "A Datasworn package that relies on an external package to provide its ruleset.",
			"required": [
				"_id",
				"datasworn_version",
				"type",
				"ruleset",
				"title",
				"authors",
				"date",
				"license",
				"url",
				"oracles",
				"assets",
				"moves"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/ExpansionId"
				},
				"datasworn_version": {
					"type": "string",
					"description": "The version of the Datasworn format used by this data.",
					"const": "0.1.0",
					"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
				},
				"type": {
					"type": "string",
					"const": "expansion"
				},
				"ruleset": {
					"$ref": "#/definitions/RulesetId"
				},
				"title": {
					"$ref": "#/definitions/Label",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"authors": {
					"type": "array",
					"description": "Lists authors credited by the source material.",
					"items": {
						"$ref": "#/definitions/AuthorInfo"
					},
					"minItems": 1
				},
				"date": {
					"type": "string",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"remarks": "You may prefer to deserialize this as a Date object.",
					"format": "date",
					"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"
				},
				"license": {
					"description": "An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [
						{
							"$ref": "#/definitions/WebUrl"
						},
						{
							"type": "null"
						}
					]
				},
				"url": {
					"$ref": "#/definitions/WebUrl",
					"description": "A URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"rules": {
					"$ref": "#/definitions/RulesExpansion"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"oracles": {
					"type": "object",
					"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleTablesCollection"
						}
					}
				},
				"assets": {
					"type": "object",
					"description": "A dictionary object containing asset collections, which contain assets.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetCollection"
						}
					}
				},
				"atlas": {
					"type": "object",
					"description": "A dictionary object containing atlas collections, which contain atlas entries.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AtlasCollection"
						}
					}
				},
				"moves": {
					"type": "object",
					"description": "A dictionary object containing move categories, which contain moves.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/MoveCategory"
						}
					}
				},
				"npcs": {
					"type": "object",
					"description": "A dictionary object containing NPC collections, which contain NPCs.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/NpcCollection"
						}
					}
				},
				"rarities": {
					"type": "object",
					"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Rarity"
						}
					}
				},
				"delve_sites": {
					"type": "object",
					"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/DelveSite"
						}
					}
				},
				"site_domains": {
					"type": "object",
					"description": "A dictionary object containing delve site domains.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/DelveSiteDomain"
						}
					}
				},
				"site_themes": {
					"type": "object",
					"description": "A dictionary object containing delve site themes.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/DelveSiteTheme"
						}
					}
				},
				"truths": {
					"type": "object",
					"description": "A dictionary object of truth categories.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Truth"
						}
					}
				}
			},
			"additionalProperties": {}
		},
		"ExpansionId": {
			"title": "ExpansionId",
			"type": "string",
			"description": "The ID of a Datasworn package that relies on an external package to provide its ruleset.",
			"examples": ["delve", "sundered_isles"],
			"pattern": "^[a-z][a-z0-9_]*$"
		},
		"I18nHint": {
			"title": "I18nHint",
			"type": "object",
			"releaseStage": "experimental",
			"properties": {
				"part_of_speech": {
					"$ref": "#/definitions/PartOfSpeech",
					"description": "The part of speech for this string."
				}
			}
		},
		"I18nHints": {
			"title": "I18nHints",
			"type": "object",
			"description": "Internationalization/localization hints for the text content of this object.",
			"releaseStage": "experimental",
			"properties": {
				"text": {
					"$ref": "#/definitions/I18nHint"
				},
				"text2": {
					"$ref": "#/definitions/I18nHint"
				},
				"text3": {
					"$ref": "#/definitions/I18nHint"
				},
				"template": {
					"type": "object",
					"properties": {
						"text": {
							"$ref": "#/definitions/I18nHint"
						},
						"text2": {
							"$ref": "#/definitions/I18nHint"
						},
						"text3": {
							"$ref": "#/definitions/I18nHint"
						}
					}
				}
			}
		},
		"ImpactCategory": {
			"title": "ImpactCategory",
			"type": "object",
			"description": "Describes a category of standard impacts/debilities.",
			"required": ["label", "description", "contents"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label",
					"description": "A label for this impact category."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A description of this impact category."
				},
				"contents": {
					"type": "object",
					"description": "A dictionary object of the Impacts in this category.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/ImpactRule"
						}
					}
				}
			}
		},
		"ImpactRule": {
			"title": "ImpactRule",
			"type": "object",
			"description": "Describes a standard impact/debility.",
			"required": [
				"label",
				"prevents_recovery",
				"permanent",
				"shared",
				"description"
			],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label",
					"description": "The label for this impact."
				},
				"prevents_recovery": {
					"type": "array",
					"description": "Any ruleset condition meters that can't recover when this impact is active.",
					"default": [],
					"items": {
						"$ref": "#/definitions/ConditionMeterKey"
					}
				},
				"permanent": {
					"type": "boolean",
					"description": "Is this impact permanent?",
					"default": false
				},
				"shared": {
					"type": "boolean",
					"description": "Is this impact applied to all players at once?",
					"default": false
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A description of this impact."
				}
			}
		},
		"Label": {
			"title": "Label",
			"type": "string",
			"description": "A localized, player-facing name or label, formatted as plain text. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).",
			"i18n": true
		},
		"MarkdownString": {
			"title": "MarkdownString",
			"type": "string",
			"description": "Localized, player-facing text, formatted in Markdown. It is *not* formatted for use \"out of the box\"; it uses some custom syntax, intended to be replaced in whatever way is most appropriate for your implementation.\n\n* `[Link text](datasworn:move:starforged/suffer/pay_the_price)`: A link to the identified object. The ID must conform to the `AnyId` type; no wildcards allowed.\n* `{{table>oracle_rollable:starforged/core/action}}`: the referenced oracle is rendered here in the source material. The ID must conform to the `AnyOracleRollableId` type; no wildcards allowed.\n* `{{table_columns>move:delve/delve/delve_the_depths}}`: Render *all* direct OracleRollable children of the identified node. This can be an OracleCollectionId, or the ID of anything that can have EmbeddedOracleRollables (such as a Move or TruthOption).\n",
			"i18n": true,
			"format": "markdown"
		},
		"MarkdownTemplateString": {
			"title": "MarkdownTemplateString",
			"type": "string",
			"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key>some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `text` key, for example `{{text>oracle_rollable:starforged/core/action}}`\n",
			"releaseStage": "experimental",
			"i18n": true,
			"format": "markdown"
		},
		"Move": {
			"title": "Move",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.",
			"required": ["roll_type"],
			"properties": {
				"roll_type": {
					"enum": ["action_roll", "no_roll", "progress_roll", "special_track"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "action_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveActionRoll"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "no_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveNoRoll"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "progress_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveProgressRoll"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "special_track"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveSpecialTrack"
					}
				}
			]
		},
		"MoveActionRoll": {
			"title": "Move (action roll)",
			"type": "object",
			"description": "A move that makes an action roll.",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"_source",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "action_roll"
				},
				"replaces": {
					"type": "array",
					"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerActionRoll",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/definitions/MoveOutcomes",
					"title": "MoveOutcomes"
				},
				"oracles": {
					"title": "MoveOracles",
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/EmbeddedOracleRollable",
							"title": "MoveOracleRollable"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": true
				}
			}
		},
		"MoveActionRollEnhancement": {
			"title": "MoveActionRollEnhancement",
			"type": "object",
			"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.",
			"required": ["roll_type", "enhances"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.",
					"const": "action_roll"
				},
				"enhances": {
					"description": "An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.",
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/AnyMoveIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"trigger": {
					"$ref": "#/definitions/TriggerActionRollEnhancement"
				}
			}
		},
		"MoveCategory": {
			"title": "MoveCategory",
			"type": "object",
			"required": ["_id", "type", "name", "contents", "collections", "_source"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/MoveCategoryId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "move_category"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/MoveCategoryIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/MoveCategoryIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Move"
						}
					}
				},
				"collections": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/MoveCategory"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"MoveCategoryId": {
			"title": "MoveCategoryId",
			"type": "string",
			"description": "A unique ID representing a MoveCategory object.",
			"pattern": "^move_category:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
		},
		"MoveCategoryIdWildcard": {
			"title": "MoveCategoryIdWildcard",
			"type": "string",
			"description": "A wildcarded MoveCategoryId that can be used to match multiple MoveCategory objects.",
			"pattern": "^move_category:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
		},
		"MoveEnhancement": {
			"title": "MoveEnhancement",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.",
			"required": ["roll_type"],
			"properties": {
				"roll_type": {
					"enum": ["action_roll", "no_roll", "progress_roll", "special_track"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "action_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveActionRollEnhancement"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "no_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveNoRollEnhancement"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "progress_roll"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveProgressRollEnhancement"
					}
				},
				{
					"if": {
						"properties": {
							"roll_type": {
								"type": "string",
								"const": "special_track"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/MoveSpecialTrackEnhancement"
					}
				}
			]
		},
		"MoveId": {
			"title": "MoveId",
			"type": "string",
			"description": "A unique ID representing a Move object.",
			"pattern": "^move:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
		},
		"MoveIdWildcard": {
			"title": "MoveIdWildcard",
			"type": "string",
			"description": "A wildcarded MoveId that can be used to match multiple Move objects.",
			"pattern": "^move:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
		},
		"MoveNoRoll": {
			"title": "MoveNoRoll",
			"type": "object",
			"description": "A move that makes no progress rolls or action rolls.",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"_source",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "no_roll"
				},
				"replaces": {
					"type": "array",
					"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerNoRoll",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"title": "MoveOutcomes",
					"type": "null",
					"default": null
				},
				"oracles": {
					"title": "MoveOracles",
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/EmbeddedOracleRollable",
							"title": "MoveOracleRollable"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": false,
					"const": false
				}
			}
		},
		"MoveNoRollEnhancement": {
			"title": "MoveNoRollEnhancement",
			"type": "object",
			"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.",
			"required": ["roll_type", "enhances"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.",
					"const": "no_roll"
				},
				"enhances": {
					"description": "An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.",
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/AnyMoveIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"trigger": {
					"$ref": "#/definitions/TriggerNoRollEnhancement"
				}
			}
		},
		"MoveOracleRollableId": {
			"title": "MoveOracleRollableId",
			"type": "string",
			"description": "A unique ID representing a MoveOracleRollable object.",
			"pattern": "^move\\.oracle_rollable:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"MoveOracleRollableIdWildcard": {
			"title": "MoveOracleRollableIdWildcard",
			"type": "string",
			"description": "A wildcarded MoveOracleRollableId that can be used to match multiple MoveOracleRollable objects.",
			"pattern": "^move\\.oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"MoveOracleRollableRowId": {
			"title": "MoveOracleRollableRowId",
			"type": "string",
			"description": "A unique ID representing a MoveOracleRollableRow object.",
			"pattern": "^move\\.oracle_rollable\\.row:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+)$"
		},
		"MoveOracleRollableRowIdWildcard": {
			"title": "MoveOracleRollableRowIdWildcard",
			"type": "string",
			"description": "A wildcarded MoveOracleRollableRowId that can be used to match multiple MoveOracleRollableRow objects.",
			"pattern": "^move\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+|\\*)$"
		},
		"MoveOutcome": {
			"title": "MoveOutcome",
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/definitions/MarkdownString"
				},
				"oracle_rolls": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				}
			}
		},
		"MoveOutcomes": {
			"title": "MoveOutcomes",
			"type": "object",
			"description": "A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.",
			"required": ["strong_hit", "weak_hit", "miss"],
			"properties": {
				"strong_hit": {
					"$ref": "#/definitions/MoveOutcome"
				},
				"weak_hit": {
					"$ref": "#/definitions/MoveOutcome"
				},
				"miss": {
					"$ref": "#/definitions/MoveOutcome"
				}
			}
		},
		"MoveProgressRoll": {
			"title": "Progress Move",
			"type": "object",
			"description": "A progress move that rolls on a standard progress track type (whose features are defined by this move object). For progress rolls that use special tracks, see MoveSpecialTrack.",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"tracks",
				"trigger",
				"text",
				"outcomes",
				"_source",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "progress_roll"
				},
				"tracks": {
					"$ref": "#/definitions/ProgressTrackTypeInfo",
					"description": "Describes the common features of progress tracks associated with this move."
				},
				"replaces": {
					"type": "array",
					"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerProgressRoll",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/definitions/MoveOutcomes",
					"title": "MoveOutcomes"
				},
				"oracles": {
					"title": "MoveOracles",
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/EmbeddedOracleRollable",
							"title": "MoveOracleRollable"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": false,
					"const": false
				}
			}
		},
		"MoveProgressRollEnhancement": {
			"title": "MoveProgressRollEnhancement",
			"type": "object",
			"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.",
			"required": ["roll_type", "enhances"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.",
					"const": "progress_roll"
				},
				"enhances": {
					"description": "An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.",
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/AnyMoveIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"trigger": {
					"$ref": "#/definitions/TriggerProgressRollEnhancement"
				}
			}
		},
		"MoveRollType": {
			"title": "MoveRollType",
			"description": "  - `no_roll`: A move that makes no action rolls or progress rolls.\n  - `action_roll`: A move that makes an action roll.\n  - `progress_roll`: A progress move that rolls on a standard progress track type (defined by this move).\n  - `special_track`: A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
			"enum": ["no_roll", "action_roll", "progress_roll", "special_track"]
		},
		"MoveSpecialTrack": {
			"title": "Progress Move (special track roll)",
			"type": "object",
			"description": "A progress move that rolls on a special track, such as Legacies (Starforged) or Bonds (classic Ironsworn). For progress moves that use standard progress tracks, see MoveProgressRoll instead.",
			"required": [
				"_id",
				"type",
				"name",
				"roll_type",
				"trigger",
				"text",
				"outcomes",
				"_source",
				"allow_momentum_burn"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/MoveId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "move"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"roll_type": {
					"type": "string",
					"const": "special_track"
				},
				"replaces": {
					"type": "array",
					"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.",
					"items": {
						"$ref": "#/definitions/MoveIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"trigger": {
					"$ref": "#/definitions/TriggerSpecialTrack",
					"title": "Trigger",
					"description": "Trigger conditions for this move."
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The complete rules text of the move."
				},
				"outcomes": {
					"$ref": "#/definitions/MoveOutcomes",
					"title": "MoveOutcomes"
				},
				"oracles": {
					"title": "MoveOracles",
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/EmbeddedOracleRollable",
							"title": "MoveOracleRollable"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"description": "Is burning momentum allowed for this move?",
					"default": false,
					"const": false
				}
			}
		},
		"MoveSpecialTrackEnhancement": {
			"title": "MoveSpecialTrackEnhancement",
			"type": "object",
			"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.",
			"required": ["roll_type", "enhances"],
			"properties": {
				"roll_type": {
					"type": "string",
					"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.",
					"const": "special_track"
				},
				"enhances": {
					"description": "An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.",
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/AnyMoveIdWildcard"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"trigger": {
					"$ref": "#/definitions/TriggerSpecialTrackEnhancement"
				}
			}
		},
		"NonCollectableType": {
			"title": "NonCollectableType",
			"enum": [
				"delve_site",
				"delve_site_domain",
				"delve_site_theme",
				"rarity",
				"truth"
			]
		},
		"Npc": {
			"title": "Npc",
			"type": "object",
			"description": "A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged.",
			"required": [
				"_id",
				"type",
				"name",
				"rank",
				"nature",
				"features",
				"drives",
				"tactics",
				"variants",
				"description",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/NpcId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "npc"
				},
				"name": {
					"$ref": "#/definitions/Label"
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/NpcIdWildcard"
					}
				},
				"rank": {
					"$ref": "#/definitions/ChallengeRank",
					"description": "The suggested challenge rank for this NPC."
				},
				"nature": {
					"$ref": "#/definitions/NpcNature"
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"drives": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"tactics": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MarkdownString"
					}
				},
				"variants": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/NpcVariant"
						}
					}
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/definitions/MarkdownString"
				},
				"your_truth": {
					"$ref": "#/definitions/MarkdownString"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"NpcCollection": {
			"title": "NpcCollection",
			"type": "object",
			"required": ["_id", "type", "name", "contents", "collections", "_source"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/NpcCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "npc_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/NpcCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/NpcCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Npc"
						}
					}
				},
				"collections": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/NpcCollection"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"NpcCollectionId": {
			"title": "NpcCollectionId",
			"type": "string",
			"description": "A unique ID representing a NpcCollection object.",
			"pattern": "^npc_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
		},
		"NpcCollectionIdWildcard": {
			"title": "NpcCollectionIdWildcard",
			"type": "string",
			"description": "A wildcarded NpcCollectionId that can be used to match multiple NpcCollection objects.",
			"pattern": "^npc_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
		},
		"NpcId": {
			"title": "NpcId",
			"type": "string",
			"description": "A unique ID representing a Npc object.",
			"pattern": "^npc:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
		},
		"NpcIdWildcard": {
			"title": "NpcIdWildcard",
			"type": "string",
			"description": "A wildcarded NpcId that can be used to match multiple Npc objects.",
			"pattern": "^npc:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
		},
		"NpcNature": {
			"$ref": "#/definitions/Label",
			"title": "NpcNature",
			"description": "A localized category label describing the nature of this NPC.\n\nIn Ironsworn classic, this is probably the singular form of the parent collection's name.\n\nFor Starforged, see the table on p. 258 for examples.",
			"examples": [
				"Ironlander",
				"Firstborn",
				"Animal",
				"Beast",
				"Horror",
				"Anomaly",
				"Creature",
				"Human",
				"Machine",
				"Monster",
				"Vehicle"
			]
		},
		"NpcVariant": {
			"title": "NpcVariant",
			"type": "object",
			"required": ["_id", "name", "rank", "nature", "description"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/NpcVariantId",
					"description": "The unique Datasworn ID for this node."
				},
				"name": {
					"$ref": "#/definitions/Label"
				},
				"rank": {
					"$ref": "#/definitions/ChallengeRank",
					"description": "The suggested challenge rank for this NPC."
				},
				"nature": {
					"$ref": "#/definitions/NpcNature"
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				}
			}
		},
		"NpcVariantId": {
			"title": "NpcVariantId",
			"type": "string",
			"description": "A unique ID representing a NpcVariant object.",
			"pattern": "^npc\\.variant:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"NpcVariantIdWildcard": {
			"title": "NpcVariantIdWildcard",
			"type": "string",
			"description": "A wildcarded NpcVariantId that can be used to match multiple NpcVariant objects.",
			"pattern": "^npc\\.variant:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"OracleCollection": {
			"title": "OracleCollection",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.",
			"required": ["oracle_type"],
			"properties": {
				"oracle_type": {
					"enum": [
						"tables",
						"table_shared_rolls",
						"table_shared_text",
						"table_shared_text2",
						"table_shared_text3"
					]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "tables"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTablesCollection"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_shared_rolls"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableSharedRolls"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_shared_text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableSharedText"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_shared_text2"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableSharedText2"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_shared_text3"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableSharedText3"
					}
				}
			]
		},
		"OracleCollectionId": {
			"title": "OracleCollectionId",
			"type": "string",
			"description": "A unique ID representing an OracleCollection object.",
			"pattern": "^oracle_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
		},
		"OracleCollectionIdWildcard": {
			"title": "OracleCollectionIdWildcard",
			"type": "string",
			"description": "A wildcarded OracleCollectionId that can be used to match multiple OracleCollection objects.",
			"pattern": "^oracle_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
		},
		"OracleColumnText": {
			"title": "OracleColumnText",
			"type": "object",
			"description": "Represents a single column in an OracleCollection.",
			"required": ["_id", "type", "name", "oracle_type", "dice", "rows"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "column_text"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleRollableIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText"
					}
				}
			}
		},
		"OracleColumnText2": {
			"title": "OracleColumnText2",
			"type": "object",
			"required": ["_id", "type", "name", "oracle_type", "dice", "rows"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "column_text2"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleRollableIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText2"
					}
				}
			}
		},
		"OracleColumnText3": {
			"title": "OracleColumnText3",
			"type": "object",
			"required": ["_id", "type", "name", "oracle_type", "dice", "rows"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "column_text3"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleRollableIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText3"
					}
				}
			}
		},
		"OracleDuplicateBehavior": {
			"title": "OracleDuplicateBehavior",
			"description": "Special roll instructions to use when rolling multiple times on a single oracle.\n\n  - `reroll`: Duplicate results should be re-rolled.\n  - `keep`: Duplicates results should be kept.\n  - `make_it_worse`: Duplicate results should be kept, and they compound to make things worse.",
			"enum": ["reroll", "keep", "make_it_worse"]
		},
		"OracleMatchBehavior": {
			"title": "OracleMatchBehavior",
			"type": "object",
			"required": ["text"],
			"properties": {
				"text": {
					"$ref": "#/definitions/MarkdownString"
				}
			}
		},
		"OracleRoll": {
			"title": "OracleRoll",
			"type": "object",
			"required": ["oracle", "dice", "auto", "duplicates", "number_of_rolls"],
			"properties": {
				"oracle": {
					"description": "The ID of the oracle to be rolled. A `null` value indicates that it's a roll on the same table.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/OracleRollableId"
						},
						{
							"type": "null"
						}
					]
				},
				"dice": {
					"description": "The dice roll to make on the oracle table. Set it to `null` if you just want the table's default.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceExpression"
						},
						{
							"type": "null"
						}
					]
				},
				"auto": {
					"type": "boolean",
					"description": "Both Ironsworn and Starforged explicitly recommend *against* rolling all details at once. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\" or \"Roll twice\".",
					"default": false
				},
				"duplicates": {
					"$ref": "#/definitions/OracleDuplicateBehavior",
					"description": "Special rules on how to handle duplicate results, when rolling multiple times.",
					"default": "reroll"
				},
				"number_of_rolls": {
					"type": "integer",
					"description": "The number of times to roll.",
					"default": 1,
					"minimum": 1
				}
			}
		},
		"OracleRollable": {
			"title": "OracleRollable",
			"type": "object",
			"description": "A collection of table rows from which random results may be rolled. This may represent a standalone table, or a column in a larger table.",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.",
			"required": ["oracle_type"],
			"properties": {
				"oracle_type": {
					"enum": [
						"table_text",
						"table_text2",
						"table_text3",
						"column_text",
						"column_text2",
						"column_text3"
					]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableText"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text2"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableText2"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text3"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableText3"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "column_text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleColumnText"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "column_text2"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleColumnText2"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "column_text3"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleColumnText3"
					}
				}
			]
		},
		"OracleRollableId": {
			"title": "OracleRollableId",
			"type": "string",
			"description": "A unique ID representing an OracleRollable object.",
			"pattern": "^oracle_rollable:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
		},
		"OracleRollableIdWildcard": {
			"title": "OracleRollableIdWildcard",
			"type": "string",
			"description": "A wildcarded OracleRollableId that can be used to match multiple OracleRollable objects.",
			"pattern": "^oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
		},
		"OracleRollableRow": {
			"title": "OracleRollableRow",
			"anyOf": [
				{
					"$ref": "#/definitions/OracleRollableRowText"
				},
				{
					"$ref": "#/definitions/OracleRollableRowText2"
				},
				{
					"$ref": "#/definitions/OracleRollableRowText3"
				}
			]
		},
		"OracleRollableRowId": {
			"title": "OracleRollableRowId",
			"type": "string",
			"description": "A unique ID representing an OracleRollableRow object.",
			"pattern": "^oracle_rollable\\.row:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)$"
		},
		"OracleRollableRowIdWildcard": {
			"title": "OracleRollableRowIdWildcard",
			"type": "string",
			"description": "A wildcarded OracleRollableRowId that can be used to match multiple OracleRollableRow objects.",
			"pattern": "^oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"
		},
		"OracleRollableRowText": {
			"title": "OracleRollableRowText",
			"type": "object",
			"description": "Represents a row in an oracle table, with a single text cell.",
			"required": ["_id", "roll", "text"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AnyOracleRollableRowId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"roll": {
					"description": "`null` represents an unrollable row, included only for rendering purposes.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceRange"
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The primary text content of this row."
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate",
					"releaseStage": "experimental"
				},
				"embed_table": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "Hints that the identified table should be rendered inside this table row.",
					"releaseStage": "experimental"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"oracle_rolls": {
					"type": "array",
					"description": "Further oracle rolls prompted by this table row.",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_i18n": {
					"$ref": "#/definitions/I18nHints",
					"releaseStage": "experimental"
				}
			}
		},
		"OracleRollableRowText2": {
			"title": "OracleRollableRowText2",
			"type": "object",
			"description": "Represents a row in an oracle table that provides a secondary text field.",
			"required": ["_id", "roll", "text", "text2"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AnyOracleRollableRowId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"roll": {
					"description": "`null` represents an unrollable row, included only for rendering purposes.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceRange"
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The primary text content of this row."
				},
				"text2": {
					"description": "The secondary text for this row. Use `null` to represent a cell with a blank or empty vlue.",
					"anyOf": [
						{
							"$ref": "#/definitions/MarkdownString"
						},
						{
							"type": "null"
						}
					]
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate",
					"releaseStage": "experimental"
				},
				"embed_table": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "Hints that the identified table should be rendered inside this table row.",
					"releaseStage": "experimental"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"oracle_rolls": {
					"type": "array",
					"description": "Further oracle rolls prompted by this table row.",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_i18n": {
					"$ref": "#/definitions/I18nHints",
					"releaseStage": "experimental"
				}
			}
		},
		"OracleRollableRowText3": {
			"title": "OracleRollableRowText3",
			"type": "object",
			"description": "Represents a row in an oracle table with 3 text cells.",
			"required": ["_id", "roll", "text", "text2", "text3"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/AnyOracleRollableRowId"
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl"
				},
				"roll": {
					"description": "`null` represents an unrollable row, included only for rendering purposes.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DiceRange"
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "The primary text content of this row."
				},
				"text2": {
					"description": "The secondary text for this row. Use `null` to represent a cell with a blank or empty value.",
					"anyOf": [
						{
							"$ref": "#/definitions/MarkdownString"
						},
						{
							"type": "null"
						}
					]
				},
				"text3": {
					"description": "The tertiary text for this row. Use `null` to represent a cell with a blank or empty vlue.",
					"anyOf": [
						{
							"$ref": "#/definitions/MarkdownString"
						},
						{
							"type": "null"
						}
					]
				},
				"template": {
					"$ref": "#/definitions/OracleRollTemplate",
					"releaseStage": "experimental"
				},
				"embed_table": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "Hints that the identified table should be rendered inside this table row.",
					"releaseStage": "experimental"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"oracle_rolls": {
					"type": "array",
					"description": "Further oracle rolls prompted by this table row.",
					"items": {
						"$ref": "#/definitions/OracleRoll"
					}
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_i18n": {
					"$ref": "#/definitions/I18nHints",
					"releaseStage": "experimental"
				}
			}
		},
		"OracleRollableTable": {
			"title": "OracleRollableTable",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.",
			"required": ["oracle_type"],
			"properties": {
				"oracle_type": {
					"enum": ["table_text", "table_text2", "table_text3"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableText"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text2"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableText2"
					}
				},
				{
					"if": {
						"properties": {
							"oracle_type": {
								"type": "string",
								"const": "table_text3"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/OracleTableText3"
					}
				}
			]
		},
		"OracleRollTemplate": {
			"title": "OracleRollTemplate",
			"type": "object",
			"description": "Provides string templates that may be used in place of the static row text from `OracleRollableRow#text`, `OracleRollableRow#text2`, and `OracleRollableRow#text3`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{text>some_oracle_rollable_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleRollableRow#text` from the target oracle rollable ID.",
			"releaseStage": "experimental",
			"properties": {
				"text": {
					"$ref": "#/definitions/MarkdownTemplateString",
					"description": "A string template that may be used in place of OracleRollableRow#text.",
					"examples": [
						"{{text>oracle_rollable:starforged/faction/name/affiliation}} of the {{text>oracle_rollable:starforged/faction/name/legacy}} {{text>oracle_rollable:starforged/faction/name/identity}}"
					]
				},
				"text2": {
					"$ref": "#/definitions/MarkdownTemplateString",
					"description": "A string template that may be used in place of OracleRollableRow#text2."
				},
				"text3": {
					"$ref": "#/definitions/MarkdownTemplateString",
					"description": "A string template that may be used in place of OracleRollableRow#text3."
				}
			}
		},
		"OracleTablesCollection": {
			"title": "OracleTablesCollection",
			"type": "object",
			"description": "An OracleCollection that represents a category or grouping of tables, which may themselves be `OracleTablesCollection`s.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"contents",
				"collections",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "tables"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleRollableTable"
						}
					}
				},
				"collections": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleCollection"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"OracleTableSharedRolls": {
			"title": "OracleTableSharedRolls",
			"type": "object",
			"description": "An OracleCollection representing a single table with one roll column and multiple text columns.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"contents",
				"column_labels",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_shared_rolls"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleColumnText"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "TextColumnLabels",
					"type": "object",
					"description": "Provides column labels for this table. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row). For all other column labels, see the `name` property of each child `OracleColumn`.",
					"default": {
						"roll": "Roll",
						"text": "Result"
					},
					"required": ["roll"],
					"properties": {
						"roll": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"OracleTableSharedText": {
			"title": "OracleTableSharedText",
			"type": "object",
			"description": "An OracleCollection representing a single table with multiple roll columns and one text column.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"contents",
				"column_labels",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_shared_text"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleColumnText"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "TextColumnLabels",
					"type": "object",
					"default": {
						"roll": "Roll",
						"text": "Result"
					},
					"required": ["text"],
					"properties": {
						"text": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"OracleTableSharedText2": {
			"title": "OracleTableSharedText2",
			"type": "object",
			"description": "An OracleCollection representing a single table with multiple roll columns, and 2 shared text columns.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"contents",
				"column_labels",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_shared_text2"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleColumnText2"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "Text2ColumnLabels",
					"type": "object",
					"default": {
						"roll": "Roll",
						"text": "Result",
						"text2": "Details"
					},
					"required": ["text", "text2"],
					"properties": {
						"text": {
							"$ref": "#/definitions/Label"
						},
						"text2": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"OracleTableSharedText3": {
			"title": "OracleTableSharedText3",
			"type": "object",
			"description": "An OracleCollection representing a single table with multiple roll columns, and 3 shared text columns.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"contents",
				"column_labels",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleCollectionId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_collection"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_shared_text3"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"enhances": {
					"type": "array",
					"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.",
					"items": {
						"$ref": "#/definitions/OracleCollectionIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
				},
				"contents": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleColumnText3"
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "Text3ColumnLabels",
					"type": "object",
					"default": {},
					"required": ["text", "text2", "text3"],
					"properties": {
						"text": {
							"$ref": "#/definitions/Label"
						},
						"text2": {
							"$ref": "#/definitions/Label"
						},
						"text3": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"OracleTableText": {
			"title": "OracleTableText",
			"type": "object",
			"description": "Represents a basic rollable oracle table with one roll column and one text result column.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"dice",
				"column_labels",
				"rows",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_text"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleRollableIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "TextColumnLabels",
					"type": "object",
					"default": {
						"roll": "Roll",
						"text": "Result"
					},
					"required": ["roll", "text"],
					"properties": {
						"roll": {
							"$ref": "#/definitions/Label"
						},
						"text": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText"
					}
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"OracleTableText2": {
			"title": "OracleTableText2",
			"type": "object",
			"description": "A rollable oracle table with one roll column and two text columns.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"dice",
				"column_labels",
				"rows",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_text2"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleRollableIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "Text2ColumnLabels",
					"type": "object",
					"default": {
						"roll": "Roll",
						"text": "Result",
						"text2": "Details"
					},
					"required": ["roll", "text", "text2"],
					"properties": {
						"roll": {
							"$ref": "#/definitions/Label"
						},
						"text": {
							"$ref": "#/definitions/Label"
						},
						"text2": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText2"
					}
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"OracleTableText3": {
			"title": "OracleTableText3",
			"type": "object",
			"description": "A rollable oracle table with one roll column and 3 text columns.",
			"required": [
				"_id",
				"type",
				"name",
				"oracle_type",
				"dice",
				"column_labels",
				"rows",
				"_source"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/OracleRollableId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "oracle_rollable"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"oracle_type": {
					"type": "string",
					"const": "table_text3"
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/OracleRollableIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"description": "The roll used to select a result on this oracle.",
					"default": "1d100"
				},
				"match": {
					"$ref": "#/definitions/OracleMatchBehavior",
					"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
				},
				"recommended_rolls": {
					"type": "object",
					"required": ["min", "max"],
					"properties": {
						"min": {
							"type": "integer",
							"default": 1
						},
						"max": {
							"type": "integer",
							"default": 1
						}
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"column_labels": {
					"title": "Text3ColumnLabels",
					"type": "object",
					"required": ["roll", "text", "text2", "text3"],
					"properties": {
						"roll": {
							"$ref": "#/definitions/Label"
						},
						"text": {
							"$ref": "#/definitions/Label"
						},
						"text2": {
							"$ref": "#/definitions/Label"
						},
						"text3": {
							"$ref": "#/definitions/Label"
						}
					}
				},
				"rows": {
					"type": "array",
					"description": "An array of objects, each representing a single row of the table.",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/OracleRollableRowText3"
					}
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"PageNumber": {
			"title": "PageNumber",
			"type": "integer",
			"description": "Represents a page number in a book.",
			"minimum": 1
		},
		"PartOfSpeech": {
			"title": "PartOfSpeech",
			"description": "  - `common_noun`: A common noun.\n  - `proper_noun`: A proper noun.\n  - `adjunct_common_noun`: A common noun used as an adjective, to modify another noun.\n  - `adjunct_proper_noun`: A proper noun used as an adjective, to modify another noun.\n  - `verb`: A verb in present tense\n  - `gerund`: Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\". Can function as a noun, an adjective, or a progressive verb.\n  - `adjective`: An adjective.\n  - `attributive_verb`: A verb used as an adjective, to modify a noun.\n  - `adjective_as_proper_noun`: An adjective used as a proper noun.\n  - `common_noun_as_proper_noun`: An common noun used as a proper noun.",
			"releaseStage": "experimental",
			"enum": [
				"common_noun",
				"proper_noun",
				"adjunct_common_noun",
				"adjunct_proper_noun",
				"verb",
				"gerund",
				"adjective",
				"attributive_verb",
				"adjective_as_proper_noun",
				"common_noun_as_proper_noun"
			]
		},
		"ProgressRollMethod": {
			"title": "ProgressRollMethod",
			"description": "  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `progress_roll`: Make a progress roll on a progress track associated with this move.",
			"enum": ["miss", "weak_hit", "strong_hit", "progress_roll"]
		},
		"ProgressRollOption": {
			"title": "ProgressRollOption",
			"type": "object",
			"required": ["using"],
			"properties": {
				"using": {
					"type": "string",
					"const": "progress_track"
				}
			}
		},
		"ProgressTrackTypeInfo": {
			"title": "ProgressTrackTypeInfo",
			"type": "object",
			"description": "Describes the features of a type of progress track.",
			"required": ["category"],
			"properties": {
				"category": {
					"$ref": "#/definitions/Label",
					"description": "A category label for progress tracks of this type.",
					"examples": [
						"Vow",
						"Journey",
						"Combat",
						"Scene Challenge",
						"Expedition",
						"Connection",
						"Delve"
					]
				},
				"controls": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"type": "object",
							"properties": {}
						}
					}
				}
			}
		},
		"Rarity": {
			"title": "Rarity",
			"type": "object",
			"description": "A rarity, as described in Ironsworn: Delve.",
			"required": ["_id", "type", "name", "xp_cost", "asset", "_source"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/RarityId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "rarity"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"xp_cost": {
					"type": "integer",
					"description": "From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.",
					"default": 3,
					"minimum": 3,
					"maximum": 5
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/RarityIdWildcard"
					}
				},
				"asset": {
					"$ref": "#/definitions/AssetId",
					"description": "The asset augmented by this rarity."
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				}
			}
		},
		"RarityId": {
			"title": "RarityId",
			"type": "string",
			"description": "A unique ID representing a Rarity object.",
			"pattern": "^rarity:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
		},
		"RarityIdWildcard": {
			"title": "RarityIdWildcard",
			"type": "string",
			"description": "A wildcarded RarityId that can be used to match multiple Rarity objects.",
			"pattern": "^rarity:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
		},
		"RollableValue": {
			"title": "RollableValue",
			"type": "object",
			"description": "Provides a value like a stat, condition meter, or other number (usually for use in an action roll). The expected value is an integer, or null.",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `using` property as a discriminator.",
			"required": ["using"],
			"properties": {
				"using": {
					"enum": [
						"stat",
						"condition_meter",
						"asset_control",
						"asset_option",
						"attached_asset_control",
						"attached_asset_option",
						"custom"
					]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "stat"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/StatValueRef"
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "condition_meter"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/ConditionMeterValueRef"
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "asset_control"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetControlValueRef"
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "asset_option"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AssetOptionValueRef"
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "attached_asset_control"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AttachedAssetControlValueRef"
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "attached_asset_option"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/AttachedAssetOptionValueRef"
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "custom"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/CustomValue"
					}
				}
			]
		},
		"Rules": {
			"title": "Rules",
			"type": "object",
			"description": "Describes rules for player characters in this ruleset, such as stats and condition meters.",
			"releaseStage": "experimental",
			"required": [
				"condition_meters",
				"stats",
				"impacts",
				"special_tracks",
				"tags"
			],
			"properties": {
				"condition_meters": {
					"type": "object",
					"description": "Describes the standard condition meters used by player characters in this ruleset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/ConditionMeterRule"
						}
					}
				},
				"stats": {
					"type": "object",
					"description": "Describes the standard stats used by player characters in this ruleset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/StatRule"
						}
					}
				},
				"impacts": {
					"type": "object",
					"description": "Describes the standard impacts/debilities used by player characters in this ruleset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/ImpactCategory"
						}
					}
				},
				"special_tracks": {
					"type": "object",
					"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/SpecialTrackRule"
						}
					}
				},
				"tags": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"releaseStage": "experimental",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/TagRule"
						}
					}
				}
			}
		},
		"Ruleset": {
			"title": "Ruleset",
			"type": "object",
			"description": "A standalone Datasworn package that describes its own ruleset.",
			"required": [
				"_id",
				"datasworn_version",
				"type",
				"title",
				"authors",
				"date",
				"license",
				"url",
				"rules",
				"oracles",
				"assets",
				"moves"
			],
			"properties": {
				"_id": {
					"$ref": "#/definitions/RulesetId"
				},
				"datasworn_version": {
					"type": "string",
					"description": "The version of the Datasworn format used by this data.",
					"const": "0.1.0",
					"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
				},
				"type": {
					"type": "string",
					"const": "ruleset"
				},
				"title": {
					"$ref": "#/definitions/Label",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"authors": {
					"type": "array",
					"description": "Lists authors credited by the source material.",
					"items": {
						"$ref": "#/definitions/AuthorInfo"
					},
					"minItems": 1
				},
				"date": {
					"type": "string",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"remarks": "You may prefer to deserialize this as a Date object.",
					"format": "date",
					"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"
				},
				"license": {
					"description": "An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [
						{
							"$ref": "#/definitions/WebUrl"
						},
						{
							"type": "null"
						}
					]
				},
				"url": {
					"$ref": "#/definitions/WebUrl",
					"description": "A URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				},
				"rules": {
					"$ref": "#/definitions/Rules"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"oracles": {
					"type": "object",
					"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/OracleTablesCollection"
						}
					}
				},
				"assets": {
					"type": "object",
					"description": "A dictionary object containing asset collections, which contain assets.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AssetCollection"
						}
					}
				},
				"atlas": {
					"type": "object",
					"description": "A dictionary object containing atlas collections, which contain atlas entries.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/AtlasCollection"
						}
					}
				},
				"moves": {
					"type": "object",
					"description": "A dictionary object containing move categories, which contain moves.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/MoveCategory"
						}
					}
				},
				"npcs": {
					"type": "object",
					"description": "A dictionary object containing NPC collections, which contain NPCs.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/NpcCollection"
						}
					}
				},
				"rarities": {
					"type": "object",
					"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Rarity"
						}
					}
				},
				"delve_sites": {
					"type": "object",
					"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/DelveSite"
						}
					}
				},
				"site_domains": {
					"type": "object",
					"description": "A dictionary object containing delve site domains.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/DelveSiteDomain"
						}
					}
				},
				"site_themes": {
					"type": "object",
					"description": "A dictionary object containing delve site themes.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/DelveSiteTheme"
						}
					}
				},
				"truths": {
					"type": "object",
					"description": "A dictionary object of truth categories.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Truth"
						}
					}
				}
			},
			"additionalProperties": {}
		},
		"RulesetId": {
			"title": "RulesetId",
			"type": "string",
			"description": "The ID of standalone Datasworn package that describes its own ruleset.",
			"examples": ["classic", "starforged"],
			"pattern": "^[a-z][a-z0-9_]*$"
		},
		"RulesExpansion": {
			"title": "RulesExpansion",
			"type": "object",
			"description": "Describes rules for player characters in this ruleset, such as stats and condition meters.",
			"releaseStage": "experimental",
			"properties": {
				"condition_meters": {
					"type": "object",
					"description": "Describes the standard condition meters used by player characters in this ruleset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/ConditionMeterRule"
						}
					}
				},
				"stats": {
					"type": "object",
					"description": "Describes the standard stats used by player characters in this ruleset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/StatRule"
						}
					}
				},
				"impacts": {
					"type": "object",
					"description": "Describes the standard impacts/debilities used by player characters in this ruleset.",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/ImpactCategory"
						}
					}
				},
				"special_tracks": {
					"type": "object",
					"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/SpecialTrackRule"
						}
					}
				},
				"tags": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"releaseStage": "experimental",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/TagRule"
						}
					}
				}
			}
		},
		"RulesPackage": {
			"title": "RulesPackage",
			"type": "object",
			"description": "Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `type` property as a discriminator.",
			"required": ["type"],
			"properties": {
				"type": {
					"enum": ["ruleset", "expansion"]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"type": {
								"type": "string",
								"const": "ruleset"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/Ruleset"
					}
				},
				{
					"if": {
						"properties": {
							"type": {
								"type": "string",
								"const": "expansion"
							}
						}
					},
					"then": {
						"$ref": "#/definitions/Expansion"
					}
				}
			]
		},
		"RulesPackageId": {
			"title": "RulesPackageId",
			"anyOf": [
				{
					"$ref": "#/definitions/RulesetId"
				},
				{
					"$ref": "#/definitions/ExpansionId"
				}
			]
		},
		"SelectEnhancementField": {
			"title": "SelectEnhancementField",
			"type": "object",
			"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles).",
			"remarks": "Semantics are similar to the HTML `<select>` element",
			"required": ["label", "field_type", "choices", "value"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "select_enhancement"
				},
				"choices": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"type": "object",
							"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `choice_type` property as a discriminator.",
							"required": ["choice_type"],
							"properties": {
								"choice_type": {
									"enum": ["choice", "choice_group"]
								}
							},
							"additionalProperties": {},
							"allOf": [
								{
									"if": {
										"properties": {
											"choice_type": {
												"type": "string",
												"const": "choice"
											}
										}
									},
									"then": {
										"$ref": "#/definitions/SelectEnhancementFieldChoice"
									}
								},
								{
									"if": {
										"properties": {
											"choice_type": {
												"type": "string",
												"const": "choice_group"
											}
										}
									},
									"then": {
										"$ref": "#/definitions/SelectEnhancementFieldChoiceGroup"
									}
								}
							]
						}
					}
				},
				"value": {
					"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DictKey"
						},
						{
							"type": "null"
						}
					]
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				}
			}
		},
		"SelectEnhancementFieldChoice": {
			"title": "SelectEnhancementFieldChoice",
			"type": "object",
			"description": "Represents an option in a list of choices.",
			"remarks": "Semantics are similar to the HTML `<option>` element.",
			"required": ["label", "choice_type"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"choice_type": {
					"type": "string",
					"const": "choice"
				},
				"enhance_asset": {
					"$ref": "#/definitions/AssetEnhancement"
				},
				"enhance_moves": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/MoveEnhancement"
					}
				}
			}
		},
		"SelectEnhancementFieldChoiceGroup": {
			"type": "object",
			"description": "Represents a grouping of options in a list of choices.",
			"remarks": "Semantics are similar to the HTML `<optgroup>` element.",
			"required": ["name", "choice_type", "choices"],
			"properties": {
				"name": {
					"$ref": "#/definitions/Label",
					"description": "A label for this option group."
				},
				"choice_type": {
					"type": "string",
					"const": "choice_group"
				},
				"choices": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/SelectEnhancementFieldChoice"
						}
					}
				}
			}
		},
		"SelectValueField": {
			"title": "SelectValueField",
			"type": "object",
			"description": "Represents a list of mutually exclusive choices.",
			"remarks": "Semantics are similar to the HTML `<select>` element",
			"required": ["label", "field_type", "choices", "value"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "select_value"
				},
				"choices": {
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/SelectValueFieldChoice"
						}
					}
				},
				"value": {
					"description": "The key of the currently selected choice from the `choices` property, or `null` if none is selected.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/DictKey"
						},
						{
							"type": "null"
						}
					]
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				}
			}
		},
		"SelectValueFieldChoice": {
			"title": "SelectValueFieldChoice",
			"type": "object",
			"remarks": "Deserialize as a discriminated union/polymorphic object type, using the `using` property as a discriminator.",
			"required": ["using"],
			"properties": {
				"using": {
					"enum": [
						"stat",
						"condition_meter",
						"asset_control",
						"asset_option",
						"attached_asset_control",
						"attached_asset_option",
						"custom"
					]
				}
			},
			"additionalProperties": {},
			"allOf": [
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "stat"
							}
						}
					},
					"then": {
						"type": "object",
						"description": "Represents an option in a list of choices.",
						"remarks": "Semantics are similar to the HTML `<option>` element.",
						"required": ["label", "choice_type", "using", "stat"],
						"properties": {
							"label": {
								"$ref": "#/definitions/Label"
							},
							"choice_type": {
								"type": "string",
								"const": "choice"
							},
							"using": {
								"type": "string",
								"description": "A reference to the value of a standard player character stat.",
								"const": "stat"
							},
							"stat": {
								"$ref": "#/definitions/StatKey"
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "condition_meter"
							}
						}
					},
					"then": {
						"type": "object",
						"description": "Represents an option in a list of choices.",
						"remarks": "Semantics are similar to the HTML `<option>` element.",
						"required": ["label", "choice_type", "using", "condition_meter"],
						"properties": {
							"label": {
								"$ref": "#/definitions/Label"
							},
							"choice_type": {
								"type": "string",
								"const": "choice"
							},
							"using": {
								"type": "string",
								"description": "A reference to the value of a standard player condition meter.",
								"const": "condition_meter"
							},
							"condition_meter": {
								"$ref": "#/definitions/ConditionMeterKey"
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "asset_control"
							}
						}
					},
					"then": {
						"type": "object",
						"description": "Represents an option in a list of choices.",
						"remarks": "Semantics are similar to the HTML `<option>` element.",
						"required": ["label", "choice_type", "using", "control", "assets"],
						"properties": {
							"label": {
								"$ref": "#/definitions/Label"
							},
							"choice_type": {
								"type": "string",
								"const": "choice"
							},
							"using": {
								"type": "string",
								"description": "A reference to the value of an asset control.",
								"const": "asset_control"
							},
							"control": {
								"$ref": "#/definitions/DictKey",
								"description": "The dictionary key of the asset control field.",
								"examples": ["health", "integrity"]
							},
							"assets": {
								"description": "Asset IDs (which may be wildcarded) that may provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.",
								"default": null,
								"anyOf": [
									{
										"type": "array",
										"default": null,
										"items": {
											"$ref": "#/definitions/AssetIdWildcard"
										}
									},
									{
										"type": "null"
									}
								]
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "asset_option"
							}
						}
					},
					"then": {
						"type": "object",
						"description": "Represents an option in a list of choices.",
						"remarks": "Semantics are similar to the HTML `<option>` element.",
						"required": ["label", "choice_type", "using", "option", "assets"],
						"properties": {
							"label": {
								"$ref": "#/definitions/Label"
							},
							"choice_type": {
								"type": "string",
								"const": "choice"
							},
							"using": {
								"type": "string",
								"description": "A reference to the value of an asset option.",
								"const": "asset_option"
							},
							"option": {
								"$ref": "#/definitions/DictKey",
								"description": "The dictionary key of the asset option field."
							},
							"assets": {
								"description": "Asset IDs (which may be wildcarded) that may provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.",
								"default": null,
								"anyOf": [
									{
										"type": "array",
										"items": {
											"$ref": "#/definitions/AssetIdWildcard"
										}
									},
									{
										"type": "null"
									}
								]
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "attached_asset_control"
							}
						}
					},
					"then": {
						"type": "object",
						"description": "Represents an option in a list of choices.",
						"remarks": "Semantics are similar to the HTML `<option>` element.",
						"required": ["label", "choice_type", "using", "control"],
						"properties": {
							"label": {
								"$ref": "#/definitions/Label"
							},
							"choice_type": {
								"type": "string",
								"const": "choice"
							},
							"using": {
								"type": "string",
								"description": "A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.",
								"const": "attached_asset_control"
							},
							"control": {
								"$ref": "#/definitions/DictKey",
								"description": "The dictionary key of the asset control field.",
								"examples": ["health", "integrity"]
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "attached_asset_option"
							}
						}
					},
					"then": {
						"type": "object",
						"description": "Represents an option in a list of choices.",
						"remarks": "Semantics are similar to the HTML `<option>` element.",
						"required": ["label", "choice_type", "using", "option"],
						"properties": {
							"label": {
								"$ref": "#/definitions/Label"
							},
							"choice_type": {
								"type": "string",
								"const": "choice"
							},
							"using": {
								"type": "string",
								"description": "A reference to the value of an attached asset option.",
								"const": "attached_asset_option"
							},
							"option": {
								"$ref": "#/definitions/DictKey",
								"description": "The dictionary key of the asset option field."
							}
						}
					}
				},
				{
					"if": {
						"properties": {
							"using": {
								"type": "string",
								"const": "custom"
							}
						}
					},
					"then": {
						"type": "object",
						"description": "Represents an option in a list of choices.",
						"remarks": "Semantics are similar to the HTML `<option>` element.",
						"required": ["label", "choice_type", "using", "value"],
						"properties": {
							"label": {
								"$ref": "#/definitions/Label"
							},
							"choice_type": {
								"type": "string",
								"const": "choice"
							},
							"using": {
								"type": "string",
								"description": "An arbitrary static integer value with a label.",
								"const": "custom"
							},
							"value": {
								"type": "integer"
							}
						}
					}
				}
			]
		},
		"SemanticVersion": {
			"title": "SemanticVersion",
			"type": "string",
			"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
		},
		"SourceInfo": {
			"title": "SourceInfo",
			"type": "object",
			"description": "Metadata describing the original source of this node",
			"required": ["title", "authors", "date", "license", "url"],
			"properties": {
				"title": {
					"$ref": "#/definitions/Label",
					"description": "The title of the source document.",
					"examples": [
						"Ironsworn Rulebook",
						"Ironsworn Assets Master Set",
						"Ironsworn: Delve",
						"Ironsworn: Starforged Rulebook",
						"Ironsworn: Starforged Assets",
						"Sundered Isles"
					]
				},
				"authors": {
					"type": "array",
					"description": "Lists authors credited by the source material.",
					"items": {
						"$ref": "#/definitions/AuthorInfo"
					},
					"minItems": 1
				},
				"date": {
					"type": "string",
					"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
					"remarks": "You may prefer to deserialize this as a Date object.",
					"format": "date",
					"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"
				},
				"license": {
					"description": "An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.",
					"examples": [
						"https://creativecommons.org/licenses/by/4.0",
						"https://creativecommons.org/licenses/by-nc-sa/4.0"
					],
					"anyOf": [
						{
							"$ref": "#/definitions/WebUrl"
						},
						{
							"type": "null"
						}
					]
				},
				"page": {
					"$ref": "#/definitions/PageNumber",
					"description": "The page number where this content is described in full."
				},
				"url": {
					"$ref": "#/definitions/WebUrl",
					"description": "A URL where the source document is available.",
					"examples": ["https://ironswornrpg.com"]
				}
			}
		},
		"SpecialTrackRollMethod": {
			"title": "SpecialTrackRollMethod",
			"description": "  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `player_choice`: The player chooses which roll option to use.\n  - `highest`: Use the roll option with the best/highest value.\n  - `lowest`: Use the roll option with the worst/lowest value.\n  - `all`: Use _every_ roll option at once.",
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			]
		},
		"SpecialTrackRule": {
			"title": "SpecialTrackRule",
			"type": "object",
			"description": "Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).",
			"required": ["label", "optional", "shared", "description"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label",
					"description": "A label for this special track."
				},
				"optional": {
					"type": "boolean",
					"description": "Is this track an optional rule?",
					"default": false
				},
				"shared": {
					"type": "boolean",
					"description": "Is this track shared by all players?",
					"default": false
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A description of this special track."
				}
			}
		},
		"SpecialTrackType": {
			"$ref": "#/definitions/DictKey",
			"title": "SpecialTrackType",
			"description": "Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.\n'Canonical' examples:\n  * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\n",
			"examples": [
				"bonds_track",
				"failure_track",
				"quests_legacy",
				"bonds_legacy",
				"discoveries_legacy"
			]
		},
		"StatKey": {
			"$ref": "#/definitions/DictKey",
			"title": "StatKey",
			"description": "A basic player character stat.",
			"examples": ["edge", "heart", "iron", "shadow", "wits"]
		},
		"StatRule": {
			"title": "StatRule",
			"type": "object",
			"description": "Describes a standard player character stat.",
			"required": ["label", "description"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label",
					"description": "A label for this stat.",
					"examples": ["edge"]
				},
				"description": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A description of this stat.",
					"examples": [
						"Quickness, agility, and prowess when fighting at a distance."
					]
				}
			}
		},
		"StatValueRef": {
			"title": "StatValueRef",
			"type": "object",
			"description": "A reference to the value of a standard player character stat.",
			"required": ["using", "stat"],
			"properties": {
				"using": {
					"type": "string",
					"description": "A reference to the value of a standard player character stat.",
					"const": "stat"
				},
				"stat": {
					"$ref": "#/definitions/StatKey"
				}
			}
		},
		"Suggestions": {
			"title": "Suggestions",
			"type": "array",
			"releaseStage": "experimental",
			"items": {
				"$ref": "#/definitions/AnyIdWildcard"
			}
		},
		"SvgImageUrl": {
			"title": "SvgImageUrl",
			"type": "string",
			"description": "A relative (local) URL pointing to a vector image in the SVG format.",
			"format": "uri-reference",
			"pattern": "\\.svg$"
		},
		"Tag": {
			"title": "Tag",
			"anyOf": [
				{
					"type": "boolean"
				},
				{
					"type": "integer"
				},
				{
					"$ref": "#/definitions/DictKey"
				},
				{
					"$ref": "#/definitions/DiceExpression"
				},
				{
					"$ref": "#/definitions/AtlasEntryId"
				},
				{
					"$ref": "#/definitions/NpcId"
				},
				{
					"$ref": "#/definitions/OracleRollableId"
				},
				{
					"$ref": "#/definitions/AssetId"
				},
				{
					"$ref": "#/definitions/MoveId"
				},
				{
					"$ref": "#/definitions/AtlasCollectionId"
				},
				{
					"$ref": "#/definitions/NpcCollectionId"
				},
				{
					"$ref": "#/definitions/OracleCollectionId"
				},
				{
					"$ref": "#/definitions/AssetCollectionId"
				},
				{
					"$ref": "#/definitions/MoveCategoryId"
				},
				{
					"$ref": "#/definitions/DelveSiteId"
				},
				{
					"$ref": "#/definitions/DelveSiteDomainId"
				},
				{
					"$ref": "#/definitions/DelveSiteThemeId"
				},
				{
					"$ref": "#/definitions/RarityId"
				},
				{
					"$ref": "#/definitions/TruthId"
				},
				{
					"type": "array",
					"items": {
						"anyOf": [
							{
								"$ref": "#/definitions/AtlasEntryIdWildcard"
							},
							{
								"$ref": "#/definitions/NpcIdWildcard"
							},
							{
								"$ref": "#/definitions/OracleRollableIdWildcard"
							},
							{
								"$ref": "#/definitions/AssetIdWildcard"
							},
							{
								"$ref": "#/definitions/MoveIdWildcard"
							},
							{
								"$ref": "#/definitions/AtlasCollectionIdWildcard"
							},
							{
								"$ref": "#/definitions/NpcCollectionIdWildcard"
							},
							{
								"$ref": "#/definitions/OracleCollectionIdWildcard"
							},
							{
								"$ref": "#/definitions/AssetCollectionIdWildcard"
							},
							{
								"$ref": "#/definitions/MoveCategoryIdWildcard"
							},
							{
								"$ref": "#/definitions/DelveSiteIdWildcard"
							},
							{
								"$ref": "#/definitions/DelveSiteDomainIdWildcard"
							},
							{
								"$ref": "#/definitions/DelveSiteThemeIdWildcard"
							},
							{
								"$ref": "#/definitions/RarityIdWildcard"
							},
							{
								"$ref": "#/definitions/TruthIdWildcard"
							}
						]
					}
				}
			]
		},
		"TaggableNodeType": {
			"title": "TaggableNodeType",
			"anyOf": [
				{
					"$ref": "#/definitions/CollectableType"
				},
				{
					"$ref": "#/definitions/NonCollectableType"
				},
				{
					"$ref": "#/definitions/CollectionType"
				},
				{
					"$ref": "#/definitions/EmbedOnlyType"
				}
			]
		},
		"TagRule": {
			"title": "TagRule",
			"type": "object",
			"required": ["$schema", "node_types"],
			"properties": {
				"$schema": {
					"$ref": "#/definitions/TagSchema",
					"description": "The JSON schema for this tag value."
				},
				"node_types": {
					"description": "Types of object that can receive this tag, or `null` if any type of object accepts it.",
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/TaggableNodeType"
							}
						},
						{
							"type": "null"
						}
					]
				}
			}
		},
		"Tags": {
			"title": "Tags",
			"type": "object",
			"description": "A dictionary of tags, keyed by the RulesPackageId that the tags are from.",
			"releaseStage": "experimental",
			"properties": {
				"_core": {
					"$ref": "#/definitions/CoreTags"
				}
			},
			"patternProperties": {
				"^[a-z][a-z0-9_]*$": {
					"title": "RulesPackageTags",
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/Tag"
						}
					}
				}
			},
			"key": "^[a-z][a-z0-9_]*$"
		},
		"TagSchema": {
			"title": "TagSchema",
			"description": "JSON schema used to validate the tag data, with a mandatory description. Only a subset of all possible JSON schema are allowed, including references to some Datasworn types.",
			"releaseStage": "experimental",
			"examples": [
				{
					"description": "An example tag with a simple true/false value.",
					"type": "boolean"
				},
				{
					"description": "An example tag with an array of oracle rollable ID wildcards.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OracleRollableIdWildcard"
					}
				}
			],
			"allOf": [
				{
					"anyOf": [
						{
							"type": "object",
							"required": ["$ref"],
							"properties": {
								"$ref": {
									"enum": [
										"#/definitions/ActionRollMethod",
										"#/definitions/AnyId",
										"#/definitions/AnyIdWildcard",
										"#/definitions/AnyMoveId",
										"#/definitions/AnyMoveIdWildcard",
										"#/definitions/AnyOracleRollableId",
										"#/definitions/AnyOracleRollableIdWildcard",
										"#/definitions/AnyOracleRollableRowId",
										"#/definitions/AnyOracleRollableRowIdWildcard",
										"#/definitions/AssetAbilityId",
										"#/definitions/AssetAbilityIdWildcard",
										"#/definitions/AssetAbilityMoveId",
										"#/definitions/AssetAbilityMoveIdWildcard",
										"#/definitions/AssetAbilityOracleRollableId",
										"#/definitions/AssetAbilityOracleRollableIdWildcard",
										"#/definitions/AssetAbilityOracleRollableRowId",
										"#/definitions/AssetAbilityOracleRollableRowIdWildcard",
										"#/definitions/AssetCollectionId",
										"#/definitions/AssetCollectionIdWildcard",
										"#/definitions/AssetId",
										"#/definitions/AssetIdWildcard",
										"#/definitions/AtlasCollectionId",
										"#/definitions/AtlasCollectionIdWildcard",
										"#/definitions/AtlasEntryId",
										"#/definitions/AtlasEntryIdWildcard",
										"#/definitions/ChallengeRank",
										"#/definitions/CollectableType",
										"#/definitions/CollectionType",
										"#/definitions/CssColor",
										"#/definitions/DelveSiteDenizenFrequency",
										"#/definitions/DelveSiteDenizenId",
										"#/definitions/DelveSiteDenizenIdWildcard",
										"#/definitions/DelveSiteDomainDangerId",
										"#/definitions/DelveSiteDomainDangerIdWildcard",
										"#/definitions/DelveSiteDomainFeatureId",
										"#/definitions/DelveSiteDomainFeatureIdWildcard",
										"#/definitions/DelveSiteDomainId",
										"#/definitions/DelveSiteDomainIdWildcard",
										"#/definitions/DelveSiteId",
										"#/definitions/DelveSiteIdWildcard",
										"#/definitions/DelveSiteThemeDangerId",
										"#/definitions/DelveSiteThemeDangerIdWildcard",
										"#/definitions/DelveSiteThemeFeatureId",
										"#/definitions/DelveSiteThemeFeatureIdWildcard",
										"#/definitions/DelveSiteThemeId",
										"#/definitions/DelveSiteThemeIdWildcard",
										"#/definitions/DiceExpression",
										"#/definitions/DictKey",
										"#/definitions/Documentation",
										"#/definitions/Email",
										"#/definitions/EmbeddedMoveId",
										"#/definitions/EmbeddedMoveIdWildcard",
										"#/definitions/EmbeddedOracleRollableId",
										"#/definitions/EmbeddedOracleRollableIdWildcard",
										"#/definitions/EmbedOnlyType",
										"#/definitions/ExpansionId",
										"#/definitions/Label",
										"#/definitions/MarkdownString",
										"#/definitions/MarkdownTemplateString",
										"#/definitions/MoveCategoryId",
										"#/definitions/MoveCategoryIdWildcard",
										"#/definitions/MoveId",
										"#/definitions/MoveIdWildcard",
										"#/definitions/MoveOracleRollableId",
										"#/definitions/MoveOracleRollableIdWildcard",
										"#/definitions/MoveOracleRollableRowId",
										"#/definitions/MoveOracleRollableRowIdWildcard",
										"#/definitions/MoveRollType",
										"#/definitions/NonCollectableType",
										"#/definitions/NpcCollectionId",
										"#/definitions/NpcCollectionIdWildcard",
										"#/definitions/NpcId",
										"#/definitions/NpcIdWildcard",
										"#/definitions/NpcVariantId",
										"#/definitions/NpcVariantIdWildcard",
										"#/definitions/OracleCollectionId",
										"#/definitions/OracleCollectionIdWildcard",
										"#/definitions/OracleDuplicateBehavior",
										"#/definitions/OracleRollableId",
										"#/definitions/OracleRollableIdWildcard",
										"#/definitions/OracleRollableRowId",
										"#/definitions/OracleRollableRowIdWildcard",
										"#/definitions/PageNumber",
										"#/definitions/PartOfSpeech",
										"#/definitions/ProgressRollMethod",
										"#/definitions/RarityId",
										"#/definitions/RarityIdWildcard",
										"#/definitions/RulesetId",
										"#/definitions/RulesPackageId",
										"#/definitions/SemanticVersion",
										"#/definitions/SpecialTrackRollMethod",
										"#/definitions/SvgImageUrl",
										"#/definitions/TruthId",
										"#/definitions/TruthIdWildcard",
										"#/definitions/TruthOptionId",
										"#/definitions/TruthOptionIdWildcard",
										"#/definitions/TruthOptionOracleRollableId",
										"#/definitions/TruthOptionOracleRollableIdWildcard",
										"#/definitions/TruthOptionOracleRollableRowId",
										"#/definitions/TruthOptionOracleRollableRowIdWildcard",
										"#/definitions/WebpImageUrl",
										"#/definitions/WebUrl"
									]
								}
							}
						},
						{
							"title": "TagSchemaStringEnum",
							"type": "object",
							"required": ["enum"],
							"properties": {
								"enum": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/DictKey"
									}
								}
							},
							"additionalProperties": {}
						},
						{
							"title": "TagSchemaIntegerEnum",
							"type": "object",
							"required": ["enum"],
							"properties": {
								"enum": {
									"type": "array",
									"items": {
										"type": "integer"
									}
								}
							},
							"additionalProperties": {}
						},
						{
							"title": "TagSchemaBoolean",
							"type": "object",
							"description": "Schema for a true or false value.",
							"required": ["type"],
							"properties": {
								"type": {
									"type": "string",
									"const": "boolean"
								}
							},
							"additionalProperties": {}
						},
						{
							"title": "TagSchemaInteger",
							"type": "object",
							"required": ["type"],
							"properties": {
								"type": {
									"type": "string",
									"const": "integer"
								}
							},
							"additionalProperties": {}
						},
						{
							"title": "TagSchemaFloat",
							"type": "object",
							"required": ["type"],
							"properties": {
								"type": {
									"type": "string",
									"const": "number"
								}
							},
							"additionalProperties": {}
						},
						{
							"title": "TagSchemaObject",
							"type": "object",
							"required": ["type", "properties"],
							"properties": {
								"type": {
									"type": "string",
									"const": "object"
								},
								"properties": {
									"type": "object",
									"patternProperties": {
										"^[a-z][a-z0-9_]*$": {
											"$ref": "#/definitions/TagSchema"
										}
									}
								}
							},
							"additionalProperties": {}
						},
						{
							"title": "TagSchemaArray",
							"type": "object",
							"required": ["type", "items"],
							"properties": {
								"type": {
									"type": "string",
									"const": "array"
								},
								"items": {
									"$ref": "#/definitions/TagSchema"
								}
							},
							"additionalProperties": {}
						}
					]
				},
				{
					"$ref": "http://json-schema.org/draft-07/schema#"
				}
			]
		},
		"TextField": {
			"title": "TextField",
			"type": "object",
			"description": "Represents an input that accepts plain text.",
			"remarks": "Semantics are similar to the HTML `<input type=\"text\">` element.",
			"required": ["label", "field_type", "value"],
			"properties": {
				"label": {
					"$ref": "#/definitions/Label"
				},
				"field_type": {
					"type": "string",
					"const": "text"
				},
				"value": {
					"description": "The content of this text input, or `null` if it's empty",
					"default": null,
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					]
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An icon associated with this input."
				}
			}
		},
		"TriggerActionRoll": {
			"title": "TriggerActionRoll",
			"type": "object",
			"description": "Describes trigger conditions for a move that makes an action roll.",
			"required": ["conditions", "text"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Specific conditions that qualify for this trigger.",
					"items": {
						"$ref": "#/definitions/TriggerActionRollCondition"
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"type": "string",
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
				}
			}
		},
		"TriggerActionRollCondition": {
			"title": "TriggerActionRollCondition",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"$ref": "#/definitions/ActionRollMethod"
				},
				"roll_options": {
					"type": "array",
					"description": "The options available when rolling with this trigger condition.",
					"items": {
						"$ref": "#/definitions/RollableValue"
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				}
			}
		},
		"TriggerActionRollConditionEnhancement": {
			"title": "TriggerActionRollConditionEnhancement",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"description": "A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/ActionRollMethod"
						},
						{
							"type": "null"
						}
					]
				},
				"roll_options": {
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"description": "The options available when rolling with this trigger condition.",
							"items": {
								"$ref": "#/definitions/RollableValue"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				}
			}
		},
		"TriggerActionRollEnhancement": {
			"title": "TriggerActionRollEnhancement",
			"type": "object",
			"description": "Describes changes/additions made to the enhanced move's trigger conditions.",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Trigger conditions added to the enhanced move.",
					"items": {
						"$ref": "#/definitions/TriggerActionRollConditionEnhancement"
					}
				}
			}
		},
		"TriggerBy": {
			"title": "TriggerBy",
			"type": "object",
			"description": "Information on who can activate this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.",
			"required": ["ally", "player"],
			"properties": {
				"ally": {
					"type": "boolean",
					"description": "Can this trigger be activated by one of the player's allies?",
					"default": false
				},
				"player": {
					"type": "boolean",
					"description": "Can this trigger be activated by the player who owns this?",
					"default": true
				}
			}
		},
		"TriggerNoRoll": {
			"title": "TriggerNoRoll",
			"type": "object",
			"description": "Describes trigger conditions for a move that makes no rolls.",
			"required": ["conditions", "text"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Specific conditions that qualify for this trigger.",
					"default": [],
					"items": {
						"$ref": "#/definitions/TriggerNoRollCondition"
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"type": "string",
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
				}
			}
		},
		"TriggerNoRollCondition": {
			"title": "TriggerNoRollCondition",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"type": "null",
					"default": null
				},
				"roll_options": {
					"type": "null",
					"description": "The options available when rolling with this trigger condition.",
					"default": null
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				}
			}
		},
		"TriggerNoRollEnhancement": {
			"title": "TriggerNoRollEnhancement",
			"type": "object",
			"description": "Describes changes/additions made to the enhanced move's trigger conditions.",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Trigger conditions added to the enhanced move.",
					"items": {
						"$ref": "#/definitions/TriggerNoRollCondition"
					}
				}
			}
		},
		"TriggerProgressRoll": {
			"title": "TriggerProgressRoll",
			"type": "object",
			"required": ["conditions", "text"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Specific conditions that qualify for this trigger.",
					"items": {
						"$ref": "#/definitions/TriggerProgressRollCondition"
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"type": "string",
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
				}
			}
		},
		"TriggerProgressRollCondition": {
			"title": "TriggerProgressRollCondition",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"$ref": "#/definitions/ProgressRollMethod",
					"default": "progress_roll"
				},
				"roll_options": {
					"type": "array",
					"description": "The options available when rolling with this trigger condition.",
					"items": {
						"$ref": "#/definitions/ProgressRollOption"
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				}
			}
		},
		"TriggerProgressRollConditionEnhancement": {
			"title": "TriggerProgressRollConditionEnhancement",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"description": "A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/ProgressRollMethod",
							"default": "progress_roll"
						},
						{
							"type": "null"
						}
					]
				},
				"roll_options": {
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"description": "The options available when rolling with this trigger condition.",
							"items": {
								"$ref": "#/definitions/ProgressRollOption"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				}
			}
		},
		"TriggerProgressRollEnhancement": {
			"title": "TriggerProgressRollEnhancement",
			"type": "object",
			"description": "Describes changes/additions made to the enhanced move's trigger conditions.",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Trigger conditions added to the enhanced move.",
					"items": {
						"$ref": "#/definitions/TriggerProgressRollConditionEnhancement"
					}
				}
			}
		},
		"TriggerSpecialTrack": {
			"title": "TriggerSpecialTrack",
			"type": "object",
			"required": ["conditions", "text"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Specific conditions that qualify for this trigger.",
					"items": {
						"$ref": "#/definitions/TriggerSpecialTrackCondition"
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"type": "string",
					"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
				}
			}
		},
		"TriggerSpecialTrackCondition": {
			"title": "TriggerSpecialTrackCondition",
			"type": "object",
			"required": ["method", "roll_options"],
			"properties": {
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"$ref": "#/definitions/SpecialTrackRollMethod"
				},
				"roll_options": {
					"type": "array",
					"description": "The options available when rolling with this trigger condition.",
					"items": {
						"$ref": "#/definitions/TriggerSpecialTrackConditionOption"
					}
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				}
			}
		},
		"TriggerSpecialTrackConditionEnhancement": {
			"title": "TriggerSpecialTrackConditionEnhancement",
			"type": "object",
			"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged).",
			"required": ["method", "roll_options"],
			"properties": {
				"by": {
					"$ref": "#/definitions/TriggerBy"
				},
				"method": {
					"description": "A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.",
					"default": null,
					"anyOf": [
						{
							"$ref": "#/definitions/SpecialTrackRollMethod"
						},
						{
							"type": "null"
						}
					]
				},
				"roll_options": {
					"default": null,
					"anyOf": [
						{
							"type": "array",
							"description": "The options available when rolling with this trigger condition.",
							"items": {
								"$ref": "#/definitions/TriggerSpecialTrackConditionOption"
							}
						},
						{
							"type": "null"
						}
					]
				},
				"text": {
					"$ref": "#/definitions/MarkdownString",
					"description": "A markdown string of any trigger text specific to this trigger condition."
				}
			}
		},
		"TriggerSpecialTrackConditionOption": {
			"title": "TriggerSpecialTrackConditionOption",
			"type": "object",
			"required": ["using"],
			"properties": {
				"using": {
					"$ref": "#/definitions/SpecialTrackType"
				}
			}
		},
		"TriggerSpecialTrackEnhancement": {
			"title": "TriggerSpecialTrackEnhancement",
			"type": "object",
			"description": "Describes changes/additions made to the enhanced move's trigger conditions.",
			"required": ["conditions"],
			"properties": {
				"conditions": {
					"type": "array",
					"description": "Trigger conditions added to the enhanced move.",
					"items": {
						"$ref": "#/definitions/TriggerSpecialTrackConditionEnhancement"
					}
				}
			}
		},
		"Truth": {
			"title": "Truth",
			"type": "object",
			"description": "A setting truth category.",
			"required": ["_id", "type", "name", "dice", "options", "_source"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/TruthId",
					"description": "The unique Datasworn ID for this node."
				},
				"type": {
					"type": "string",
					"const": "truth"
				},
				"name": {
					"$ref": "#/definitions/Label",
					"description": "The primary name/label for this node."
				},
				"canonical_name": {
					"$ref": "#/definitions/Label",
					"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
				},
				"replaces": {
					"type": "array",
					"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.",
					"items": {
						"$ref": "#/definitions/TruthIdWildcard"
					}
				},
				"color": {
					"$ref": "#/definitions/CssColor",
					"description": "A thematic color associated with this node."
				},
				"icon": {
					"$ref": "#/definitions/SvgImageUrl",
					"description": "An SVG icon associated with this collection."
				},
				"images": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/WebpImageUrl",
						"description": "Extra images associated with this node."
					}
				},
				"dice": {
					"$ref": "#/definitions/DiceExpression",
					"default": "1d100"
				},
				"options": {
					"type": "array",
					"rollable": true,
					"items": {
						"$ref": "#/definitions/TruthOption"
					}
				},
				"your_character": {
					"$ref": "#/definitions/MarkdownString"
				},
				"suggestions": {
					"$ref": "#/definitions/Suggestions"
				},
				"tags": {
					"$ref": "#/definitions/Tags"
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				},
				"_source": {
					"$ref": "#/definitions/SourceInfo",
					"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
				},
				"factions": {
					"type": "array",
					"description": "Prompts for factions related to this truth, like those presented in standard isles. This is presented as a single paragraph in the original text; Datasworn uses an array (one faction prompt per string) to represent them in order to make them more suitable for programmatic use.\n\nThis property is a placeholder and may see signficant changes in v0.2.0.",
					"releaseStage": "experimental",
					"items": {
						"$ref": "#/definitions/EntityPrompt"
					}
				}
			}
		},
		"TruthId": {
			"title": "TruthId",
			"type": "string",
			"description": "A unique ID representing a Truth object.",
			"pattern": "^truth:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
		},
		"TruthIdWildcard": {
			"title": "TruthIdWildcard",
			"type": "string",
			"description": "A wildcarded TruthId that can be used to match multiple Truth objects.",
			"pattern": "^truth:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
		},
		"TruthOption": {
			"title": "TruthOption",
			"type": "object",
			"required": ["_id", "roll", "description", "quest_starter"],
			"properties": {
				"_id": {
					"$ref": "#/definitions/TruthOptionId",
					"description": "The unique Datasworn ID for this node."
				},
				"roll": {
					"$ref": "#/definitions/DiceRange"
				},
				"summary": {
					"$ref": "#/definitions/MarkdownString"
				},
				"description": {
					"$ref": "#/definitions/MarkdownString"
				},
				"quest_starter": {
					"$ref": "#/definitions/MarkdownString"
				},
				"oracles": {
					"title": "TruthOptionOracles",
					"type": "object",
					"remarks": "Deserialize as a dictionary object.",
					"default": {},
					"patternProperties": {
						"^[a-z][a-z0-9_]*$": {
							"$ref": "#/definitions/EmbeddedOracleRollable",
							"title": "TruthOptionOracleRollable"
						}
					}
				},
				"_comment": {
					"$ref": "#/definitions/Documentation"
				}
			}
		},
		"TruthOptionId": {
			"title": "TruthOptionId",
			"type": "string",
			"description": "A unique ID representing a TruthOption object.",
			"pattern": "^truth\\.option:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
		},
		"TruthOptionIdWildcard": {
			"title": "TruthOptionIdWildcard",
			"type": "string",
			"description": "A wildcarded TruthOptionId that can be used to match multiple TruthOption objects.",
			"pattern": "^truth\\.option:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
		},
		"TruthOptionOracleRollableId": {
			"title": "TruthOptionOracleRollableId",
			"type": "string",
			"description": "A unique ID representing a TruthOptionOracleRollable object.",
			"pattern": "^truth\\.option\\.oracle_rollable:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"TruthOptionOracleRollableIdWildcard": {
			"title": "TruthOptionOracleRollableIdWildcard",
			"type": "string",
			"description": "A wildcarded TruthOptionOracleRollableId that can be used to match multiple TruthOptionOracleRollable objects.",
			"pattern": "^truth\\.option\\.oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)$"
		},
		"TruthOptionOracleRollableRowId": {
			"title": "TruthOptionOracleRollableRowId",
			"type": "string",
			"description": "A unique ID representing a TruthOptionOracleRollableRow object.",
			"pattern": "^truth\\.option\\.oracle_rollable\\.row:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+)$"
		},
		"TruthOptionOracleRollableRowIdWildcard": {
			"title": "TruthOptionOracleRollableRowIdWildcard",
			"type": "string",
			"description": "A wildcarded TruthOptionOracleRollableRowId that can be used to match multiple TruthOptionOracleRollableRow objects.",
			"pattern": "^truth\\.option\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+|\\*)$"
		},
		"WebpImageUrl": {
			"title": "WebpImageUrl",
			"type": "string",
			"description": "A relative (local) URL pointing to a raster image in the WEBP format.",
			"format": "uri-reference",
			"pattern": "\\.webp$"
		},
		"WebUrl": {
			"title": "WebUrl",
			"type": "string",
			"description": "An absolute URL pointing to a website.",
			"format": "uri"
		}
	}
}
