"use strict";
module.exports = validate20;
module.exports.default = validate20;
var schema22 = {"$schema":"http://json-schema.org/draft-07/schema#","$id":"https://ironswornrpg.com/datasworn.schema.json","$ref":"#/definitions/RulesPackage","title":"Datasworn v0.1.0","description":"Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.","definitions":{"ActionRollMethod":{"title":"ActionRollMethod","description":"  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `player_choice`: The player chooses which roll option to use.\n  - `highest`: Use the roll option with the best/highest value.\n  - `lowest`: Use the roll option with the worst/lowest value.\n  - `all`: Use _every_ roll option at once.","enum":["miss","weak_hit","strong_hit","player_choice","highest","lowest","all"]},"AnyId":{"title":"AnyId","description":"Represents any kind of non-wildcard ID, including IDs of embedded objects.","anyOf":[{"$ref":"#/definitions/AtlasEntryId"},{"$ref":"#/definitions/NpcId"},{"$ref":"#/definitions/NpcVariantId"},{"$ref":"#/definitions/OracleRollableId"},{"$ref":"#/definitions/AssetAbilityOracleRollableId"},{"$ref":"#/definitions/MoveOracleRollableId"},{"$ref":"#/definitions/TruthOptionOracleRollableId"},{"$ref":"#/definitions/OracleRollableRowId"},{"$ref":"#/definitions/AssetAbilityOracleRollableRowId"},{"$ref":"#/definitions/MoveOracleRollableRowId"},{"$ref":"#/definitions/TruthOptionOracleRollableRowId"},{"$ref":"#/definitions/AssetId"},{"$ref":"#/definitions/AssetAbilityId"},{"$ref":"#/definitions/AssetAbilityMoveId"},{"$ref":"#/definitions/MoveId"},{"$ref":"#/definitions/AtlasCollectionId"},{"$ref":"#/definitions/NpcCollectionId"},{"$ref":"#/definitions/OracleCollectionId"},{"$ref":"#/definitions/AssetCollectionId"},{"$ref":"#/definitions/MoveCategoryId"},{"$ref":"#/definitions/DelveSiteId"},{"$ref":"#/definitions/DelveSiteDenizenId"},{"$ref":"#/definitions/DelveSiteDomainId"},{"$ref":"#/definitions/DelveSiteDomainFeatureId"},{"$ref":"#/definitions/DelveSiteThemeFeatureId"},{"$ref":"#/definitions/DelveSiteDomainDangerId"},{"$ref":"#/definitions/DelveSiteThemeDangerId"},{"$ref":"#/definitions/DelveSiteThemeId"},{"$ref":"#/definitions/RarityId"},{"$ref":"#/definitions/TruthId"},{"$ref":"#/definitions/TruthOptionId"}]},"AnyIdWildcard":{"title":"AnyIdWildcard","description":"Represents any kind of wildcard ID, including IDs of embedded objects.","anyOf":[{"$ref":"#/definitions/AtlasEntryIdWildcard"},{"$ref":"#/definitions/NpcIdWildcard"},{"$ref":"#/definitions/NpcVariantIdWildcard"},{"$ref":"#/definitions/OracleRollableIdWildcard"},{"$ref":"#/definitions/AssetAbilityOracleRollableIdWildcard"},{"$ref":"#/definitions/MoveOracleRollableIdWildcard"},{"$ref":"#/definitions/TruthOptionOracleRollableIdWildcard"},{"$ref":"#/definitions/OracleRollableRowIdWildcard"},{"$ref":"#/definitions/AssetAbilityOracleRollableRowIdWildcard"},{"$ref":"#/definitions/MoveOracleRollableRowIdWildcard"},{"$ref":"#/definitions/TruthOptionOracleRollableRowIdWildcard"},{"$ref":"#/definitions/AssetIdWildcard"},{"$ref":"#/definitions/AssetAbilityIdWildcard"},{"$ref":"#/definitions/AssetAbilityMoveIdWildcard"},{"$ref":"#/definitions/MoveIdWildcard"},{"$ref":"#/definitions/AtlasCollectionIdWildcard"},{"$ref":"#/definitions/NpcCollectionIdWildcard"},{"$ref":"#/definitions/OracleCollectionIdWildcard"},{"$ref":"#/definitions/AssetCollectionIdWildcard"},{"$ref":"#/definitions/MoveCategoryIdWildcard"},{"$ref":"#/definitions/DelveSiteIdWildcard"},{"$ref":"#/definitions/DelveSiteDenizenIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainFeatureIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeFeatureIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainDangerIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeDangerIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeIdWildcard"},{"$ref":"#/definitions/RarityIdWildcard"},{"$ref":"#/definitions/TruthIdWildcard"},{"$ref":"#/definitions/TruthOptionIdWildcard"}]},"AnyMove":{"title":"AnyMove","anyOf":[{"$ref":"#/definitions/Move"},{"$ref":"#/definitions/EmbeddedMove"}]},"AnyMoveId":{"title":"AnyMoveId","anyOf":[{"$ref":"#/definitions/MoveId"},{"$ref":"#/definitions/AssetAbilityMoveId"}]},"AnyMoveIdWildcard":{"title":"AnyMoveIdWildcard","anyOf":[{"$ref":"#/definitions/MoveIdWildcard"},{"$ref":"#/definitions/AssetAbilityMoveIdWildcard"}]},"AnyOracleRollable":{"title":"AnyOracleRollable","anyOf":[{"$ref":"#/definitions/OracleRollable"},{"$ref":"#/definitions/EmbeddedOracleRollable"}]},"AnyOracleRollableId":{"title":"AnyOracleRollableId","anyOf":[{"$ref":"#/definitions/OracleRollableId"},{"$ref":"#/definitions/AssetAbilityOracleRollableId"},{"$ref":"#/definitions/TruthOptionOracleRollableId"},{"$ref":"#/definitions/MoveOracleRollableId"}]},"AnyOracleRollableIdWildcard":{"title":"AnyOracleRollableIdWildcard","anyOf":[{"$ref":"#/definitions/OracleRollableIdWildcard"},{"$ref":"#/definitions/AssetAbilityOracleRollableIdWildcard"},{"$ref":"#/definitions/TruthOptionOracleRollableIdWildcard"},{"$ref":"#/definitions/MoveOracleRollableIdWildcard"}]},"AnyOracleRollableRowId":{"title":"AnyOracleRollableRowId","anyOf":[{"$ref":"#/definitions/OracleRollableRowId"},{"$ref":"#/definitions/AssetAbilityOracleRollableRowId"},{"$ref":"#/definitions/MoveOracleRollableRowId"},{"$ref":"#/definitions/TruthOptionOracleRollableRowId"}]},"AnyOracleRollableRowIdWildcard":{"title":"AnyOracleRollableRowIdWildcard","anyOf":[{"$ref":"#/definitions/OracleRollableRowIdWildcard"},{"$ref":"#/definitions/AssetAbilityOracleRollableRowIdWildcard"},{"$ref":"#/definitions/MoveOracleRollableRowIdWildcard"},{"$ref":"#/definitions/TruthOptionOracleRollableRowIdWildcard"}]},"Asset":{"title":"Asset","type":"object","required":["_id","type","name","category","options","count_as_impact","shared","abilities","_source"],"properties":{"_id":{"$ref":"#/definitions/AssetId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"asset"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"category":{"$ref":"#/definitions/Label","description":"A localized category label for this asset. This is the surtitle above the asset's name on the card.","examples":["Combat Talent","Command Vehicle","Companion","Deed","Module","Path","Ritual","Support Vehicle"]},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AssetIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"options":{"type":"object","description":"Options are input fields set when the player purchases the asset. They're likely to remain the same through the life of the asset. Typically, they are rendered at the top of the asset card.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetOptionField"}}},"count_as_impact":{"type":"boolean","description":"If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).","default":false},"shared":{"type":"boolean","description":"Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.","default":false},"attachments":{"$ref":"#/definitions/AssetAttachment"},"requirement":{"$ref":"#/definitions/MarkdownString","description":"Describes prerequisites for purchasing or using this asset."},"abilities":{"type":"array","items":{"$ref":"#/definitions/AssetAbility","description":"Abilities provided by this asset. Most assets have 3."}},"controls":{"type":"object","description":"Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetControlField"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"AssetAbility":{"title":"AssetAbility","type":"object","description":"An asset ability: one of the purchasable features of an asset. Most assets have three.","required":["_id","enabled","text"],"properties":{"_id":{"$ref":"#/definitions/AssetAbilityId","description":"The unique Datasworn ID for this node."},"name":{"$ref":"#/definitions/Label","description":"A handful of asset abilities have a label/name, for instance classic Ironsworn companion assets. Most canonical assets omit this property."},"enabled":{"type":"boolean","description":"Is this asset ability enabled?","default":false},"options":{"type":"object","description":"Fields that are expected to be set once and remain the same through the life of the asset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetAbilityOptionField"}}},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of this asset ability."},"controls":{"type":"object","description":"Fields whose values are expected to change over the life of the asset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetAbilityControlField"}}},"oracles":{"title":"AssetAbilityOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"AssetAbilityOracleRollable"}}},"enhance_asset":{"$ref":"#/definitions/AssetEnhancement","description":"Changes made to the asset, when this ability is enabled."},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"enhance_moves":{"type":"array","description":"Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.","items":{"$ref":"#/definitions/MoveEnhancement"}},"moves":{"title":"AssetAbilityMoves","type":"object","description":"Unique moves added by this asset ability.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedMove","title":"AssetAbilityMove"}}}}},"AssetAbilityControlField":{"title":"AssetAbilityControlField","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["clock","counter","checkbox","text"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"clock"}}},"then":{"$ref":"#/definitions/ClockField"}},{"if":{"properties":{"field_type":{"type":"string","const":"counter"}}},"then":{"$ref":"#/definitions/CounterField"}},{"if":{"properties":{"field_type":{"type":"string","const":"checkbox"}}},"then":{"$ref":"#/definitions/AssetCheckboxField"}},{"if":{"properties":{"field_type":{"type":"string","const":"text"}}},"then":{"$ref":"#/definitions/TextField"}}]},"AssetAbilityId":{"title":"AssetAbilityId","type":"string","description":"A unique ID representing an AssetAbility object.","pattern":"^asset\\.ability:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"},"AssetAbilityIdWildcard":{"title":"AssetAbilityIdWildcard","type":"string","description":"A wildcarded AssetAbilityId that can be used to match multiple AssetAbility objects.","pattern":"^asset\\.ability:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"},"AssetAbilityMoveId":{"title":"AssetAbilityMoveId","type":"string","description":"A unique ID representing an AssetAbilityMove object.","pattern":"^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},"AssetAbilityMoveIdWildcard":{"title":"AssetAbilityMoveIdWildcard","type":"string","description":"A wildcarded AssetAbilityMoveId that can be used to match multiple AssetAbilityMove objects.","pattern":"^asset\\.ability\\.move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"},"AssetAbilityOptionField":{"title":"AssetAbilityOptionField","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["text"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"text"}}},"then":{"$ref":"#/definitions/TextField"}}]},"AssetAbilityOracleRollableId":{"title":"AssetAbilityOracleRollableId","type":"string","description":"A unique ID representing an AssetAbilityOracleRollable object.","pattern":"^asset\\.ability\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},"AssetAbilityOracleRollableIdWildcard":{"title":"AssetAbilityOracleRollableIdWildcard","type":"string","description":"A wildcarded AssetAbilityOracleRollableId that can be used to match multiple AssetAbilityOracleRollable objects.","pattern":"^asset\\.ability\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"},"AssetAbilityOracleRollableRowId":{"title":"AssetAbilityOracleRollableRowId","type":"string","description":"A unique ID representing an AssetAbilityOracleRollableRow object.","pattern":"^asset\\.ability\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"},"AssetAbilityOracleRollableRowIdWildcard":{"title":"AssetAbilityOracleRollableRowIdWildcard","type":"string","description":"A wildcarded AssetAbilityOracleRollableRowId that can be used to match multiple AssetAbilityOracleRollableRow objects.","pattern":"^asset\\.ability\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"},"AssetAttachment":{"title":"AssetAttachment","type":"object","description":"Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.","required":["max","assets"],"properties":{"max":{"description":"Null if there's no upper limit to the number of attached assets.","default":null,"anyOf":[{"type":"integer","minimum":1},{"type":"null"}]},"assets":{"type":"array","description":"Asset IDs (which may be wildcards) that may be attached to this asset","items":{"$ref":"#/definitions/AssetIdWildcard"}}}},"AssetCardFlipField":{"title":"AssetCardFlipField","type":"object","required":["label","field_type","value","is_impact","disables_asset"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"card_flip"},"value":{"type":"boolean","description":"Is the card flipped over?","default":false},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."},"is_impact":{"type":"boolean","description":"Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?","default":false},"disables_asset":{"type":"boolean","description":"Does this field disable the asset when its value is set to `true`?","default":false}}},"AssetCheckboxField":{"title":"AssetCheckboxField","type":"object","required":["label","field_type","value","is_impact","disables_asset"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"checkbox"},"value":{"type":"boolean","description":"Is the box checked?","default":false},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."},"is_impact":{"type":"boolean","description":"Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?","default":false},"disables_asset":{"type":"boolean","description":"Does this field disable the asset when its value is set to `true`?","default":false}}},"AssetCollection":{"title":"AssetCollection","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/AssetCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"asset_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AssetCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/AssetCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Asset"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"AssetCollectionId":{"title":"AssetCollectionId","type":"string","description":"A unique ID representing an AssetCollection object.","pattern":"^asset_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},"AssetCollectionIdWildcard":{"title":"AssetCollectionIdWildcard","type":"string","description":"A wildcarded AssetCollectionId that can be used to match multiple AssetCollection objects.","pattern":"^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},"AssetConditionMeter":{"title":"AssetConditionMeter","type":"object","description":"Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".","required":["label","field_type","rollable","min","max","value","controls"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"condition_meter"},"rollable":{"type":"boolean","description":"Is this meter's `value` usable as a stat in an action roll?","default":true,"const":true},"min":{"type":"integer","description":"The minimum value of this meter.","default":0},"max":{"type":"integer","description":"The maximum value of this meter."},"value":{"type":"integer","description":"The current value of this meter.","default":0},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."},"controls":{"type":"object","description":"Checkbox controls rendered as part of the condition meter.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetConditionMeterControlField"}}},"moves":{"type":"object","description":"Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.","releaseStage":"experimental","properties":{"recover":{"type":"array","description":"The ID(s) of recovery moves associated with this meter.","items":{"$ref":"#/definitions/AnyMoveIdWildcard","examples":["move:classic/adventure/heal","move:classic/adventure/make_camp","move:classic/relationship/sojourn","move:starforged/recover/heal","move:starforged/recover/repair"]}},"suffer":{"type":"array","description":"The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option.","items":{"$ref":"#/definitions/AnyMoveIdWildcard","examples":["move:classic/suffer/companion_endure_harm","move:starforged/suffer/companion_takes_a_hit","move:starforged/suffer/withstand_damage"]}}}}}},"AssetConditionMeterControlField":{"title":"AssetConditionMeterControlField","type":"object","description":"A checkbox control field, rendered as part of an asset condition meter.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["checkbox","card_flip"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"checkbox"}}},"then":{"$ref":"#/definitions/AssetCheckboxField"}},{"if":{"properties":{"field_type":{"type":"string","const":"card_flip"}}},"then":{"$ref":"#/definitions/AssetCardFlipField"}}]},"AssetConditionMeterEnhancement":{"title":"AssetConditionMeterEnhancement","type":"object","description":"Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".","required":["field_type","max"],"properties":{"field_type":{"type":"string","const":"condition_meter"},"max":{"type":"integer","description":"The maximum value of this meter."}}},"AssetControlField":{"title":"AssetControlField","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["condition_meter","select_enhancement","checkbox","card_flip"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"condition_meter"}}},"then":{"$ref":"#/definitions/AssetConditionMeter"}},{"if":{"properties":{"field_type":{"type":"string","const":"select_enhancement"}}},"then":{"$ref":"#/definitions/SelectEnhancementField"}},{"if":{"properties":{"field_type":{"type":"string","const":"checkbox"}}},"then":{"$ref":"#/definitions/AssetCheckboxField"}},{"if":{"properties":{"field_type":{"type":"string","const":"card_flip"}}},"then":{"$ref":"#/definitions/AssetCardFlipField"}}]},"AssetControlFieldEnhancement":{"title":"AssetControlFieldEnhancement","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["condition_meter"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"condition_meter"}}},"then":{"$ref":"#/definitions/AssetConditionMeterEnhancement"}}]},"AssetControlValueRef":{"title":"AssetControlValueRef","type":"object","description":"A reference to the value of an asset control.","required":["using","control","assets"],"properties":{"using":{"type":"string","description":"A reference to the value of an asset control.","const":"asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.","default":null,"anyOf":[{"type":"array","default":null,"items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}},"AssetEnhancement":{"title":"AssetEnhancement","type":"object","description":"Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.","properties":{"count_as_impact":{"type":"boolean","description":"If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."},"shared":{"type":"boolean","description":"Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."},"attachments":{"$ref":"#/definitions/AssetAttachment"},"controls":{"type":"object","description":"Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.","remarks":"Deserialize as a dictionary object.","patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetControlFieldEnhancement"}}},"suggestions":{"$ref":"#/definitions/Suggestions"}}},"AssetId":{"title":"AssetId","type":"string","description":"A unique ID representing an Asset object.","pattern":"^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},"AssetIdWildcard":{"title":"AssetIdWildcard","type":"string","description":"A wildcarded AssetId that can be used to match multiple Asset objects.","pattern":"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},"AssetOptionField":{"title":"AssetOptionField","type":"object","description":"Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["select_value","select_enhancement","text"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"select_value"}}},"then":{"$ref":"#/definitions/SelectValueField"}},{"if":{"properties":{"field_type":{"type":"string","const":"select_enhancement"}}},"then":{"$ref":"#/definitions/SelectEnhancementField"}},{"if":{"properties":{"field_type":{"type":"string","const":"text"}}},"then":{"$ref":"#/definitions/TextField"}}]},"AssetOptionValueRef":{"title":"AssetOptionValueRef","type":"object","description":"A reference to the value of an asset option.","required":["using","option","assets"],"properties":{"using":{"type":"string","description":"A reference to the value of an asset option.","const":"asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}},"AtlasCollection":{"title":"AtlasCollection","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/AtlasCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"atlas_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AtlasCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/AtlasCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasEntry"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"AtlasCollectionId":{"title":"AtlasCollectionId","type":"string","description":"A unique ID representing an AtlasCollection object.","pattern":"^atlas_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},"AtlasCollectionIdWildcard":{"title":"AtlasCollectionIdWildcard","type":"string","description":"A wildcarded AtlasCollectionId that can be used to match multiple AtlasCollection objects.","pattern":"^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},"AtlasEntry":{"title":"AtlasEntry","type":"object","description":"An atlas entry, like the Ironlands region entries found in classic Ironsworn.","required":["_id","type","name","features","description","_source"],"properties":{"_id":{"$ref":"#/definitions/AtlasEntryId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"atlas_entry"},"name":{"$ref":"#/definitions/Label"},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AtlasEntryIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString"},"features":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"description":{"$ref":"#/definitions/MarkdownString"},"quest_starter":{"$ref":"#/definitions/MarkdownString"},"your_truth":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"AtlasEntryId":{"title":"AtlasEntryId","type":"string","description":"A unique ID representing an AtlasEntry object.","pattern":"^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},"AtlasEntryIdWildcard":{"title":"AtlasEntryIdWildcard","type":"string","description":"A wildcarded AtlasEntryId that can be used to match multiple AtlasEntry objects.","pattern":"^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},"AttachedAssetControlValueRef":{"title":"AttachedAssetControlValueRef","type":"object","description":"A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.","required":["using","control"],"properties":{"using":{"type":"string","description":"A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.","const":"attached_asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]}}},"AttachedAssetOptionValueRef":{"title":"AttachedAssetOptionValueRef","type":"object","description":"A reference to the value of an attached asset option.","required":["using","option"],"properties":{"using":{"type":"string","description":"A reference to the value of an attached asset option.","const":"attached_asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."}}},"AuthorInfo":{"title":"AuthorInfo","type":"object","description":"Information on the original creator of this material.","examples":[{"name":"Shawn Tomkin","url":"https://ironswornrpg.com"}],"required":["name"],"properties":{"name":{"$ref":"#/definitions/Label","description":"The name of the author.","examples":["Shawn Tomkin"]},"email":{"$ref":"#/definitions/Email","description":"An optional email contact for the author"},"url":{"$ref":"#/definitions/WebUrl","description":"An optional URL for the author's website."}}},"ChallengeRank":{"title":"ChallengeRank","description":"Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).\n\n  - `1`: Troublesome\n  - `2`: Dangerous\n  - `3`: Formidable\n  - `4`: Extreme\n  - `5`: Epic","enum":[1,2,3,4,5]},"ClockField":{"title":"ClockField","type":"object","description":"A clock with 4 or more segments.","remarks":"Semantics are similar to HTML `<input type=\"number\">`, but rendered as a clock (a circle with equally sized wedges).","required":["label","field_type","rollable","min","max","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"clock"},"rollable":{"type":"boolean","default":false,"const":false},"min":{"type":"integer","description":"The minimum number of filled clock segments. This is always 0.","default":0,"const":0},"max":{"title":"ClockSize","type":"integer","description":"The size of the clock -- in other words, the maximum number of filled clock segments. Standard clocks have 4, 6, 8, or 10 segments.","multipleOf":2,"minimum":2},"value":{"type":"integer","description":"The current value of this input.","default":0},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}},"CollectableType":{"title":"CollectableType","enum":["atlas_entry","npc","oracle_rollable","asset","move"]},"CollectionType":{"title":"CollectionType","enum":["atlas_collection","npc_collection","oracle_collection","asset_collection","move_category"]},"ConditionMeterField":{"title":"ConditionMeterField","type":"object","description":"A meter with an integer value, bounded by a minimum and maximum.","required":["label","field_type","rollable","min","max","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"condition_meter"},"rollable":{"type":"boolean","description":"Is this meter's `value` usable as a stat in an action roll?","default":true,"const":true},"min":{"type":"integer","description":"The minimum value of this meter.","default":0},"max":{"type":"integer","description":"The maximum value of this meter."},"value":{"type":"integer","description":"The current value of this meter.","default":0},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}},"ConditionMeterKey":{"$ref":"#/definitions/DictKey","title":"ConditionMeterKey","description":"A basic, rollable player character resource specified by the ruleset.","examples":["health","spirit","supply"]},"ConditionMeterRule":{"title":"ConditionMeterRule","type":"object","description":"Describes a standard player character condition meter.","required":["label","rollable","min","max","value","shared","description"],"properties":{"label":{"$ref":"#/definitions/Label"},"rollable":{"type":"boolean","description":"Is this meter's `value` usable as a stat in an action roll?","default":true,"const":true},"min":{"type":"integer","description":"The minimum value of this meter.","default":0},"max":{"type":"integer","description":"The maximum value of this meter."},"value":{"type":"integer","description":"The current value of this meter.","default":0},"shared":{"type":"boolean","description":"Is this condition meter shared by all players?","default":false},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this condition meter."}}},"ConditionMeterValueRef":{"title":"ConditionMeterValueRef","type":"object","description":"A reference to the value of a standard player condition meter.","required":["using","condition_meter"],"properties":{"using":{"type":"string","description":"A reference to the value of a standard player condition meter.","const":"condition_meter"},"condition_meter":{"$ref":"#/definitions/ConditionMeterKey"}}},"CounterField":{"title":"CounterField","type":"object","description":"A basic counter representing a non-rollable integer value. They usually start at 0, and may or may not have a maximum.","remarks":"Semantics are similar to `<input type=\"number\" step=\"1\">`","required":["label","field_type","rollable","min","max","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"counter"},"rollable":{"type":"boolean","default":false,"const":false},"min":{"type":"integer","description":"The (inclusive) minimum value.","default":0},"max":{"description":"The (inclusive) maximum value, or `null` if there's no maximum.","default":null,"anyOf":[{"type":"integer"},{"type":"null"}]},"value":{"type":"integer","description":"The current value of this input.","default":0},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}},"CssColor":{"title":"CssColor","type":"string","description":"A CSS color value.","remarks":"See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"},"CustomValue":{"title":"CustomValue","type":"object","description":"An arbitrary static integer value with a label.","required":["label","using","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"using":{"type":"string","description":"An arbitrary static integer value with a label.","const":"custom"},"value":{"type":"integer"}}},"DelveSite":{"title":"DelveSite","type":"object","description":"A delve site with a theme, domain, and denizens.","required":["_id","type","name","theme","domain","rank","description","denizens","_source"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"delve_site"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/DelveSiteIdWildcard"}},"region":{"$ref":"#/definitions/AtlasEntryId","description":"The ID of an atlas entry representing the region in which this delve site is located."},"theme":{"$ref":"#/definitions/DelveSiteThemeId","description":"The ID of the site's DelveSiteTheme card."},"domain":{"$ref":"#/definitions/DelveSiteDomainId","description":"The ID of the site's DelveSiteDomain card."},"extra_card":{"description":"An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve.","anyOf":[{"$ref":"#/definitions/DelveSiteThemeId"},{"$ref":"#/definitions/DelveSiteDomainId"}]},"rank":{"$ref":"#/definitions/ChallengeRank"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"description":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"denizens":{"description":"Represents the delve site's denizen matrix as an array of objects.","rollable":"1d100","allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteDenizen"}},{"type":"array","items":[{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"very_common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":1},"max":{"type":"number","const":27}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":28},"max":{"type":"number","const":41}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":42},"max":{"type":"number","const":55}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":56},"max":{"type":"number","const":69}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":70},"max":{"type":"number","const":75}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":76},"max":{"type":"number","const":81}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":82},"max":{"type":"number","const":87}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":88},"max":{"type":"number","const":93}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"rare"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":94},"max":{"type":"number","const":95}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"rare"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":96},"max":{"type":"number","const":97}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"rare"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":98},"max":{"type":"number","const":99}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"unforeseen"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":100},"max":{"type":"number","const":100}}}},"additionalProperties":{}}],"minItems":12,"maxItems":12,"additionalItems":{}}]},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"DelveSiteDenizen":{"title":"DelveSiteDenizen","type":"object","description":"Represents an entry in a delve site denizen matrix. Denizen matrices are described in Ironsworn: Delve.","required":["frequency","roll"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDenizenId"},"name":{"$ref":"#/definitions/Label","description":"A name for the denizen, if it's different than the `name` property of the NPC."},"npc":{"$ref":"#/definitions/NpcId","description":"The ID of the relevant NPC entry, if one is specified."},"frequency":{"$ref":"#/definitions/DelveSiteDenizenFrequency"},"roll":{"$ref":"#/definitions/DiceRange"}}},"DelveSiteDenizenFrequency":{"title":"DelveSiteDenizenFrequency","enum":["very_common","common","uncommon","rare","unforeseen"]},"DelveSiteDenizenId":{"title":"DelveSiteDenizenId","type":"string","description":"A unique ID representing a DelveSiteDenizen object.","pattern":"^delve_site\\.denizen:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},"DelveSiteDenizenIdWildcard":{"title":"DelveSiteDenizenIdWildcard","type":"string","description":"A wildcarded DelveSiteDenizenId that can be used to match multiple DelveSiteDenizen objects.","pattern":"^delve_site\\.denizen:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},"DelveSiteDomain":{"title":"DelveSiteDomain","type":"object","description":"A delve site Domain card.","required":["_id","type","name","features","dangers","_source"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDomainId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"delve_site_domain"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/DelveSiteDomainIdWildcard"}},"name_oracle":{"$ref":"#/definitions/OracleRollableId","description":"An oracle table ID containing place name elements. For examples, see oracle ID `oracle_rollable:delve/site_name/place/barrow`, and its siblings in oracle collection ID `oracle_collection:delve/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (`oracle_rollable:delve/site_name/format`) to create random names for delve sites."},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"features":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteDomainFeature"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":21},"max":{"type":"number","const":43}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":44},"max":{"type":"number","const":56}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":57},"max":{"type":"number","const":64}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":65},"max":{"type":"number","const":68}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":69},"max":{"type":"number","const":72}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":73},"max":{"type":"number","const":76}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":77},"max":{"type":"number","const":80}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":81},"max":{"type":"number","const":84}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":85},"max":{"type":"number","const":88}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":89},"max":{"type":"number","const":98}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":99},"max":{"type":"number","const":99}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":100},"max":{"type":"number","const":100}}}},"additionalProperties":{}}],"minItems":12,"maxItems":12,"additionalItems":{}}]},"dangers":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteDomainDanger"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":31},"max":{"type":"number","const":33}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":34},"max":{"type":"number","const":36}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":37},"max":{"type":"number","const":39}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":40},"max":{"type":"number","const":42}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":43},"max":{"type":"number","const":45}}}},"additionalProperties":{}}],"minItems":5,"maxItems":5,"additionalItems":{}}]},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"DelveSiteDomainDanger":{"title":"DelveSiteDomainDanger","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDomainDangerId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}},"DelveSiteDomainDangerId":{"title":"DelveSiteDomainDangerId","type":"string","description":"A unique ID representing a DelveSiteDomainDanger object.","pattern":"^delve_site_domain\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},"DelveSiteDomainDangerIdWildcard":{"title":"DelveSiteDomainDangerIdWildcard","type":"string","description":"A wildcarded DelveSiteDomainDangerId that can be used to match multiple DelveSiteDomainDanger objects.","pattern":"^delve_site_domain\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},"DelveSiteDomainFeature":{"title":"DelveSiteDomainFeature","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDomainFeatureId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}},"DelveSiteDomainFeatureId":{"title":"DelveSiteDomainFeatureId","type":"string","description":"A unique ID representing a DelveSiteDomainFeature object.","pattern":"^delve_site_domain\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},"DelveSiteDomainFeatureIdWildcard":{"title":"DelveSiteDomainFeatureIdWildcard","type":"string","description":"A wildcarded DelveSiteDomainFeatureId that can be used to match multiple DelveSiteDomainFeature objects.","pattern":"^delve_site_domain\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},"DelveSiteDomainId":{"title":"DelveSiteDomainId","type":"string","description":"A unique ID representing a DelveSiteDomain object.","pattern":"^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},"DelveSiteDomainIdWildcard":{"title":"DelveSiteDomainIdWildcard","type":"string","description":"A wildcarded DelveSiteDomainId that can be used to match multiple DelveSiteDomain objects.","pattern":"^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},"DelveSiteId":{"title":"DelveSiteId","type":"string","description":"A unique ID representing a DelveSite object.","pattern":"^delve_site:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},"DelveSiteIdWildcard":{"title":"DelveSiteIdWildcard","type":"string","description":"A wildcarded DelveSiteId that can be used to match multiple DelveSite objects.","pattern":"^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},"DelveSiteTheme":{"title":"DelveSiteTheme","type":"object","description":"A delve site theme card.","required":["_id","type","name","features","dangers","_source"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteThemeId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"delve_site_theme"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/DelveSiteThemeIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"features":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteThemeFeature"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":1},"max":{"type":"number","const":4}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":5},"max":{"type":"number","const":8}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":9},"max":{"type":"number","const":12}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":13},"max":{"type":"number","const":16}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":17},"max":{"type":"number","const":20}}}},"additionalProperties":{}}],"minItems":5,"maxItems":5,"additionalItems":{}}]},"dangers":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteThemeDanger"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":1},"max":{"type":"number","const":5}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":6},"max":{"type":"number","const":10}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":11},"max":{"type":"number","const":12}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":13},"max":{"type":"number","const":14}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":15},"max":{"type":"number","const":16}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":17},"max":{"type":"number","const":18}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":19},"max":{"type":"number","const":20}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":21},"max":{"type":"number","const":22}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":23},"max":{"type":"number","const":24}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":25},"max":{"type":"number","const":26}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":27},"max":{"type":"number","const":28}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":29},"max":{"type":"number","const":30}}}},"additionalProperties":{}}],"minItems":12,"maxItems":12,"additionalItems":{}}]},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"DelveSiteThemeDanger":{"title":"DelveSiteThemeDanger","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteThemeDangerId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}},"DelveSiteThemeDangerId":{"title":"DelveSiteThemeDangerId","type":"string","description":"A unique ID representing a DelveSiteThemeDanger object.","pattern":"^delve_site_theme\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},"DelveSiteThemeDangerIdWildcard":{"title":"DelveSiteThemeDangerIdWildcard","type":"string","description":"A wildcarded DelveSiteThemeDangerId that can be used to match multiple DelveSiteThemeDanger objects.","pattern":"^delve_site_theme\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},"DelveSiteThemeFeature":{"title":"DelveSiteThemeFeature","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteThemeFeatureId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}},"DelveSiteThemeFeatureId":{"title":"DelveSiteThemeFeatureId","type":"string","description":"A unique ID representing a DelveSiteThemeFeature object.","pattern":"^delve_site_theme\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},"DelveSiteThemeFeatureIdWildcard":{"title":"DelveSiteThemeFeatureIdWildcard","type":"string","description":"A wildcarded DelveSiteThemeFeatureId that can be used to match multiple DelveSiteThemeFeature objects.","pattern":"^delve_site_theme\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},"DelveSiteThemeId":{"title":"DelveSiteThemeId","type":"string","description":"A unique ID representing a DelveSiteTheme object.","pattern":"^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},"DelveSiteThemeIdWildcard":{"title":"DelveSiteThemeIdWildcard","type":"string","description":"A wildcarded DelveSiteThemeId that can be used to match multiple DelveSiteTheme objects.","pattern":"^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},"DiceExpression":{"title":"DiceExpression","type":"string","description":"A simple dice roll expression with an optional (positive or negative) modifer.","examples":["1d100","1d6+2","2d10"],"pattern":"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},"DiceRange":{"title":"DiceRange","type":"object","description":"Represents a range of dice roll results, bounded by `min` and `max` (inclusive).","required":["min","max"],"properties":{"min":{"type":"integer","description":"Low end of the dice range."},"max":{"type":"integer","description":"High end of the dice range."}}},"DictKey":{"title":"DictKey","type":"string","description":"A `snake_case` key used in a Datasworn dictionary object.","remarks":"If you need to generate a key from a user-provided label, it's recommended to use a 'slugify' function/library, e.g. https://www.npmjs.com/package/slugify for NodeJS.","pattern":"^[a-z][a-z_]*$"},"Email":{"title":"Email","type":"string","description":"An email address.","format":"email"},"EmbeddedActionRollMove":{"title":"EmbeddedActionRollMove","type":"object","required":["_id","type","name","roll_type","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"action_roll"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerActionRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":true}}},"EmbeddedMove":{"title":"EmbeddedMove","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.","required":["roll_type"],"properties":{"roll_type":{"enum":["action_roll","no_roll","progress_roll","special_track"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"roll_type":{"type":"string","const":"action_roll"}}},"then":{"$ref":"#/definitions/EmbeddedActionRollMove"}},{"if":{"properties":{"roll_type":{"type":"string","const":"no_roll"}}},"then":{"$ref":"#/definitions/EmbeddedNoRollMove"}},{"if":{"properties":{"roll_type":{"type":"string","const":"progress_roll"}}},"then":{"$ref":"#/definitions/EmbeddedProgressRollMove"}},{"if":{"properties":{"roll_type":{"type":"string","const":"special_track"}}},"then":{"$ref":"#/definitions/EmbeddedSpecialTrackMove"}}]},"EmbeddedMoveId":{"$ref":"#/definitions/AssetAbilityMoveId","title":"EmbeddedMoveId"},"EmbeddedMoveIdWildcard":{"$ref":"#/definitions/AssetAbilityMoveIdWildcard","title":"EmbeddedMoveIdWildcard"},"EmbeddedNoRollMove":{"title":"EmbeddedNoRollMove","type":"object","required":["_id","type","name","roll_type","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"no_roll"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerNoRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"title":"MoveOutcomes","type":"null","default":null},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}},"EmbeddedOracleColumnText":{"title":"EmbeddedOracleColumnText","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}}}},"EmbeddedOracleColumnText2":{"title":"EmbeddedOracleColumnText2","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text2"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}}}},"EmbeddedOracleColumnText3":{"title":"EmbeddedOracleColumnText3","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text3"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}}}},"EmbeddedOracleRollable":{"title":"EmbeddedOracleRollable","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.","required":["oracle_type"],"properties":{"oracle_type":{"enum":["table_text","table_text2","table_text3","column_text","column_text2","column_text3"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text"}}},"then":{"$ref":"#/definitions/EmbeddedOracleTableText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text2"}}},"then":{"$ref":"#/definitions/EmbeddedOracleTableText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text3"}}},"then":{"$ref":"#/definitions/EmbeddedOracleTableText3"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text"}}},"then":{"$ref":"#/definitions/EmbeddedOracleColumnText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text2"}}},"then":{"$ref":"#/definitions/EmbeddedOracleColumnText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text3"}}},"then":{"$ref":"#/definitions/EmbeddedOracleColumnText3"}}]},"EmbeddedOracleRollableId":{"title":"EmbeddedOracleRollableId","anyOf":[{"$ref":"#/definitions/AssetAbilityOracleRollableId"},{"$ref":"#/definitions/TruthOptionOracleRollableId"},{"$ref":"#/definitions/MoveOracleRollableId"}]},"EmbeddedOracleRollableIdWildcard":{"title":"EmbeddedOracleRollableIdWildcard","anyOf":[{"$ref":"#/definitions/AssetAbilityOracleRollableIdWildcard"},{"$ref":"#/definitions/TruthOptionOracleRollableIdWildcard"},{"$ref":"#/definitions/MoveOracleRollableIdWildcard"}]},"EmbeddedOracleTableText":{"title":"EmbeddedOracleTableText","type":"object","required":["_id","type","name","oracle_type","dice","column_labels","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","default":{"roll":"Roll","text":"Result"},"required":["roll","text"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}}}},"EmbeddedOracleTableText2":{"title":"EmbeddedOracleTableText2","type":"object","required":["_id","type","name","oracle_type","dice","column_labels","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text2"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text2ColumnLabels","type":"object","default":{"roll":"Roll","text":"Result","text2":"Details"},"required":["roll","text","text2"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}}}},"EmbeddedOracleTableText3":{"title":"EmbeddedOracleTableText3","type":"object","required":["_id","type","name","oracle_type","dice","column_labels","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text3"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text3ColumnLabels","type":"object","required":["roll","text","text2","text3"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"},"text3":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}}}},"EmbeddedProgressRollMove":{"title":"EmbeddedProgressRollMove","type":"object","required":["_id","type","name","roll_type","tracks","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"progress_roll"},"tracks":{"$ref":"#/definitions/ProgressTrackTypeInfo","description":"Describes the common features of progress tracks associated with this move."},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerProgressRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}},"EmbeddedSpecialTrackMove":{"title":"EmbeddedSpecialTrackMove","type":"object","required":["_id","type","name","roll_type","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"special_track"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerSpecialTrack","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}},"EmbedOnlyType":{"title":"EmbedOnlyType","enum":["ability","option","row","feature","danger","denizen","variant"]},"EntityPrompt":{"title":"EntityPrompt","type":"object","description":"This type is a placeholder and may see signficant changes in v0.2.0.","releaseStage":"experimental","required":["text"],"properties":{"text":{"$ref":"#/definitions/MarkdownString"}}},"Expansion":{"title":"Expansion","type":"object","description":"A Datasworn package that relies on an external package to provide its ruleset.","required":["_id","datasworn_version","type","ruleset","title","authors","date","license","url","oracles","assets","moves"],"properties":{"_id":{"$ref":"#/definitions/ExpansionId"},"datasworn_version":{"type":"string","description":"The version of the Datasworn format used by this data.","const":"0.1.0","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"},"type":{"type":"string","const":"expansion"},"ruleset":{"$ref":"#/definitions/RulesetId"},"title":{"$ref":"#/definitions/Label","description":"The title of the source document.","examples":["Ironsworn Rulebook","Ironsworn Assets Master Set","Ironsworn: Delve","Ironsworn: Starforged Rulebook","Ironsworn: Starforged Assets","Sundered Isles"]},"authors":{"type":"array","description":"Lists authors credited by the source material.","items":{"$ref":"#/definitions/AuthorInfo"},"minItems":1},"date":{"type":"string","description":"The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.","remarks":"You may prefer to deserialize this as a Date object.","format":"date","pattern":"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},"license":{"description":"An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.","examples":["https://creativecommons.org/licenses/by/4.0","https://creativecommons.org/licenses/by-nc-sa/4.0"],"anyOf":[{"$ref":"#/definitions/WebUrl"},{"type":"null"}]},"url":{"$ref":"#/definitions/WebUrl","description":"A URL where the source document is available.","examples":["https://ironswornrpg.com"]},"rules":{"$ref":"#/definitions/RulesExpansion"},"description":{"$ref":"#/definitions/MarkdownString"},"oracles":{"type":"object","description":"A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleTablesCollection"}}},"assets":{"type":"object","description":"A dictionary object containing asset collections, which contain assets.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetCollection"}}},"atlas":{"type":"object","description":"A dictionary object containing atlas collections, which contain atlas entries.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasCollection"}}},"moves":{"type":"object","description":"A dictionary object containing move categories, which contain moves.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/MoveCategory"}}},"npcs":{"type":"object","description":"A dictionary object containing NPC collections, which contain NPCs.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcCollection"}}},"rarities":{"type":"object","description":"A dictionary object containing rarities, like those presented in Ironsworn: Delve.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Rarity"}}},"delve_sites":{"type":"object","description":"A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSite"}}},"site_domains":{"type":"object","description":"A dictionary object containing delve site domains.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteDomain"}}},"site_themes":{"type":"object","description":"A dictionary object containing delve site themes.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteTheme"}}},"truths":{"type":"object","description":"A dictionary object of truth categories.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Truth"}}}},"additionalProperties":{}},"ExpansionId":{"title":"ExpansionId","type":"string","description":"The ID of a Datasworn package that relies on an external package to provide its ruleset.","examples":["delve","sundered_isles"],"pattern":"^[a-z][a-z0-9_]{3,}$"},"I18nHint":{"title":"I18nHint","type":"object","releaseStage":"experimental","properties":{"part_of_speech":{"$ref":"#/definitions/PartOfSpeech","description":"The part of speech for this string."}}},"I18nHints":{"title":"I18nHints","type":"object","description":"Internationalization/localization hints for the text content of this object.","releaseStage":"experimental","properties":{"text":{"$ref":"#/definitions/I18nHint"},"text2":{"$ref":"#/definitions/I18nHint"},"text3":{"$ref":"#/definitions/I18nHint"},"template":{"type":"object","properties":{"text":{"$ref":"#/definitions/I18nHint"},"text2":{"$ref":"#/definitions/I18nHint"},"text3":{"$ref":"#/definitions/I18nHint"}}}}},"ImpactCategory":{"title":"ImpactCategory","type":"object","description":"Describes a category of standard impacts/debilities.","required":["label","description","contents"],"properties":{"label":{"$ref":"#/definitions/Label","description":"A label for this impact category."},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this impact category."},"contents":{"type":"object","description":"A dictionary object of the Impacts in this category.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ImpactRule"}}}}},"ImpactRule":{"title":"ImpactRule","type":"object","description":"Describes a standard impact/debility.","required":["label","prevents_recovery","permanent","shared","description"],"properties":{"label":{"$ref":"#/definitions/Label","description":"The label for this impact."},"prevents_recovery":{"type":"array","description":"Any ruleset condition meters that can't recover when this impact is active.","default":[],"items":{"$ref":"#/definitions/ConditionMeterKey"}},"permanent":{"type":"boolean","description":"Is this impact permanent?","default":false},"shared":{"type":"boolean","description":"Is this impact applied to all players at once?","default":false},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this impact."}}},"Label":{"title":"Label","type":"string","description":"A localized, player-facing name or label, formatted as plain text. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).","i18n":true},"MarkdownString":{"title":"MarkdownString","type":"string","description":"Localized, player-facing text, formatted in Markdown. It is *not* formatted for use \"out of the box\"; it uses some custom syntax, intended to be replaced in whatever way is most appropriate for your implementation.\n\n* `[Link text](datasworn:move:starforged/suffer/pay_the_price)`: A link to the identified object. The ID must conform to the `AnyId` type; no wildcards allowed.\n* `{{table>oracle_rollable:starforged/core/action}}`: the referenced oracle is rendered here in the source material. The ID must conform to the `AnyOracleRollableId` type; no wildcards allowed.\n* `{{table_columns>move:delve/delve/delve_the_depths}}`: Render *all* direct OracleRollable children of the identified node. This can be an OracleCollectionId, or the ID of anything that can have EmbeddedOracleRollables (such as a Move or TruthOption).\n","i18n":true,"format":"markdown"},"MarkdownTemplateString":{"title":"MarkdownTemplateString","type":"string","description":"A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key>some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `text` key, for example `{{text>oracle_rollable:starforged/core/action}}`\n","releaseStage":"experimental","i18n":true,"format":"markdown"},"Move":{"title":"Move","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.","required":["roll_type"],"properties":{"roll_type":{"enum":["action_roll","no_roll","progress_roll","special_track"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"roll_type":{"type":"string","const":"action_roll"}}},"then":{"$ref":"#/definitions/MoveActionRoll"}},{"if":{"properties":{"roll_type":{"type":"string","const":"no_roll"}}},"then":{"$ref":"#/definitions/MoveNoRoll"}},{"if":{"properties":{"roll_type":{"type":"string","const":"progress_roll"}}},"then":{"$ref":"#/definitions/MoveProgressRoll"}},{"if":{"properties":{"roll_type":{"type":"string","const":"special_track"}}},"then":{"$ref":"#/definitions/MoveSpecialTrack"}}]},"MoveActionRoll":{"title":"Move (action roll)","type":"object","description":"A move that makes an action roll.","required":["_id","type","name","roll_type","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"action_roll"},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerActionRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":true}}},"MoveActionRollEnhancement":{"title":"MoveActionRollEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"action_roll"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerActionRollEnhancement"}}},"MoveCategory":{"title":"MoveCategory","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/MoveCategoryId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move_category"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/MoveCategoryIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/MoveCategoryIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Move"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/MoveCategory"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"MoveCategoryId":{"title":"MoveCategoryId","type":"string","description":"A unique ID representing a MoveCategory object.","pattern":"^move_category:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},"MoveCategoryIdWildcard":{"title":"MoveCategoryIdWildcard","type":"string","description":"A wildcarded MoveCategoryId that can be used to match multiple MoveCategory objects.","pattern":"^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},"MoveEnhancement":{"title":"MoveEnhancement","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.","required":["roll_type"],"properties":{"roll_type":{"enum":["action_roll","no_roll","progress_roll","special_track"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"roll_type":{"type":"string","const":"action_roll"}}},"then":{"$ref":"#/definitions/MoveActionRollEnhancement"}},{"if":{"properties":{"roll_type":{"type":"string","const":"no_roll"}}},"then":{"$ref":"#/definitions/MoveNoRollEnhancement"}},{"if":{"properties":{"roll_type":{"type":"string","const":"progress_roll"}}},"then":{"$ref":"#/definitions/MoveProgressRollEnhancement"}},{"if":{"properties":{"roll_type":{"type":"string","const":"special_track"}}},"then":{"$ref":"#/definitions/MoveSpecialTrackEnhancement"}}]},"MoveId":{"title":"MoveId","type":"string","description":"A unique ID representing a Move object.","pattern":"^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},"MoveIdWildcard":{"title":"MoveIdWildcard","type":"string","description":"A wildcarded MoveId that can be used to match multiple Move objects.","pattern":"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},"MoveNoRoll":{"title":"MoveNoRoll","type":"object","description":"A move that makes no progress rolls or action rolls.","required":["_id","type","name","roll_type","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"no_roll"},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerNoRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"title":"MoveOutcomes","type":"null","default":null},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}},"MoveNoRollEnhancement":{"title":"MoveNoRollEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"no_roll"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerNoRollEnhancement"}}},"MoveOracleRollableId":{"title":"MoveOracleRollableId","type":"string","description":"A unique ID representing a MoveOracleRollable object.","pattern":"^move\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"},"MoveOracleRollableIdWildcard":{"title":"MoveOracleRollableIdWildcard","type":"string","description":"A wildcarded MoveOracleRollableId that can be used to match multiple MoveOracleRollable objects.","pattern":"^move\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"},"MoveOracleRollableRowId":{"title":"MoveOracleRollableRowId","type":"string","description":"A unique ID representing a MoveOracleRollableRow object.","pattern":"^move\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"},"MoveOracleRollableRowIdWildcard":{"title":"MoveOracleRollableRowIdWildcard","type":"string","description":"A wildcarded MoveOracleRollableRowId that can be used to match multiple MoveOracleRollableRow objects.","pattern":"^move\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"},"MoveOutcome":{"title":"MoveOutcome","type":"object","required":["text"],"properties":{"text":{"$ref":"#/definitions/MarkdownString","type":"string","pattern":"On a __(strong hit|weak hit|miss)__"},"oracle_rolls":{"type":"array","items":{"$ref":"#/definitions/OracleRoll"}}}},"MoveOutcomes":{"title":"MoveOutcomes","type":"object","description":"A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.","required":["strong_hit","weak_hit","miss"],"properties":{"strong_hit":{"$ref":"#/definitions/MoveOutcome"},"weak_hit":{"$ref":"#/definitions/MoveOutcome"},"miss":{"$ref":"#/definitions/MoveOutcome"}}},"MoveProgressRoll":{"title":"Progress Move","type":"object","description":"A progress move that rolls on a standard progress track type (whose features are defined by this move object). For progress rolls that use special tracks, see MoveSpecialTrack.","required":["_id","type","name","roll_type","tracks","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"progress_roll"},"tracks":{"$ref":"#/definitions/ProgressTrackTypeInfo","description":"Describes the common features of progress tracks associated with this move."},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerProgressRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}},"MoveProgressRollEnhancement":{"title":"MoveProgressRollEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"progress_roll"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerProgressRollEnhancement"}}},"MoveRollType":{"title":"MoveRollType","description":"  - `no_roll`: A move that makes no action rolls or progress rolls.\n  - `action_roll`: A move that makes an action roll.\n  - `progress_roll`: A progress move that rolls on a standard progress track type (defined by this move).\n  - `special_track`: A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).","enum":["no_roll","action_roll","progress_roll","special_track"]},"MoveSpecialTrack":{"title":"Progress Move (special track roll)","type":"object","description":"A progress move that rolls on a special track, such as Legacies (Starforged) or Bonds (classic Ironsworn). For progress moves that use standard progress tracks, see MoveProgressRoll instead.","required":["_id","type","name","roll_type","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"special_track"},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerSpecialTrack","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}},"MoveSpecialTrackEnhancement":{"title":"MoveSpecialTrackEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"special_track"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerSpecialTrackEnhancement"}}},"NonCollectableType":{"title":"NonCollectableType","enum":["delve_site","delve_site_domain","delve_site_theme","rarity","truth"]},"Npc":{"title":"Npc","type":"object","description":"A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged.","required":["_id","type","name","rank","nature","features","drives","tactics","variants","description","_source"],"properties":{"_id":{"$ref":"#/definitions/NpcId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"npc"},"name":{"$ref":"#/definitions/Label"},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/NpcIdWildcard"}},"rank":{"$ref":"#/definitions/ChallengeRank","description":"The suggested challenge rank for this NPC."},"nature":{"$ref":"#/definitions/NpcNature"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString"},"features":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"drives":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"tactics":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"variants":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcVariant"}}},"description":{"$ref":"#/definitions/MarkdownString"},"quest_starter":{"$ref":"#/definitions/MarkdownString"},"your_truth":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"NpcCollection":{"title":"NpcCollection","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/NpcCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"npc_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/NpcCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/NpcCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Npc"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"NpcCollectionId":{"title":"NpcCollectionId","type":"string","description":"A unique ID representing a NpcCollection object.","pattern":"^npc_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},"NpcCollectionIdWildcard":{"title":"NpcCollectionIdWildcard","type":"string","description":"A wildcarded NpcCollectionId that can be used to match multiple NpcCollection objects.","pattern":"^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},"NpcId":{"title":"NpcId","type":"string","description":"A unique ID representing a Npc object.","pattern":"^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},"NpcIdWildcard":{"title":"NpcIdWildcard","type":"string","description":"A wildcarded NpcId that can be used to match multiple Npc objects.","pattern":"^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},"NpcNature":{"$ref":"#/definitions/Label","title":"NpcNature","description":"A localized category label describing the nature of this NPC.\n\nIn Ironsworn classic, this is probably the singular form of the parent collection's name.\n\nFor Starforged, see the table on p. 258 for examples.","examples":["Ironlander","Firstborn","Animal","Beast","Horror","Anomaly","Creature","Human","Machine","Monster","Vehicle"]},"NpcVariant":{"title":"NpcVariant","type":"object","required":["_id","name","rank","nature","description"],"properties":{"_id":{"$ref":"#/definitions/NpcVariantId","description":"The unique Datasworn ID for this node."},"name":{"$ref":"#/definitions/Label"},"rank":{"$ref":"#/definitions/ChallengeRank","description":"The suggested challenge rank for this NPC."},"nature":{"$ref":"#/definitions/NpcNature"},"summary":{"$ref":"#/definitions/MarkdownString"},"description":{"$ref":"#/definitions/MarkdownString"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."}}},"NpcVariantId":{"title":"NpcVariantId","type":"string","description":"A unique ID representing a NpcVariant object.","pattern":"^npc\\.variant:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"},"NpcVariantIdWildcard":{"title":"NpcVariantIdWildcard","type":"string","description":"A wildcarded NpcVariantId that can be used to match multiple NpcVariant objects.","pattern":"^npc\\.variant:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"},"OracleCollection":{"title":"OracleCollection","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.","required":["oracle_type"],"properties":{"oracle_type":{"enum":["tables","table_shared_rolls","table_shared_text","table_shared_text2","table_shared_text3"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"oracle_type":{"type":"string","const":"tables"}}},"then":{"$ref":"#/definitions/OracleTablesCollection"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_rolls"}}},"then":{"$ref":"#/definitions/OracleTableSharedRolls"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_text"}}},"then":{"$ref":"#/definitions/OracleTableSharedText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_text2"}}},"then":{"$ref":"#/definitions/OracleTableSharedText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_text3"}}},"then":{"$ref":"#/definitions/OracleTableSharedText3"}}]},"OracleCollectionId":{"title":"OracleCollectionId","type":"string","description":"A unique ID representing an OracleCollection object.","pattern":"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},"OracleCollectionIdWildcard":{"title":"OracleCollectionIdWildcard","type":"string","description":"A wildcarded OracleCollectionId that can be used to match multiple OracleCollection objects.","pattern":"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},"OracleColumnText":{"title":"OracleColumnText","type":"object","description":"Represents a single column in an OracleCollection.","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}}}},"OracleColumnText2":{"title":"OracleColumnText2","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text2"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}}}},"OracleColumnText3":{"title":"OracleColumnText3","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text3"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}}}},"OracleDuplicateBehavior":{"title":"OracleDuplicateBehavior","description":"Special roll instructions to use when rolling multiple times on a single oracle.\n\n  - `reroll`: Duplicate results should be re-rolled.\n  - `keep`: Duplicates results should be kept.\n  - `make_it_worse`: Duplicate results should be kept, and they compound to make things worse.","enum":["reroll","keep","make_it_worse"]},"OracleMatchBehavior":{"title":"OracleMatchBehavior","type":"object","required":["text"],"properties":{"text":{"$ref":"#/definitions/MarkdownString"}}},"OracleRoll":{"title":"OracleRoll","type":"object","required":["oracle","dice","auto","duplicates","number_of_rolls"],"properties":{"oracle":{"description":"The ID of the oracle to be rolled. A `null` value indicates that it's a roll on the same table.","default":null,"anyOf":[{"$ref":"#/definitions/OracleRollableId"},{"type":"null"}]},"dice":{"description":"The dice roll to make on the oracle table. Set it to `null` if you just want the table's default.","default":null,"anyOf":[{"$ref":"#/definitions/DiceExpression"},{"type":"null"}]},"auto":{"type":"boolean","description":"Both Ironsworn and Starforged explicitly recommend *against* rolling all details at once. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\" or \"Roll twice\".","default":false},"duplicates":{"$ref":"#/definitions/OracleDuplicateBehavior","description":"Special rules on how to handle duplicate results, when rolling multiple times.","default":"reroll"},"number_of_rolls":{"type":"integer","description":"The number of times to roll.","default":1,"minimum":1}}},"OracleRollable":{"title":"OracleRollable","type":"object","description":"A collection of table rows from which random results may be rolled. This may represent a standalone table, or a column in a larger table.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.","required":["oracle_type"],"properties":{"oracle_type":{"enum":["table_text","table_text2","table_text3","column_text","column_text2","column_text3"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text"}}},"then":{"$ref":"#/definitions/OracleTableText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text2"}}},"then":{"$ref":"#/definitions/OracleTableText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text3"}}},"then":{"$ref":"#/definitions/OracleTableText3"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text"}}},"then":{"$ref":"#/definitions/OracleColumnText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text2"}}},"then":{"$ref":"#/definitions/OracleColumnText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text3"}}},"then":{"$ref":"#/definitions/OracleColumnText3"}}]},"OracleRollableId":{"title":"OracleRollableId","type":"string","description":"A unique ID representing an OracleRollable object.","pattern":"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},"OracleRollableIdWildcard":{"title":"OracleRollableIdWildcard","type":"string","description":"A wildcarded OracleRollableId that can be used to match multiple OracleRollable objects.","pattern":"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},"OracleRollableRow":{"title":"OracleRollableRow","anyOf":[{"$ref":"#/definitions/OracleRollableRowText"},{"$ref":"#/definitions/OracleRollableRowText2"},{"$ref":"#/definitions/OracleRollableRowText3"}]},"OracleRollableRowId":{"title":"OracleRollableRowId","type":"string","description":"A unique ID representing an OracleRollableRow object.","pattern":"^oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"},"OracleRollableRowIdWildcard":{"title":"OracleRollableRowIdWildcard","type":"string","description":"A wildcarded OracleRollableRowId that can be used to match multiple OracleRollableRow objects.","pattern":"^oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"},"OracleRollableRowText":{"title":"OracleRollableRowText","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/AnyOracleRollableRowId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}},"OracleRollableRowText2":{"title":"OracleRollableRowText2","type":"object","description":"Represents a row in an oracle table that provides a secondary text field.","required":["_id","roll","text","text2"],"properties":{"_id":{"$ref":"#/definitions/AnyOracleRollableRowId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"text2":{"description":"The secondary text for this row. Use `null` to represent a cell with a blank or empty vlue.","anyOf":[{"$ref":"#/definitions/MarkdownString"},{"type":"null"}]},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}},"OracleRollableRowText3":{"title":"OracleRollableRowText3","type":"object","description":"Represents a row in an oracle table with 3 text cells.","required":["_id","roll","text","text2","text3"],"properties":{"_id":{"$ref":"#/definitions/AnyOracleRollableRowId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"text2":{"description":"The secondary text for this row. Use `null` to represent a cell with a blank or empty value.","anyOf":[{"$ref":"#/definitions/MarkdownString"},{"type":"null"}]},"text3":{"description":"The tertiary text for this row. Use `null` to represent a cell with a blank or empty vlue.","anyOf":[{"$ref":"#/definitions/MarkdownString"},{"type":"null"}]},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}},"OracleRollableTable":{"title":"OracleRollableTable","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.","required":["oracle_type"],"properties":{"oracle_type":{"enum":["table_text","table_text2","table_text3"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text"}}},"then":{"$ref":"#/definitions/OracleTableText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text2"}}},"then":{"$ref":"#/definitions/OracleTableText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text3"}}},"then":{"$ref":"#/definitions/OracleTableText3"}}]},"OracleRollTemplate":{"title":"OracleRollTemplate","type":"object","description":"Provides string templates that may be used in place of the static row text from `OracleRollableRow#text`, `OracleRollableRow#text2`, and `OracleRollableRow#text3`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{text>some_oracle_rollable_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleRollableRow#text` from the target oracle rollable ID.","releaseStage":"experimental","properties":{"text":{"$ref":"#/definitions/MarkdownTemplateString","description":"A string template that may be used in place of OracleRollableRow#text.","examples":["{{text>oracle_rollable:starforged/faction/name/affiliation}} of the {{text>oracle_rollable:starforged/faction/name/legacy}} {{text>oracle_rollable:starforged/faction/name/identity}}"]},"text2":{"$ref":"#/definitions/MarkdownTemplateString","description":"A string template that may be used in place of OracleRollableRow#text2."},"text3":{"$ref":"#/definitions/MarkdownTemplateString","description":"A string template that may be used in place of OracleRollableRow#text3."}}},"OracleTablesCollection":{"title":"OracleTablesCollection","type":"object","description":"An OracleCollection that represents a category or grouping of tables, which may themselves be `OracleTablesCollection`s.","required":["_id","type","name","oracle_type","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"tables"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleRollableTable"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"OracleTableSharedRolls":{"title":"OracleTableSharedRolls","type":"object","description":"An OracleCollection representing a single table with one roll column and multiple text columns.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_rolls"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","description":"Provides column labels for this table. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row). For all other column labels, see the `name` property of each child `OracleColumn`.","default":{"roll":"Roll","text":"Result"},"required":["roll"],"properties":{"roll":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"OracleTableSharedText":{"title":"OracleTableSharedText","type":"object","description":"An OracleCollection representing a single table with multiple roll columns and one text column.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_text"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","default":{"roll":"Roll","text":"Result"},"required":["text"],"properties":{"text":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"OracleTableSharedText2":{"title":"OracleTableSharedText2","type":"object","description":"An OracleCollection representing a single table with multiple roll columns, and 2 shared text columns.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_text2"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText2"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text2ColumnLabels","type":"object","default":{"roll":"Roll","text":"Result","text2":"Details"},"required":["text","text2"],"properties":{"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"OracleTableSharedText3":{"title":"OracleTableSharedText3","type":"object","description":"An OracleCollection representing a single table with multiple roll columns, and 3 shared text columns.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_text3"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText3"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text3ColumnLabels","type":"object","default":{},"required":["text","text2","text3"],"properties":{"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"},"text3":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"OracleTableText":{"title":"OracleTableText","type":"object","description":"Represents a basic rollable oracle table with one roll column and one text result column.","required":["_id","type","name","oracle_type","dice","column_labels","rows","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","default":{"roll":"Roll","text":"Result"},"required":["roll","text"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"OracleTableText2":{"title":"OracleTableText2","type":"object","description":"A rollable oracle table with one roll column and two text columns.","required":["_id","type","name","oracle_type","dice","column_labels","rows","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text2"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text2ColumnLabels","type":"object","default":{"roll":"Roll","text":"Result","text2":"Details"},"required":["roll","text","text2"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"OracleTableText3":{"title":"OracleTableText3","type":"object","description":"A rollable oracle table with one roll column and 3 text columns.","required":["_id","type","name","oracle_type","dice","column_labels","rows","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text3"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text3ColumnLabels","type":"object","required":["roll","text","text2","text3"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"},"text3":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"PageNumber":{"title":"PageNumber","type":"integer","description":"Represents a page number in a book.","minimum":1},"PartOfSpeech":{"title":"PartOfSpeech","description":"  - `common_noun`: A common noun.\n  - `proper_noun`: A proper noun.\n  - `adjunct_common_noun`: A common noun used as an adjective, to modify another noun.\n  - `adjunct_proper_noun`: A proper noun used as an adjective, to modify another noun.\n  - `verb`: A verb in present tense\n  - `gerund`: Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\". Can function as a noun, an adjective, or a progressive verb.\n  - `adjective`: An adjective.\n  - `attributive_verb`: A verb used as an adjective, to modify a noun.\n  - `adjective_as_proper_noun`: An adjective used as a proper noun.\n  - `common_noun_as_proper_noun`: An common noun used as a proper noun.","releaseStage":"experimental","enum":["common_noun","proper_noun","adjunct_common_noun","adjunct_proper_noun","verb","gerund","adjective","attributive_verb","adjective_as_proper_noun","common_noun_as_proper_noun"]},"ProgressRollMethod":{"title":"ProgressRollMethod","description":"  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `progress_roll`: Make a progress roll on a progress track associated with this move.","enum":["miss","weak_hit","strong_hit","progress_roll"]},"ProgressRollOption":{"title":"ProgressRollOption","type":"object","required":["using"],"properties":{"using":{"type":"string","const":"progress_track"}}},"ProgressTrackTypeInfo":{"title":"ProgressTrackTypeInfo","type":"object","description":"Describes the features of a type of progress track.","required":["category"],"properties":{"category":{"$ref":"#/definitions/Label","description":"A category label for progress tracks of this type.","examples":["Vow","Journey","Combat","Scene Challenge","Expedition","Connection","Delve"]},"controls":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"type":"object","properties":{}}}}}},"Rarity":{"title":"Rarity","type":"object","description":"A rarity, as described in Ironsworn: Delve.","required":["_id","type","name","xp_cost","asset","_source"],"properties":{"_id":{"$ref":"#/definitions/RarityId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"rarity"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"xp_cost":{"type":"integer","description":"From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.","default":3,"minimum":3,"maximum":5},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/RarityIdWildcard"}},"asset":{"$ref":"#/definitions/AssetId","description":"The asset augmented by this rarity."},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}},"RarityId":{"title":"RarityId","type":"string","description":"A unique ID representing a Rarity object.","pattern":"^rarity:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},"RarityIdWildcard":{"title":"RarityIdWildcard","type":"string","description":"A wildcarded RarityId that can be used to match multiple Rarity objects.","pattern":"^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},"RollableValue":{"title":"RollableValue","type":"object","description":"Provides a value like a stat, condition meter, or other number (usually for use in an action roll). The expected value is an integer, or null.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `using` property as a discriminator.","required":["using"],"properties":{"using":{"enum":["stat","condition_meter","asset_control","asset_option","attached_asset_control","attached_asset_option","custom"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"using":{"type":"string","const":"stat"}}},"then":{"$ref":"#/definitions/StatValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"condition_meter"}}},"then":{"$ref":"#/definitions/ConditionMeterValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"asset_control"}}},"then":{"$ref":"#/definitions/AssetControlValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"asset_option"}}},"then":{"$ref":"#/definitions/AssetOptionValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_control"}}},"then":{"$ref":"#/definitions/AttachedAssetControlValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_option"}}},"then":{"$ref":"#/definitions/AttachedAssetOptionValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"custom"}}},"then":{"$ref":"#/definitions/CustomValue"}}]},"Rules":{"title":"Rules","type":"object","description":"Describes rules for player characters in this ruleset, such as stats and condition meters.","releaseStage":"experimental","required":["condition_meters","stats","impacts","special_tracks","tags"],"properties":{"condition_meters":{"type":"object","description":"Describes the standard condition meters used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ConditionMeterRule"}}},"stats":{"type":"object","description":"Describes the standard stats used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/StatRule"}}},"impacts":{"type":"object","description":"Describes the standard impacts/debilities used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ImpactCategory"}}},"special_tracks":{"type":"object","description":"Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SpecialTrackRule"}}},"tags":{"type":"object","remarks":"Deserialize as a dictionary object.","releaseStage":"experimental","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/TagRule"}}}}},"Ruleset":{"title":"Ruleset","type":"object","description":"A standalone Datasworn package that describes its own ruleset.","required":["_id","datasworn_version","type","title","authors","date","license","url","rules","oracles","assets","moves"],"properties":{"_id":{"$ref":"#/definitions/RulesetId"},"datasworn_version":{"type":"string","description":"The version of the Datasworn format used by this data.","const":"0.1.0","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"},"type":{"type":"string","const":"ruleset"},"title":{"$ref":"#/definitions/Label","description":"The title of the source document.","examples":["Ironsworn Rulebook","Ironsworn Assets Master Set","Ironsworn: Delve","Ironsworn: Starforged Rulebook","Ironsworn: Starforged Assets","Sundered Isles"]},"authors":{"type":"array","description":"Lists authors credited by the source material.","items":{"$ref":"#/definitions/AuthorInfo"},"minItems":1},"date":{"type":"string","description":"The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.","remarks":"You may prefer to deserialize this as a Date object.","format":"date","pattern":"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},"license":{"description":"An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.","examples":["https://creativecommons.org/licenses/by/4.0","https://creativecommons.org/licenses/by-nc-sa/4.0"],"anyOf":[{"$ref":"#/definitions/WebUrl"},{"type":"null"}]},"url":{"$ref":"#/definitions/WebUrl","description":"A URL where the source document is available.","examples":["https://ironswornrpg.com"]},"rules":{"$ref":"#/definitions/Rules"},"description":{"$ref":"#/definitions/MarkdownString"},"oracles":{"type":"object","description":"A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleTablesCollection"}}},"assets":{"type":"object","description":"A dictionary object containing asset collections, which contain assets.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetCollection"}}},"atlas":{"type":"object","description":"A dictionary object containing atlas collections, which contain atlas entries.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasCollection"}}},"moves":{"type":"object","description":"A dictionary object containing move categories, which contain moves.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/MoveCategory"}}},"npcs":{"type":"object","description":"A dictionary object containing NPC collections, which contain NPCs.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcCollection"}}},"rarities":{"type":"object","description":"A dictionary object containing rarities, like those presented in Ironsworn: Delve.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Rarity"}}},"delve_sites":{"type":"object","description":"A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSite"}}},"site_domains":{"type":"object","description":"A dictionary object containing delve site domains.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteDomain"}}},"site_themes":{"type":"object","description":"A dictionary object containing delve site themes.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteTheme"}}},"truths":{"type":"object","description":"A dictionary object of truth categories.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Truth"}}}},"additionalProperties":{}},"RulesetId":{"title":"RulesetId","type":"string","description":"The ID of standalone Datasworn package that describes its own ruleset.","examples":["classic","starforged"],"pattern":"^[a-z][a-z0-9_]{3,}$"},"RulesExpansion":{"title":"RulesExpansion","type":"object","description":"Describes rules for player characters in this ruleset, such as stats and condition meters.","releaseStage":"experimental","properties":{"condition_meters":{"type":"object","description":"Describes the standard condition meters used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ConditionMeterRule"}}},"stats":{"type":"object","description":"Describes the standard stats used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/StatRule"}}},"impacts":{"type":"object","description":"Describes the standard impacts/debilities used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ImpactCategory"}}},"special_tracks":{"type":"object","description":"Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SpecialTrackRule"}}},"tags":{"type":"object","remarks":"Deserialize as a dictionary object.","releaseStage":"experimental","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/TagRule"}}}}},"RulesPackage":{"title":"RulesPackage","type":"object","description":"Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `type` property as a discriminator.","required":["type"],"properties":{"type":{"enum":["ruleset","expansion"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"type":{"type":"string","const":"ruleset"}}},"then":{"$ref":"#/definitions/Ruleset"}},{"if":{"properties":{"type":{"type":"string","const":"expansion"}}},"then":{"$ref":"#/definitions/Expansion"}}]},"RulesPackageId":{"title":"RulesPackageId","anyOf":[{"$ref":"#/definitions/RulesetId"},{"$ref":"#/definitions/ExpansionId"}]},"SelectEnhancementField":{"title":"SelectEnhancementField","type":"object","description":"Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles).","remarks":"Semantics are similar to the HTML `<select>` element","required":["label","field_type","choices","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"select_enhancement"},"choices":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `choice_type` property as a discriminator.","required":["choice_type"],"properties":{"choice_type":{"enum":["choice","choice_group"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"choice_type":{"type":"string","const":"choice"}}},"then":{"$ref":"#/definitions/SelectEnhancementFieldChoice"}},{"if":{"properties":{"choice_type":{"type":"string","const":"choice_group"}}},"then":{"$ref":"#/definitions/SelectEnhancementFieldChoiceGroup"}}]}}},"value":{"description":"The key of the currently selected choice from the `choices` property, or `null` if none is selected.","default":null,"anyOf":[{"$ref":"#/definitions/DictKey"},{"type":"null"}]},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}},"SelectEnhancementFieldChoice":{"title":"SelectEnhancementFieldChoice","type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"enhance_asset":{"$ref":"#/definitions/AssetEnhancement"},"enhance_moves":{"type":"array","items":{"$ref":"#/definitions/MoveEnhancement"}}}},"SelectEnhancementFieldChoiceGroup":{"type":"object","description":"Represents a grouping of options in a list of choices.","remarks":"Semantics are similar to the HTML `<optgroup>` element.","required":["name","choice_type","choices"],"properties":{"name":{"$ref":"#/definitions/Label","description":"A label for this option group."},"choice_type":{"type":"string","const":"choice_group"},"choices":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SelectEnhancementFieldChoice"}}}}},"SelectValueField":{"title":"SelectValueField","type":"object","description":"Represents a list of mutually exclusive choices.","remarks":"Semantics are similar to the HTML `<select>` element","required":["label","field_type","choices","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"select_value"},"choices":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SelectValueFieldChoice"}}},"value":{"description":"The key of the currently selected choice from the `choices` property, or `null` if none is selected.","default":null,"anyOf":[{"$ref":"#/definitions/DictKey"},{"type":"null"}]},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}},"SelectValueFieldChoice":{"title":"SelectValueFieldChoice","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `using` property as a discriminator.","required":["using"],"properties":{"using":{"enum":["stat","condition_meter","asset_control","asset_option","attached_asset_control","attached_asset_option","custom"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"using":{"type":"string","const":"stat"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","stat"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of a standard player character stat.","const":"stat"},"stat":{"$ref":"#/definitions/StatKey"}}}},{"if":{"properties":{"using":{"type":"string","const":"condition_meter"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","condition_meter"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of a standard player condition meter.","const":"condition_meter"},"condition_meter":{"$ref":"#/definitions/ConditionMeterKey"}}}},{"if":{"properties":{"using":{"type":"string","const":"asset_control"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","control","assets"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an asset control.","const":"asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.","default":null,"anyOf":[{"type":"array","default":null,"items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}}},{"if":{"properties":{"using":{"type":"string","const":"asset_option"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","option","assets"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an asset option.","const":"asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_control"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","control"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.","const":"attached_asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]}}}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_option"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","option"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an attached asset option.","const":"attached_asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."}}}},{"if":{"properties":{"using":{"type":"string","const":"custom"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"An arbitrary static integer value with a label.","const":"custom"},"value":{"type":"integer"}}}}]},"SemanticVersion":{"title":"SemanticVersion","type":"string","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"},"SourceInfo":{"title":"SourceInfo","type":"object","description":"Metadata describing the original source of this node","required":["title","authors","date","license","url"],"properties":{"title":{"$ref":"#/definitions/Label","description":"The title of the source document.","examples":["Ironsworn Rulebook","Ironsworn Assets Master Set","Ironsworn: Delve","Ironsworn: Starforged Rulebook","Ironsworn: Starforged Assets","Sundered Isles"]},"authors":{"type":"array","description":"Lists authors credited by the source material.","items":{"$ref":"#/definitions/AuthorInfo"},"minItems":1},"date":{"type":"string","description":"The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.","remarks":"You may prefer to deserialize this as a Date object.","format":"date","pattern":"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},"license":{"description":"An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.","examples":["https://creativecommons.org/licenses/by/4.0","https://creativecommons.org/licenses/by-nc-sa/4.0"],"anyOf":[{"$ref":"#/definitions/WebUrl"},{"type":"null"}]},"page":{"$ref":"#/definitions/PageNumber","description":"The page number where this content is described in full."},"url":{"$ref":"#/definitions/WebUrl","description":"A URL where the source document is available.","examples":["https://ironswornrpg.com"]}}},"SpecialTrackRollMethod":{"title":"SpecialTrackRollMethod","description":"  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `player_choice`: The player chooses which roll option to use.\n  - `highest`: Use the roll option with the best/highest value.\n  - `lowest`: Use the roll option with the worst/lowest value.\n  - `all`: Use _every_ roll option at once.","enum":["miss","weak_hit","strong_hit","player_choice","highest","lowest","all"]},"SpecialTrackRule":{"title":"SpecialTrackRule","type":"object","description":"Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).","required":["label","optional","shared","description"],"properties":{"label":{"$ref":"#/definitions/Label","description":"A label for this special track."},"optional":{"type":"boolean","description":"Is this track an optional rule?","default":false},"shared":{"type":"boolean","description":"Is this track shared by all players?","default":false},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this special track."}}},"SpecialTrackType":{"$ref":"#/definitions/DictKey","title":"SpecialTrackType","description":"Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.\n'Canonical' examples:\n  * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\n","examples":["bonds_track","failure_track","quests_legacy","bonds_legacy","discoveries_legacy"]},"StatKey":{"$ref":"#/definitions/DictKey","title":"StatKey","description":"A basic player character stat.","examples":["edge","heart","iron","shadow","wits"]},"StatRule":{"title":"StatRule","type":"object","description":"Describes a standard player character stat.","required":["label","description"],"properties":{"label":{"$ref":"#/definitions/Label","description":"A label for this stat.","examples":["edge"]},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this stat.","examples":["Quickness, agility, and prowess when fighting at a distance."]}}},"StatValueRef":{"title":"StatValueRef","type":"object","description":"A reference to the value of a standard player character stat.","required":["using","stat"],"properties":{"using":{"type":"string","description":"A reference to the value of a standard player character stat.","const":"stat"},"stat":{"$ref":"#/definitions/StatKey"}}},"Suggestions":{"title":"Suggestions","type":"array","releaseStage":"experimental","items":{"$ref":"#/definitions/AnyIdWildcard"}},"SvgImageUrl":{"title":"SvgImageUrl","type":"string","description":"A relative (local) URL pointing to a vector image in the SVG format.","format":"uri-reference","pattern":"\\.svg$"},"Tag":{"title":"Tag","anyOf":[{"type":"boolean"},{"type":"integer"},{"$ref":"#/definitions/DictKey"},{"$ref":"#/definitions/DiceExpression"},{"$ref":"#/definitions/AtlasEntryId"},{"$ref":"#/definitions/NpcId"},{"$ref":"#/definitions/OracleRollableId"},{"$ref":"#/definitions/AssetId"},{"$ref":"#/definitions/MoveId"},{"$ref":"#/definitions/AtlasCollectionId"},{"$ref":"#/definitions/NpcCollectionId"},{"$ref":"#/definitions/OracleCollectionId"},{"$ref":"#/definitions/AssetCollectionId"},{"$ref":"#/definitions/MoveCategoryId"},{"$ref":"#/definitions/DelveSiteId"},{"$ref":"#/definitions/DelveSiteDomainId"},{"$ref":"#/definitions/DelveSiteThemeId"},{"$ref":"#/definitions/RarityId"},{"$ref":"#/definitions/TruthId"},{"type":"array","items":{"anyOf":[{"$ref":"#/definitions/AtlasEntryIdWildcard"},{"$ref":"#/definitions/NpcIdWildcard"},{"$ref":"#/definitions/OracleRollableIdWildcard"},{"$ref":"#/definitions/AssetIdWildcard"},{"$ref":"#/definitions/MoveIdWildcard"},{"$ref":"#/definitions/AtlasCollectionIdWildcard"},{"$ref":"#/definitions/NpcCollectionIdWildcard"},{"$ref":"#/definitions/OracleCollectionIdWildcard"},{"$ref":"#/definitions/AssetCollectionIdWildcard"},{"$ref":"#/definitions/MoveCategoryIdWildcard"},{"$ref":"#/definitions/DelveSiteIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeIdWildcard"},{"$ref":"#/definitions/RarityIdWildcard"},{"$ref":"#/definitions/TruthIdWildcard"}]}}]},"TaggableNodeType":{"title":"TaggableNodeType","anyOf":[{"$ref":"#/definitions/CollectableType"},{"$ref":"#/definitions/NonCollectableType"},{"$ref":"#/definitions/CollectionType"},{"$ref":"#/definitions/EmbedOnlyType"}]},"TagRule":{"title":"TagRule","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `value_type` property as a discriminator.","required":["value_type"],"properties":{"value_type":{"enum":["boolean","integer","atlas_entry","npc","oracle_rollable","asset","move","atlas_collection","npc_collection","oracle_collection","asset_collection","move_category","delve_site","delve_site_domain","delve_site_theme","rarity","truth","enum"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"value_type":{"type":"string","const":"boolean"}}},"then":{"title":"TagRuleBoolean","type":"object","required":["value_type","description","applies_to","array"],"properties":{"value_type":{"type":"string","const":"boolean"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"array":{"type":"boolean","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"integer"}}},"then":{"title":"TagRuleInteger","type":"object","required":["value_type","description","applies_to","array"],"properties":{"value_type":{"type":"string","const":"integer"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"array":{"type":"boolean","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"atlas_entry"}}},"then":{"title":"TagRuleAtlasEntry","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"atlas_entry"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"npc"}}},"then":{"title":"TagRuleNpc","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"npc"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"oracle_rollable"}}},"then":{"title":"TagRuleOracleRollable","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"oracle_rollable"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"asset"}}},"then":{"title":"TagRuleAsset","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"asset"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"move"}}},"then":{"title":"TagRuleMove","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"move"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"atlas_collection"}}},"then":{"title":"TagRuleAtlasCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"atlas_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"npc_collection"}}},"then":{"title":"TagRuleNpcCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"npc_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"oracle_collection"}}},"then":{"title":"TagRuleOracleCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"oracle_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"asset_collection"}}},"then":{"title":"TagRuleAssetCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"asset_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"move_category"}}},"then":{"title":"TagRuleMoveCategory","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"move_category"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"delve_site"}}},"then":{"title":"TagRuleDelveSite","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"delve_site"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"delve_site_domain"}}},"then":{"title":"TagRuleDelveSiteDomain","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"delve_site_domain"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"delve_site_theme"}}},"then":{"title":"TagRuleDelveSiteTheme","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"delve_site_theme"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"rarity"}}},"then":{"title":"TagRuleRarity","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"rarity"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"truth"}}},"then":{"title":"TagRuleTruth","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"truth"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"enum"}}},"then":{"title":"TagRuleEnum","type":"object","required":["value_type","description","applies_to","array","enum"],"properties":{"value_type":{"type":"string","const":"enum"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"array":{"type":"boolean","default":false},"enum":{"type":"array","items":{"$ref":"#/definitions/DictKey"}}}}}]},"Tags":{"title":"Tags","type":"object","description":"A dictionary of tags, keyed by the RulesPackageId that the tags are from.","releaseStage":"experimental","patternProperties":{"^[a-z][a-z0-9_]{3,}$":{"title":"RulesPackageTags","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Tag"}}}},"key":"^[a-z][a-z0-9_]{3,}$"},"TagsCore":{"title":"TagsCore","type":"object","properties":{"requires_allies":{"type":"boolean","description":"This object requires allies to function, and is intended for co-op play, or guided play with allies. It is not appropriate for solo play."},"supernatural":{"type":"boolean","description":"This object is supernatural in nature, and is ideal for settings that feature supernatural or mythic powers."},"technological":{"type":"boolean","description":"This object is technological in nature, and is ideal for settings that feature remarkable technologies."}},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Tag"}}},"TextField":{"title":"TextField","type":"object","description":"Represents an input that accepts plain text.","remarks":"Semantics are similar to the HTML `<input type=\"text\">` element.","required":["label","field_type","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"text"},"value":{"description":"The content of this text input, or `null` if it's empty","default":null,"anyOf":[{"type":"string"},{"type":"null"}]},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}},"TriggerActionRoll":{"title":"TriggerActionRoll","type":"object","description":"Describes trigger conditions for a move that makes an action roll.","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","items":{"$ref":"#/definitions/TriggerActionRollCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}},"TriggerActionRollCondition":{"title":"TriggerActionRollCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"$ref":"#/definitions/ActionRollMethod"},"roll_options":{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/RollableValue"}},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}},"TriggerActionRollConditionEnhancement":{"title":"TriggerActionRollConditionEnhancement","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"description":"A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.","default":null,"anyOf":[{"$ref":"#/definitions/ActionRollMethod"},{"type":"null"}]},"roll_options":{"default":null,"anyOf":[{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/RollableValue"}},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}},"TriggerActionRollEnhancement":{"title":"TriggerActionRollEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerActionRollConditionEnhancement"}}}},"TriggerBy":{"title":"TriggerBy","type":"object","description":"Information on who can activate this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.","required":["ally","player"],"properties":{"ally":{"type":"boolean","description":"Can this trigger be activated by one of the player's allies?","default":false},"player":{"type":"boolean","description":"Can this trigger be activated by the player who owns this?","default":true}}},"TriggerNoRoll":{"title":"TriggerNoRoll","type":"object","description":"Describes trigger conditions for a move that makes no rolls.","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","default":[],"items":{"$ref":"#/definitions/TriggerNoRollCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}},"TriggerNoRollCondition":{"title":"TriggerNoRollCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"type":"null","default":null},"roll_options":{"type":"null","description":"The options available when rolling with this trigger condition.","default":null},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}},"TriggerNoRollEnhancement":{"title":"TriggerNoRollEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerNoRollCondition"}}}},"TriggerProgressRoll":{"title":"TriggerProgressRoll","type":"object","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","items":{"$ref":"#/definitions/TriggerProgressRollCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}},"TriggerProgressRollCondition":{"title":"TriggerProgressRollCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"$ref":"#/definitions/ProgressRollMethod","default":"progress_roll"},"roll_options":{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/ProgressRollOption"}},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}},"TriggerProgressRollConditionEnhancement":{"title":"TriggerProgressRollConditionEnhancement","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"description":"A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.","default":null,"anyOf":[{"$ref":"#/definitions/ProgressRollMethod","default":"progress_roll"},{"type":"null"}]},"roll_options":{"default":null,"anyOf":[{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/ProgressRollOption"}},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}},"TriggerProgressRollEnhancement":{"title":"TriggerProgressRollEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerProgressRollConditionEnhancement"}}}},"TriggerSpecialTrack":{"title":"TriggerSpecialTrack","type":"object","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","items":{"$ref":"#/definitions/TriggerSpecialTrackCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}},"TriggerSpecialTrackCondition":{"title":"TriggerSpecialTrackCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"$ref":"#/definitions/SpecialTrackRollMethod"},"roll_options":{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/TriggerSpecialTrackConditionOption"}},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}},"TriggerSpecialTrackConditionEnhancement":{"title":"TriggerSpecialTrackConditionEnhancement","type":"object","description":"A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged).","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"description":"A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.","default":null,"anyOf":[{"$ref":"#/definitions/SpecialTrackRollMethod"},{"type":"null"}]},"roll_options":{"default":null,"anyOf":[{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/TriggerSpecialTrackConditionOption"}},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}},"TriggerSpecialTrackConditionOption":{"title":"TriggerSpecialTrackConditionOption","type":"object","required":["using"],"properties":{"using":{"$ref":"#/definitions/SpecialTrackType"}}},"TriggerSpecialTrackEnhancement":{"title":"TriggerSpecialTrackEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerSpecialTrackConditionEnhancement"}}}},"Truth":{"title":"Truth","type":"object","description":"A setting truth category.","required":["_id","type","name","dice","options","_source"],"properties":{"_id":{"$ref":"#/definitions/TruthId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"truth"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/TruthIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","default":"1d100"},"options":{"type":"array","rollable":true,"items":{"$ref":"#/definitions/TruthOption"}},"your_character":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"factions":{"type":"array","description":"Prompts for factions related to this truth, like those presented in standard isles. This is presented as a single paragraph in the original text; Datasworn uses an array (one faction prompt per string) to represent them in order to make them more suitable for programmatic use.\n\nThis property is a placeholder and may see signficant changes in v0.2.0.","releaseStage":"experimental","items":{"$ref":"#/definitions/EntityPrompt"}}}},"TruthId":{"title":"TruthId","type":"string","description":"A unique ID representing a Truth object.","pattern":"^truth:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},"TruthIdWildcard":{"title":"TruthIdWildcard","type":"string","description":"A wildcarded TruthId that can be used to match multiple Truth objects.","pattern":"^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},"TruthOption":{"title":"TruthOption","type":"object","required":["_id","roll","description","quest_starter"],"properties":{"_id":{"$ref":"#/definitions/TruthOptionId","description":"The unique Datasworn ID for this node."},"roll":{"$ref":"#/definitions/DiceRange"},"summary":{"$ref":"#/definitions/MarkdownString"},"description":{"$ref":"#/definitions/MarkdownString"},"quest_starter":{"$ref":"#/definitions/MarkdownString"},"oracles":{"title":"TruthOptionOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"TruthOptionOracleRollable"}}},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."}}},"TruthOptionId":{"title":"TruthOptionId","type":"string","description":"A unique ID representing a TruthOption object.","pattern":"^truth\\.option:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},"TruthOptionIdWildcard":{"title":"TruthOptionIdWildcard","type":"string","description":"A wildcarded TruthOptionId that can be used to match multiple TruthOption objects.","pattern":"^truth\\.option:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},"TruthOptionOracleRollableId":{"title":"TruthOptionOracleRollableId","type":"string","description":"A unique ID representing a TruthOptionOracleRollable object.","pattern":"^truth\\.option\\.oracle_rollable:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},"TruthOptionOracleRollableIdWildcard":{"title":"TruthOptionOracleRollableIdWildcard","type":"string","description":"A wildcarded TruthOptionOracleRollableId that can be used to match multiple TruthOptionOracleRollable objects.","pattern":"^truth\\.option\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"},"TruthOptionOracleRollableRowId":{"title":"TruthOptionOracleRollableRowId","type":"string","description":"A unique ID representing a TruthOptionOracleRollableRow object.","pattern":"^truth\\.option\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"},"TruthOptionOracleRollableRowIdWildcard":{"title":"TruthOptionOracleRollableRowIdWildcard","type":"string","description":"A wildcarded TruthOptionOracleRollableRowId that can be used to match multiple TruthOptionOracleRollableRow objects.","pattern":"^truth\\.option\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"},"WebpImageUrl":{"title":"WebpImageUrl","type":"string","description":"A relative (local) URL pointing to a raster image in the WEBP format.","format":"uri-reference","pattern":"\\.webp$"},"WebUrl":{"title":"WebUrl","type":"string","description":"An absolute URL pointing to a website.","format":"uri"}}};
var schema23 = {"title":"RulesPackage","type":"object","description":"Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `type` property as a discriminator.","required":["type"],"properties":{"type":{"enum":["ruleset","expansion"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"type":{"type":"string","const":"ruleset"}}},"then":{"$ref":"#/definitions/Ruleset"}},{"if":{"properties":{"type":{"type":"string","const":"expansion"}}},"then":{"$ref":"#/definitions/Expansion"}}]};
var schema24 = {"title":"Ruleset","type":"object","description":"A standalone Datasworn package that describes its own ruleset.","required":["_id","datasworn_version","type","title","authors","date","license","url","rules","oracles","assets","moves"],"properties":{"_id":{"$ref":"#/definitions/RulesetId"},"datasworn_version":{"type":"string","description":"The version of the Datasworn format used by this data.","const":"0.1.0","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"},"type":{"type":"string","const":"ruleset"},"title":{"$ref":"#/definitions/Label","description":"The title of the source document.","examples":["Ironsworn Rulebook","Ironsworn Assets Master Set","Ironsworn: Delve","Ironsworn: Starforged Rulebook","Ironsworn: Starforged Assets","Sundered Isles"]},"authors":{"type":"array","description":"Lists authors credited by the source material.","items":{"$ref":"#/definitions/AuthorInfo"},"minItems":1},"date":{"type":"string","description":"The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.","remarks":"You may prefer to deserialize this as a Date object.","format":"date","pattern":"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},"license":{"description":"An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.","examples":["https://creativecommons.org/licenses/by/4.0","https://creativecommons.org/licenses/by-nc-sa/4.0"],"anyOf":[{"$ref":"#/definitions/WebUrl"},{"type":"null"}]},"url":{"$ref":"#/definitions/WebUrl","description":"A URL where the source document is available.","examples":["https://ironswornrpg.com"]},"rules":{"$ref":"#/definitions/Rules"},"description":{"$ref":"#/definitions/MarkdownString"},"oracles":{"type":"object","description":"A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleTablesCollection"}}},"assets":{"type":"object","description":"A dictionary object containing asset collections, which contain assets.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetCollection"}}},"atlas":{"type":"object","description":"A dictionary object containing atlas collections, which contain atlas entries.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasCollection"}}},"moves":{"type":"object","description":"A dictionary object containing move categories, which contain moves.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/MoveCategory"}}},"npcs":{"type":"object","description":"A dictionary object containing NPC collections, which contain NPCs.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcCollection"}}},"rarities":{"type":"object","description":"A dictionary object containing rarities, like those presented in Ironsworn: Delve.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Rarity"}}},"delve_sites":{"type":"object","description":"A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSite"}}},"site_domains":{"type":"object","description":"A dictionary object containing delve site domains.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteDomain"}}},"site_themes":{"type":"object","description":"A dictionary object containing delve site themes.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteTheme"}}},"truths":{"type":"object","description":"A dictionary object of truth categories.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Truth"}}}},"additionalProperties":{}};
var schema25 = {"title":"RulesetId","type":"string","description":"The ID of standalone Datasworn package that describes its own ruleset.","examples":["classic","starforged"],"pattern":"^[a-z][a-z0-9_]{3,}$"};
var schema26 = {"title":"Label","type":"string","description":"A localized, player-facing name or label, formatted as plain text. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML).","i18n":true};
var schema30 = {"title":"WebUrl","type":"string","description":"An absolute URL pointing to a website.","format":"uri"};
var schema36 = {"title":"MarkdownString","type":"string","description":"Localized, player-facing text, formatted in Markdown. It is *not* formatted for use \"out of the box\"; it uses some custom syntax, intended to be replaced in whatever way is most appropriate for your implementation.\n\n* `[Link text](datasworn:move:starforged/suffer/pay_the_price)`: A link to the identified object. The ID must conform to the `AnyId` type; no wildcards allowed.\n* `{{table>oracle_rollable:starforged/core/action}}`: the referenced oracle is rendered here in the source material. The ID must conform to the `AnyOracleRollableId` type; no wildcards allowed.\n* `{{table_columns>move:delve/delve/delve_the_depths}}`: Render *all* direct OracleRollable children of the identified node. This can be an OracleCollectionId, or the ID of anything that can have EmbeddedOracleRollables (such as a Move or TruthOption).\n","i18n":true,"format":"markdown"};
var pattern0 = new RegExp("^[a-z][a-z0-9_]{3,}$", "u");
var pattern1 = new RegExp("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$", "u");
var pattern2 = new RegExp("[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))", "u");
var pattern3 = new RegExp("^[a-z][a-z_]*$", "u");
var schema27 = {"title":"AuthorInfo","type":"object","description":"Information on the original creator of this material.","examples":[{"name":"Shawn Tomkin","url":"https://ironswornrpg.com"}],"required":["name"],"properties":{"name":{"$ref":"#/definitions/Label","description":"The name of the author.","examples":["Shawn Tomkin"]},"email":{"$ref":"#/definitions/Email","description":"An optional email contact for the author"},"url":{"$ref":"#/definitions/WebUrl","description":"An optional URL for the author's website."}}};
var schema29 = {"title":"Email","type":"string","description":"An email address.","format":"email"};

function validate23(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.name === undefined) && (missing0 = "name")){
validate23.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.name !== undefined){
var _errs1 = errors;
if(typeof data.name !== "string"){
validate23.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.email !== undefined){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data.email === "string")){
validate23.errors = [{instancePath:instancePath+"/email",schemaPath:"#/definitions/Email/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.url !== undefined){
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(errors === _errs8){
if(!(typeof data.url === "string")){
validate23.errors = [{instancePath:instancePath+"/url",schemaPath:"#/definitions/WebUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate23.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate23.errors = vErrors;
return errors === 0;
}

var schema33 = {"title":"Rules","type":"object","description":"Describes rules for player characters in this ruleset, such as stats and condition meters.","releaseStage":"experimental","required":["condition_meters","stats","impacts","special_tracks","tags"],"properties":{"condition_meters":{"type":"object","description":"Describes the standard condition meters used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ConditionMeterRule"}}},"stats":{"type":"object","description":"Describes the standard stats used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/StatRule"}}},"impacts":{"type":"object","description":"Describes the standard impacts/debilities used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ImpactCategory"}}},"special_tracks":{"type":"object","description":"Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SpecialTrackRule"}}},"tags":{"type":"object","remarks":"Deserialize as a dictionary object.","releaseStage":"experimental","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/TagRule"}}}}};
var schema34 = {"title":"ConditionMeterRule","type":"object","description":"Describes a standard player character condition meter.","required":["label","rollable","min","max","value","shared","description"],"properties":{"label":{"$ref":"#/definitions/Label"},"rollable":{"type":"boolean","description":"Is this meter's `value` usable as a stat in an action roll?","default":true,"const":true},"min":{"type":"integer","description":"The minimum value of this meter.","default":0},"max":{"type":"integer","description":"The maximum value of this meter."},"value":{"type":"integer","description":"The current value of this meter.","default":0},"shared":{"type":"boolean","description":"Is this condition meter shared by all players?","default":false},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this condition meter."}}};

function validate26(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.rollable === undefined){
data.rollable = true;
}
if(data.min === undefined){
data.min = 0;
}
if(data.value === undefined){
data.value = 0;
}
if(data.shared === undefined){
data.shared = false;
}
var missing0;
if((((((((data.label === undefined) && (missing0 = "label")) || ((data.rollable === undefined) && (missing0 = "rollable"))) || ((data.min === undefined) && (missing0 = "min"))) || ((data.max === undefined) && (missing0 = "max"))) || ((data.value === undefined) && (missing0 = "value"))) || ((data.shared === undefined) && (missing0 = "shared"))) || ((data.description === undefined) && (missing0 = "description"))){
validate26.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate26.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data1 = data.rollable;
var _errs4 = errors;
if(typeof data1 !== "boolean"){
validate26.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(true !== data1){
validate26.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/const",keyword:"const",params:{allowedValue: true},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
if(valid0){
var data2 = data.min;
var _errs6 = errors;
if(!((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2)))){
validate26.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs6 === errors;
if(valid0){
if(data.max !== undefined){
var data3 = data.max;
var _errs8 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
validate26.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data4 = data.value;
var _errs10 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
validate26.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs10 === errors;
if(valid0){
var _errs12 = errors;
if(typeof data.shared !== "boolean"){
validate26.errors = [{instancePath:instancePath+"/shared",schemaPath:"#/properties/shared/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs12 === errors;
if(valid0){
if(data.description !== undefined){
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(errors === _errs15){
if(!(typeof data.description === "string")){
validate26.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate26.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate26.errors = vErrors;
return errors === 0;
}

var schema37 = {"title":"StatRule","type":"object","description":"Describes a standard player character stat.","required":["label","description"],"properties":{"label":{"$ref":"#/definitions/Label","description":"A label for this stat.","examples":["edge"]},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this stat.","examples":["Quickness, agility, and prowess when fighting at a distance."]}}};

function validate28(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.label === undefined) && (missing0 = "label")) || ((data.description === undefined) && (missing0 = "description"))){
validate28.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate28.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data.description === "string")){
validate28.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate28.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate28.errors = vErrors;
return errors === 0;
}

var schema40 = {"title":"ImpactCategory","type":"object","description":"Describes a category of standard impacts/debilities.","required":["label","description","contents"],"properties":{"label":{"$ref":"#/definitions/Label","description":"A label for this impact category."},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this impact category."},"contents":{"type":"object","description":"A dictionary object of the Impacts in this category.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ImpactRule"}}}}};
var schema43 = {"title":"ImpactRule","type":"object","description":"Describes a standard impact/debility.","required":["label","prevents_recovery","permanent","shared","description"],"properties":{"label":{"$ref":"#/definitions/Label","description":"The label for this impact."},"prevents_recovery":{"type":"array","description":"Any ruleset condition meters that can't recover when this impact is active.","default":[],"items":{"$ref":"#/definitions/ConditionMeterKey"}},"permanent":{"type":"boolean","description":"Is this impact permanent?","default":false},"shared":{"type":"boolean","description":"Is this impact applied to all players at once?","default":false},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this impact."}}};
var schema45 = {"title":"DictKey","type":"string","description":"A `snake_case` key used in a Datasworn dictionary object.","remarks":"If you need to generate a key from a user-provided label, it's recommended to use a 'slugify' function/library, e.g. https://www.npmjs.com/package/slugify for NodeJS.","pattern":"^[a-z][a-z_]*$"};

function validate31(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.prevents_recovery === undefined){
data.prevents_recovery = [];
}
if(data.permanent === undefined){
data.permanent = false;
}
if(data.shared === undefined){
data.shared = false;
}
var missing0;
if((((((data.label === undefined) && (missing0 = "label")) || ((data.prevents_recovery === undefined) && (missing0 = "prevents_recovery"))) || ((data.permanent === undefined) && (missing0 = "permanent"))) || ((data.shared === undefined) && (missing0 = "shared"))) || ((data.description === undefined) && (missing0 = "description"))){
validate31.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate31.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data1 = data.prevents_recovery;
var _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var data2 = data1[i0];
var _errs6 = errors;
var _errs7 = errors;
if(errors === _errs7){
if(typeof data2 === "string"){
if(!pattern3.test(data2)){
validate31.errors = [{instancePath:instancePath+"/prevents_recovery/" + i0,schemaPath:"#/definitions/ConditionMeterKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate31.errors = [{instancePath:instancePath+"/prevents_recovery/" + i0,schemaPath:"#/definitions/ConditionMeterKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
else {
validate31.errors = [{instancePath:instancePath+"/prevents_recovery",schemaPath:"#/properties/prevents_recovery/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
if(valid0){
var _errs9 = errors;
if(typeof data.permanent !== "boolean"){
validate31.errors = [{instancePath:instancePath+"/permanent",schemaPath:"#/properties/permanent/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs9 === errors;
if(valid0){
var _errs11 = errors;
if(typeof data.shared !== "boolean"){
validate31.errors = [{instancePath:instancePath+"/shared",schemaPath:"#/properties/shared/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs11 === errors;
if(valid0){
if(data.description !== undefined){
var _errs13 = errors;
var _errs14 = errors;
if(errors === _errs14){
if(errors === _errs14){
if(!(typeof data.description === "string")){
validate31.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
else {
validate31.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate31.errors = vErrors;
return errors === 0;
}


function validate30(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
var missing0;
if((((data.label === undefined) && (missing0 = "label")) || ((data.description === undefined) && (missing0 = "description"))) || ((data.contents === undefined) && (missing0 = "contents"))){
validate30.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate30.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data.description === "string")){
validate30.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.contents;
var _errs7 = errors;
if(errors === _errs7){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var valid3 = true;
for(var key0 in data2){
if(pattern3.test(key0)){
var _errs9 = errors;
if(!(validate31(data2[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data2,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate31.errors : vErrors.concat(validate31.errors);
errors = vErrors.length;
}
var valid3 = _errs9 === errors;
if(!valid3){
break;
}
}
}
}
else {
validate30.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs7 === errors;
}
}
}
}
else {
validate30.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate30.errors = vErrors;
return errors === 0;
}

var schema47 = {"title":"SpecialTrackRule","type":"object","description":"Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).","required":["label","optional","shared","description"],"properties":{"label":{"$ref":"#/definitions/Label","description":"A label for this special track."},"optional":{"type":"boolean","description":"Is this track an optional rule?","default":false},"shared":{"type":"boolean","description":"Is this track shared by all players?","default":false},"description":{"$ref":"#/definitions/MarkdownString","description":"A description of this special track."}}};

function validate34(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.optional === undefined){
data.optional = false;
}
if(data.shared === undefined){
data.shared = false;
}
var missing0;
if(((((data.label === undefined) && (missing0 = "label")) || ((data.optional === undefined) && (missing0 = "optional"))) || ((data.shared === undefined) && (missing0 = "shared"))) || ((data.description === undefined) && (missing0 = "description"))){
validate34.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate34.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs4 = errors;
if(typeof data.optional !== "boolean"){
validate34.errors = [{instancePath:instancePath+"/optional",schemaPath:"#/properties/optional/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs4 === errors;
if(valid0){
var _errs6 = errors;
if(typeof data.shared !== "boolean"){
validate34.errors = [{instancePath:instancePath+"/shared",schemaPath:"#/properties/shared/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs6 === errors;
if(valid0){
if(data.description !== undefined){
var _errs8 = errors;
var _errs9 = errors;
if(errors === _errs9){
if(errors === _errs9){
if(!(typeof data.description === "string")){
validate34.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate34.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate34.errors = vErrors;
return errors === 0;
}

var schema50 = {"title":"TagRule","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `value_type` property as a discriminator.","required":["value_type"],"properties":{"value_type":{"enum":["boolean","integer","atlas_entry","npc","oracle_rollable","asset","move","atlas_collection","npc_collection","oracle_collection","asset_collection","move_category","delve_site","delve_site_domain","delve_site_theme","rarity","truth","enum"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"value_type":{"type":"string","const":"boolean"}}},"then":{"title":"TagRuleBoolean","type":"object","required":["value_type","description","applies_to","array"],"properties":{"value_type":{"type":"string","const":"boolean"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"array":{"type":"boolean","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"integer"}}},"then":{"title":"TagRuleInteger","type":"object","required":["value_type","description","applies_to","array"],"properties":{"value_type":{"type":"string","const":"integer"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"array":{"type":"boolean","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"atlas_entry"}}},"then":{"title":"TagRuleAtlasEntry","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"atlas_entry"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"npc"}}},"then":{"title":"TagRuleNpc","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"npc"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"oracle_rollable"}}},"then":{"title":"TagRuleOracleRollable","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"oracle_rollable"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"asset"}}},"then":{"title":"TagRuleAsset","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"asset"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"move"}}},"then":{"title":"TagRuleMove","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"move"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"atlas_collection"}}},"then":{"title":"TagRuleAtlasCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"atlas_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"npc_collection"}}},"then":{"title":"TagRuleNpcCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"npc_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"oracle_collection"}}},"then":{"title":"TagRuleOracleCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"oracle_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"asset_collection"}}},"then":{"title":"TagRuleAssetCollection","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"asset_collection"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"move_category"}}},"then":{"title":"TagRuleMoveCategory","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"move_category"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"delve_site"}}},"then":{"title":"TagRuleDelveSite","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"delve_site"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"delve_site_domain"}}},"then":{"title":"TagRuleDelveSiteDomain","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"delve_site_domain"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"delve_site_theme"}}},"then":{"title":"TagRuleDelveSiteTheme","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"delve_site_theme"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"rarity"}}},"then":{"title":"TagRuleRarity","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"rarity"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"truth"}}},"then":{"title":"TagRuleTruth","type":"object","required":["value_type","description","applies_to","wildcard"],"properties":{"value_type":{"type":"string","const":"truth"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"wildcard":{"type":"boolean","description":"If `true`, this field accepts an array of wildcard ID strings. If `false`, this field accepts a single non-wildcard ID string.","default":false}}}},{"if":{"properties":{"value_type":{"type":"string","const":"enum"}}},"then":{"title":"TagRuleEnum","type":"object","required":["value_type","description","applies_to","array","enum"],"properties":{"value_type":{"type":"string","const":"enum"},"description":{"$ref":"#/definitions/MarkdownString"},"applies_to":{"description":"Types of object that can receive this tag, or `null` if any type of object accepts it.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TaggableNodeType"}},{"type":"null"}]},"array":{"type":"boolean","default":false},"enum":{"type":"array","items":{"$ref":"#/definitions/DictKey"}}}}}]};
var schema52 = {"title":"TaggableNodeType","anyOf":[{"$ref":"#/definitions/CollectableType"},{"$ref":"#/definitions/NonCollectableType"},{"$ref":"#/definitions/CollectionType"},{"$ref":"#/definitions/EmbedOnlyType"}]};
var schema53 = {"title":"CollectableType","enum":["atlas_entry","npc","oracle_rollable","asset","move"]};
var schema54 = {"title":"NonCollectableType","enum":["delve_site","delve_site_domain","delve_site_theme","rarity","truth"]};
var schema55 = {"title":"CollectionType","enum":["atlas_collection","npc_collection","oracle_collection","asset_collection","move_category"]};
var schema56 = {"title":"EmbedOnlyType","enum":["ability","option","row","feature","danger","denizen","variant"]};

function validate37(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs0 = errors;
var valid0 = false;
var _errs1 = errors;
if(!(((((data === "atlas_entry") || (data === "npc")) || (data === "oracle_rollable")) || (data === "asset")) || (data === "move"))){
var err0 = {instancePath:instancePath,schemaPath:"#/definitions/CollectableType/enum",keyword:"enum",params:{allowedValues: schema53.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs3 = errors;
if(!(((((data === "delve_site") || (data === "delve_site_domain")) || (data === "delve_site_theme")) || (data === "rarity")) || (data === "truth"))){
var err1 = {instancePath:instancePath,schemaPath:"#/definitions/NonCollectableType/enum",keyword:"enum",params:{allowedValues: schema54.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs3 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs5 = errors;
if(!(((((data === "atlas_collection") || (data === "npc_collection")) || (data === "oracle_collection")) || (data === "asset_collection")) || (data === "move_category"))){
var err2 = {instancePath:instancePath,schemaPath:"#/definitions/CollectionType/enum",keyword:"enum",params:{allowedValues: schema55.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs5 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs7 = errors;
if(!(((((((data === "ability") || (data === "option")) || (data === "row")) || (data === "feature")) || (data === "danger")) || (data === "denizen")) || (data === "variant"))){
var err3 = {instancePath:instancePath,schemaPath:"#/definitions/EmbedOnlyType/enum",keyword:"enum",params:{allowedValues: schema56.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var _valid0 = _errs7 === errors;
valid0 = valid0 || _valid0;
}
}
}
if(!valid0){
var err4 = {instancePath:instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
validate37.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate37.errors = vErrors;
return errors === 0;
}


function validate36(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data0 = data.value_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("boolean" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(errors === _errs6){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.array === undefined){
data.array = false;
}
var missing0;
if(((((data.value_type === undefined) && (missing0 = "value_type")) || ((data.description === undefined) && (missing0 = "description"))) || ((data.applies_to === undefined) && (missing0 = "applies_to"))) || ((data.array === undefined) && (missing0 = "array"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/0/then/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data1 = data.value_type;
var _errs8 = errors;
if(typeof data1 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/0/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("boolean" !== data1){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/0/then/properties/value_type/const",keyword:"const",params:{allowedValue: "boolean"},message:"must be equal to constant"}];
return false;
}
var valid3 = _errs8 === errors;
}
else {
var valid3 = true;
}
if(valid3){
if(data.description !== undefined){
var _errs10 = errors;
var _errs11 = errors;
if(errors === _errs11){
if(errors === _errs11){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid3 = _errs10 === errors;
}
else {
var valid3 = true;
}
if(valid3){
var data3 = data.applies_to;
var _errs13 = errors;
var _errs14 = errors;
var valid5 = false;
var _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data3)){
var valid6 = true;
var len0 = data3.length;
for(var i0=0; i0<len0; i0++){
var _errs17 = errors;
if(!(validate37(data3[i0], {instancePath:instancePath+"/applies_to/" + i0,parentData:data3,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid6 = _errs17 === errors;
if(!valid6){
break;
}
}
}
else {
var err2 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/0/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid1 = _errs15 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
var _errs18 = errors;
if(data3 !== null){
var err3 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/0/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var _valid1 = _errs18 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
var err4 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/0/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
}
var valid3 = _errs13 === errors;
if(valid3){
var _errs20 = errors;
if(typeof data.array !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/array",schemaPath:"#/allOf/0/then/properties/array/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid3 = _errs20 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/0/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs22 = errors;
var _errs23 = errors;
var valid7 = true;
var _errs24 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data6 = data.value_type;
if(typeof data6 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("integer" !== data6){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs24 === errors;
errors = _errs23;
if(vErrors !== null){
if(_errs23){
vErrors.length = _errs23;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs27 = errors;
if(errors === _errs27){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.array === undefined){
data.array = false;
}
var missing1;
if(((((data.value_type === undefined) && (missing1 = "value_type")) || ((data.description === undefined) && (missing1 = "description"))) || ((data.applies_to === undefined) && (missing1 = "applies_to"))) || ((data.array === undefined) && (missing1 = "array"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/1/then/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data7 = data.value_type;
var _errs29 = errors;
if(typeof data7 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/1/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("integer" !== data7){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/1/then/properties/value_type/const",keyword:"const",params:{allowedValue: "integer"},message:"must be equal to constant"}];
return false;
}
var valid9 = _errs29 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data.description !== undefined){
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(errors === _errs32){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid9 = _errs31 === errors;
}
else {
var valid9 = true;
}
if(valid9){
var data9 = data.applies_to;
var _errs34 = errors;
var _errs35 = errors;
var valid11 = false;
var _errs36 = errors;
if(errors === _errs36){
if(Array.isArray(data9)){
var valid12 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var _errs38 = errors;
if(!(validate37(data9[i1], {instancePath:instancePath+"/applies_to/" + i1,parentData:data9,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid12 = _errs38 === errors;
if(!valid12){
break;
}
}
}
else {
var err8 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/1/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid3 = _errs36 === errors;
valid11 = valid11 || _valid3;
if(!valid11){
var _errs39 = errors;
if(data9 !== null){
var err9 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/1/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
var _valid3 = _errs39 === errors;
valid11 = valid11 || _valid3;
}
if(!valid11){
var err10 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/1/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs35;
if(vErrors !== null){
if(_errs35){
vErrors.length = _errs35;
}
else {
vErrors = null;
}
}
}
var valid9 = _errs34 === errors;
if(valid9){
var _errs41 = errors;
if(typeof data.array !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/array",schemaPath:"#/allOf/1/then/properties/array/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid9 = _errs41 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/1/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid2 = _errs27 === errors;
valid7 = _valid2;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs22 === errors;
if(valid0){
var _errs43 = errors;
var _errs44 = errors;
var valid13 = true;
var _errs45 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data12 = data.value_type;
if(typeof data12 !== "string"){
var err12 = {};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if("atlas_entry" !== data12){
var err13 = {};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
}
var _valid4 = _errs45 === errors;
errors = _errs44;
if(vErrors !== null){
if(_errs44){
vErrors.length = _errs44;
}
else {
vErrors = null;
}
}
if(_valid4){
var _errs48 = errors;
if(errors === _errs48){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing2;
if(((((data.value_type === undefined) && (missing2 = "value_type")) || ((data.description === undefined) && (missing2 = "description"))) || ((data.applies_to === undefined) && (missing2 = "applies_to"))) || ((data.wildcard === undefined) && (missing2 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/2/then/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data13 = data.value_type;
var _errs50 = errors;
if(typeof data13 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/2/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("atlas_entry" !== data13){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/2/then/properties/value_type/const",keyword:"const",params:{allowedValue: "atlas_entry"},message:"must be equal to constant"}];
return false;
}
var valid15 = _errs50 === errors;
}
else {
var valid15 = true;
}
if(valid15){
if(data.description !== undefined){
var _errs52 = errors;
var _errs53 = errors;
if(errors === _errs53){
if(errors === _errs53){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid15 = _errs52 === errors;
}
else {
var valid15 = true;
}
if(valid15){
var data15 = data.applies_to;
var _errs55 = errors;
var _errs56 = errors;
var valid17 = false;
var _errs57 = errors;
if(errors === _errs57){
if(Array.isArray(data15)){
var valid18 = true;
var len2 = data15.length;
for(var i2=0; i2<len2; i2++){
var _errs59 = errors;
if(!(validate37(data15[i2], {instancePath:instancePath+"/applies_to/" + i2,parentData:data15,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid18 = _errs59 === errors;
if(!valid18){
break;
}
}
}
else {
var err14 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/2/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
var _valid5 = _errs57 === errors;
valid17 = valid17 || _valid5;
if(!valid17){
var _errs60 = errors;
if(data15 !== null){
var err15 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/2/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
var _valid5 = _errs60 === errors;
valid17 = valid17 || _valid5;
}
if(!valid17){
var err16 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/2/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs56;
if(vErrors !== null){
if(_errs56){
vErrors.length = _errs56;
}
else {
vErrors = null;
}
}
}
var valid15 = _errs55 === errors;
if(valid15){
var _errs62 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/2/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid15 = _errs62 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/2/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid4 = _errs48 === errors;
valid13 = _valid4;
}
if(!valid13){
var err17 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs43 === errors;
if(valid0){
var _errs64 = errors;
var _errs65 = errors;
var valid19 = true;
var _errs66 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data18 = data.value_type;
if(typeof data18 !== "string"){
var err18 = {};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if("npc" !== data18){
var err19 = {};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
}
var _valid6 = _errs66 === errors;
errors = _errs65;
if(vErrors !== null){
if(_errs65){
vErrors.length = _errs65;
}
else {
vErrors = null;
}
}
if(_valid6){
var _errs69 = errors;
if(errors === _errs69){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing3;
if(((((data.value_type === undefined) && (missing3 = "value_type")) || ((data.description === undefined) && (missing3 = "description"))) || ((data.applies_to === undefined) && (missing3 = "applies_to"))) || ((data.wildcard === undefined) && (missing3 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/3/then/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data19 = data.value_type;
var _errs71 = errors;
if(typeof data19 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/3/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("npc" !== data19){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/3/then/properties/value_type/const",keyword:"const",params:{allowedValue: "npc"},message:"must be equal to constant"}];
return false;
}
var valid21 = _errs71 === errors;
}
else {
var valid21 = true;
}
if(valid21){
if(data.description !== undefined){
var _errs73 = errors;
var _errs74 = errors;
if(errors === _errs74){
if(errors === _errs74){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid21 = _errs73 === errors;
}
else {
var valid21 = true;
}
if(valid21){
var data21 = data.applies_to;
var _errs76 = errors;
var _errs77 = errors;
var valid23 = false;
var _errs78 = errors;
if(errors === _errs78){
if(Array.isArray(data21)){
var valid24 = true;
var len3 = data21.length;
for(var i3=0; i3<len3; i3++){
var _errs80 = errors;
if(!(validate37(data21[i3], {instancePath:instancePath+"/applies_to/" + i3,parentData:data21,parentDataProperty:i3,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid24 = _errs80 === errors;
if(!valid24){
break;
}
}
}
else {
var err20 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/3/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
var _valid7 = _errs78 === errors;
valid23 = valid23 || _valid7;
if(!valid23){
var _errs81 = errors;
if(data21 !== null){
var err21 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/3/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
var _valid7 = _errs81 === errors;
valid23 = valid23 || _valid7;
}
if(!valid23){
var err22 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/3/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs77;
if(vErrors !== null){
if(_errs77){
vErrors.length = _errs77;
}
else {
vErrors = null;
}
}
}
var valid21 = _errs76 === errors;
if(valid21){
var _errs83 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/3/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid21 = _errs83 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/3/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid6 = _errs69 === errors;
valid19 = _valid6;
}
if(!valid19){
var err23 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs64 === errors;
if(valid0){
var _errs85 = errors;
var _errs86 = errors;
var valid25 = true;
var _errs87 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data24 = data.value_type;
if(typeof data24 !== "string"){
var err24 = {};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if("oracle_rollable" !== data24){
var err25 = {};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
}
var _valid8 = _errs87 === errors;
errors = _errs86;
if(vErrors !== null){
if(_errs86){
vErrors.length = _errs86;
}
else {
vErrors = null;
}
}
if(_valid8){
var _errs90 = errors;
if(errors === _errs90){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing4;
if(((((data.value_type === undefined) && (missing4 = "value_type")) || ((data.description === undefined) && (missing4 = "description"))) || ((data.applies_to === undefined) && (missing4 = "applies_to"))) || ((data.wildcard === undefined) && (missing4 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/4/then/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data25 = data.value_type;
var _errs92 = errors;
if(typeof data25 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/4/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data25){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/4/then/properties/value_type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid27 = _errs92 === errors;
}
else {
var valid27 = true;
}
if(valid27){
if(data.description !== undefined){
var _errs94 = errors;
var _errs95 = errors;
if(errors === _errs95){
if(errors === _errs95){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid27 = _errs94 === errors;
}
else {
var valid27 = true;
}
if(valid27){
var data27 = data.applies_to;
var _errs97 = errors;
var _errs98 = errors;
var valid29 = false;
var _errs99 = errors;
if(errors === _errs99){
if(Array.isArray(data27)){
var valid30 = true;
var len4 = data27.length;
for(var i4=0; i4<len4; i4++){
var _errs101 = errors;
if(!(validate37(data27[i4], {instancePath:instancePath+"/applies_to/" + i4,parentData:data27,parentDataProperty:i4,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid30 = _errs101 === errors;
if(!valid30){
break;
}
}
}
else {
var err26 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/4/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
var _valid9 = _errs99 === errors;
valid29 = valid29 || _valid9;
if(!valid29){
var _errs102 = errors;
if(data27 !== null){
var err27 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/4/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
var _valid9 = _errs102 === errors;
valid29 = valid29 || _valid9;
}
if(!valid29){
var err28 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/4/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs98;
if(vErrors !== null){
if(_errs98){
vErrors.length = _errs98;
}
else {
vErrors = null;
}
}
}
var valid27 = _errs97 === errors;
if(valid27){
var _errs104 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/4/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid27 = _errs104 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/4/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid8 = _errs90 === errors;
valid25 = _valid8;
}
if(!valid25){
var err29 = {instancePath:instancePath,schemaPath:"#/allOf/4/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs85 === errors;
if(valid0){
var _errs106 = errors;
var _errs107 = errors;
var valid31 = true;
var _errs108 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data30 = data.value_type;
if(typeof data30 !== "string"){
var err30 = {};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
if("asset" !== data30){
var err31 = {};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
}
var _valid10 = _errs108 === errors;
errors = _errs107;
if(vErrors !== null){
if(_errs107){
vErrors.length = _errs107;
}
else {
vErrors = null;
}
}
if(_valid10){
var _errs111 = errors;
if(errors === _errs111){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing5;
if(((((data.value_type === undefined) && (missing5 = "value_type")) || ((data.description === undefined) && (missing5 = "description"))) || ((data.applies_to === undefined) && (missing5 = "applies_to"))) || ((data.wildcard === undefined) && (missing5 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/5/then/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data31 = data.value_type;
var _errs113 = errors;
if(typeof data31 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/5/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset" !== data31){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/5/then/properties/value_type/const",keyword:"const",params:{allowedValue: "asset"},message:"must be equal to constant"}];
return false;
}
var valid33 = _errs113 === errors;
}
else {
var valid33 = true;
}
if(valid33){
if(data.description !== undefined){
var _errs115 = errors;
var _errs116 = errors;
if(errors === _errs116){
if(errors === _errs116){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid33 = _errs115 === errors;
}
else {
var valid33 = true;
}
if(valid33){
var data33 = data.applies_to;
var _errs118 = errors;
var _errs119 = errors;
var valid35 = false;
var _errs120 = errors;
if(errors === _errs120){
if(Array.isArray(data33)){
var valid36 = true;
var len5 = data33.length;
for(var i5=0; i5<len5; i5++){
var _errs122 = errors;
if(!(validate37(data33[i5], {instancePath:instancePath+"/applies_to/" + i5,parentData:data33,parentDataProperty:i5,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid36 = _errs122 === errors;
if(!valid36){
break;
}
}
}
else {
var err32 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/5/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
var _valid11 = _errs120 === errors;
valid35 = valid35 || _valid11;
if(!valid35){
var _errs123 = errors;
if(data33 !== null){
var err33 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/5/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
var _valid11 = _errs123 === errors;
valid35 = valid35 || _valid11;
}
if(!valid35){
var err34 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/5/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs119;
if(vErrors !== null){
if(_errs119){
vErrors.length = _errs119;
}
else {
vErrors = null;
}
}
}
var valid33 = _errs118 === errors;
if(valid33){
var _errs125 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/5/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid33 = _errs125 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/5/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid10 = _errs111 === errors;
valid31 = _valid10;
}
if(!valid31){
var err35 = {instancePath:instancePath,schemaPath:"#/allOf/5/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs106 === errors;
if(valid0){
var _errs127 = errors;
var _errs128 = errors;
var valid37 = true;
var _errs129 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data36 = data.value_type;
if(typeof data36 !== "string"){
var err36 = {};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
if("move" !== data36){
var err37 = {};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
}
var _valid12 = _errs129 === errors;
errors = _errs128;
if(vErrors !== null){
if(_errs128){
vErrors.length = _errs128;
}
else {
vErrors = null;
}
}
if(_valid12){
var _errs132 = errors;
if(errors === _errs132){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing6;
if(((((data.value_type === undefined) && (missing6 = "value_type")) || ((data.description === undefined) && (missing6 = "description"))) || ((data.applies_to === undefined) && (missing6 = "applies_to"))) || ((data.wildcard === undefined) && (missing6 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/6/then/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data37 = data.value_type;
var _errs134 = errors;
if(typeof data37 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/6/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data37){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/6/then/properties/value_type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid39 = _errs134 === errors;
}
else {
var valid39 = true;
}
if(valid39){
if(data.description !== undefined){
var _errs136 = errors;
var _errs137 = errors;
if(errors === _errs137){
if(errors === _errs137){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid39 = _errs136 === errors;
}
else {
var valid39 = true;
}
if(valid39){
var data39 = data.applies_to;
var _errs139 = errors;
var _errs140 = errors;
var valid41 = false;
var _errs141 = errors;
if(errors === _errs141){
if(Array.isArray(data39)){
var valid42 = true;
var len6 = data39.length;
for(var i6=0; i6<len6; i6++){
var _errs143 = errors;
if(!(validate37(data39[i6], {instancePath:instancePath+"/applies_to/" + i6,parentData:data39,parentDataProperty:i6,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid42 = _errs143 === errors;
if(!valid42){
break;
}
}
}
else {
var err38 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/6/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
var _valid13 = _errs141 === errors;
valid41 = valid41 || _valid13;
if(!valid41){
var _errs144 = errors;
if(data39 !== null){
var err39 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/6/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
var _valid13 = _errs144 === errors;
valid41 = valid41 || _valid13;
}
if(!valid41){
var err40 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/6/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs140;
if(vErrors !== null){
if(_errs140){
vErrors.length = _errs140;
}
else {
vErrors = null;
}
}
}
var valid39 = _errs139 === errors;
if(valid39){
var _errs146 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/6/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid39 = _errs146 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/6/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid12 = _errs132 === errors;
valid37 = _valid12;
}
if(!valid37){
var err41 = {instancePath:instancePath,schemaPath:"#/allOf/6/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs127 === errors;
if(valid0){
var _errs148 = errors;
var _errs149 = errors;
var valid43 = true;
var _errs150 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data42 = data.value_type;
if(typeof data42 !== "string"){
var err42 = {};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
if("atlas_collection" !== data42){
var err43 = {};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
}
var _valid14 = _errs150 === errors;
errors = _errs149;
if(vErrors !== null){
if(_errs149){
vErrors.length = _errs149;
}
else {
vErrors = null;
}
}
if(_valid14){
var _errs153 = errors;
if(errors === _errs153){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing7;
if(((((data.value_type === undefined) && (missing7 = "value_type")) || ((data.description === undefined) && (missing7 = "description"))) || ((data.applies_to === undefined) && (missing7 = "applies_to"))) || ((data.wildcard === undefined) && (missing7 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/7/then/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data43 = data.value_type;
var _errs155 = errors;
if(typeof data43 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/7/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("atlas_collection" !== data43){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/7/then/properties/value_type/const",keyword:"const",params:{allowedValue: "atlas_collection"},message:"must be equal to constant"}];
return false;
}
var valid45 = _errs155 === errors;
}
else {
var valid45 = true;
}
if(valid45){
if(data.description !== undefined){
var _errs157 = errors;
var _errs158 = errors;
if(errors === _errs158){
if(errors === _errs158){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid45 = _errs157 === errors;
}
else {
var valid45 = true;
}
if(valid45){
var data45 = data.applies_to;
var _errs160 = errors;
var _errs161 = errors;
var valid47 = false;
var _errs162 = errors;
if(errors === _errs162){
if(Array.isArray(data45)){
var valid48 = true;
var len7 = data45.length;
for(var i7=0; i7<len7; i7++){
var _errs164 = errors;
if(!(validate37(data45[i7], {instancePath:instancePath+"/applies_to/" + i7,parentData:data45,parentDataProperty:i7,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid48 = _errs164 === errors;
if(!valid48){
break;
}
}
}
else {
var err44 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/7/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
var _valid15 = _errs162 === errors;
valid47 = valid47 || _valid15;
if(!valid47){
var _errs165 = errors;
if(data45 !== null){
var err45 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/7/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
var _valid15 = _errs165 === errors;
valid47 = valid47 || _valid15;
}
if(!valid47){
var err46 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/7/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs161;
if(vErrors !== null){
if(_errs161){
vErrors.length = _errs161;
}
else {
vErrors = null;
}
}
}
var valid45 = _errs160 === errors;
if(valid45){
var _errs167 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/7/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid45 = _errs167 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/7/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid14 = _errs153 === errors;
valid43 = _valid14;
}
if(!valid43){
var err47 = {instancePath:instancePath,schemaPath:"#/allOf/7/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs148 === errors;
if(valid0){
var _errs169 = errors;
var _errs170 = errors;
var valid49 = true;
var _errs171 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data48 = data.value_type;
if(typeof data48 !== "string"){
var err48 = {};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
if("npc_collection" !== data48){
var err49 = {};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
}
var _valid16 = _errs171 === errors;
errors = _errs170;
if(vErrors !== null){
if(_errs170){
vErrors.length = _errs170;
}
else {
vErrors = null;
}
}
if(_valid16){
var _errs174 = errors;
if(errors === _errs174){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing8;
if(((((data.value_type === undefined) && (missing8 = "value_type")) || ((data.description === undefined) && (missing8 = "description"))) || ((data.applies_to === undefined) && (missing8 = "applies_to"))) || ((data.wildcard === undefined) && (missing8 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/8/then/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data49 = data.value_type;
var _errs176 = errors;
if(typeof data49 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/8/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("npc_collection" !== data49){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/8/then/properties/value_type/const",keyword:"const",params:{allowedValue: "npc_collection"},message:"must be equal to constant"}];
return false;
}
var valid51 = _errs176 === errors;
}
else {
var valid51 = true;
}
if(valid51){
if(data.description !== undefined){
var _errs178 = errors;
var _errs179 = errors;
if(errors === _errs179){
if(errors === _errs179){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid51 = _errs178 === errors;
}
else {
var valid51 = true;
}
if(valid51){
var data51 = data.applies_to;
var _errs181 = errors;
var _errs182 = errors;
var valid53 = false;
var _errs183 = errors;
if(errors === _errs183){
if(Array.isArray(data51)){
var valid54 = true;
var len8 = data51.length;
for(var i8=0; i8<len8; i8++){
var _errs185 = errors;
if(!(validate37(data51[i8], {instancePath:instancePath+"/applies_to/" + i8,parentData:data51,parentDataProperty:i8,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid54 = _errs185 === errors;
if(!valid54){
break;
}
}
}
else {
var err50 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/8/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
}
var _valid17 = _errs183 === errors;
valid53 = valid53 || _valid17;
if(!valid53){
var _errs186 = errors;
if(data51 !== null){
var err51 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/8/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
var _valid17 = _errs186 === errors;
valid53 = valid53 || _valid17;
}
if(!valid53){
var err52 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/8/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs182;
if(vErrors !== null){
if(_errs182){
vErrors.length = _errs182;
}
else {
vErrors = null;
}
}
}
var valid51 = _errs181 === errors;
if(valid51){
var _errs188 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/8/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid51 = _errs188 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/8/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid16 = _errs174 === errors;
valid49 = _valid16;
}
if(!valid49){
var err53 = {instancePath:instancePath,schemaPath:"#/allOf/8/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs169 === errors;
if(valid0){
var _errs190 = errors;
var _errs191 = errors;
var valid55 = true;
var _errs192 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data54 = data.value_type;
if(typeof data54 !== "string"){
var err54 = {};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
if("oracle_collection" !== data54){
var err55 = {};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
}
}
var _valid18 = _errs192 === errors;
errors = _errs191;
if(vErrors !== null){
if(_errs191){
vErrors.length = _errs191;
}
else {
vErrors = null;
}
}
if(_valid18){
var _errs195 = errors;
if(errors === _errs195){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing9;
if(((((data.value_type === undefined) && (missing9 = "value_type")) || ((data.description === undefined) && (missing9 = "description"))) || ((data.applies_to === undefined) && (missing9 = "applies_to"))) || ((data.wildcard === undefined) && (missing9 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/9/then/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data55 = data.value_type;
var _errs197 = errors;
if(typeof data55 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/9/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_collection" !== data55){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/9/then/properties/value_type/const",keyword:"const",params:{allowedValue: "oracle_collection"},message:"must be equal to constant"}];
return false;
}
var valid57 = _errs197 === errors;
}
else {
var valid57 = true;
}
if(valid57){
if(data.description !== undefined){
var _errs199 = errors;
var _errs200 = errors;
if(errors === _errs200){
if(errors === _errs200){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid57 = _errs199 === errors;
}
else {
var valid57 = true;
}
if(valid57){
var data57 = data.applies_to;
var _errs202 = errors;
var _errs203 = errors;
var valid59 = false;
var _errs204 = errors;
if(errors === _errs204){
if(Array.isArray(data57)){
var valid60 = true;
var len9 = data57.length;
for(var i9=0; i9<len9; i9++){
var _errs206 = errors;
if(!(validate37(data57[i9], {instancePath:instancePath+"/applies_to/" + i9,parentData:data57,parentDataProperty:i9,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid60 = _errs206 === errors;
if(!valid60){
break;
}
}
}
else {
var err56 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/9/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
}
var _valid19 = _errs204 === errors;
valid59 = valid59 || _valid19;
if(!valid59){
var _errs207 = errors;
if(data57 !== null){
var err57 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/9/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
var _valid19 = _errs207 === errors;
valid59 = valid59 || _valid19;
}
if(!valid59){
var err58 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/9/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs203;
if(vErrors !== null){
if(_errs203){
vErrors.length = _errs203;
}
else {
vErrors = null;
}
}
}
var valid57 = _errs202 === errors;
if(valid57){
var _errs209 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/9/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid57 = _errs209 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/9/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid18 = _errs195 === errors;
valid55 = _valid18;
}
if(!valid55){
var err59 = {instancePath:instancePath,schemaPath:"#/allOf/9/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs190 === errors;
if(valid0){
var _errs211 = errors;
var _errs212 = errors;
var valid61 = true;
var _errs213 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data60 = data.value_type;
if(typeof data60 !== "string"){
var err60 = {};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
if("asset_collection" !== data60){
var err61 = {};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
}
}
var _valid20 = _errs213 === errors;
errors = _errs212;
if(vErrors !== null){
if(_errs212){
vErrors.length = _errs212;
}
else {
vErrors = null;
}
}
if(_valid20){
var _errs216 = errors;
if(errors === _errs216){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing10;
if(((((data.value_type === undefined) && (missing10 = "value_type")) || ((data.description === undefined) && (missing10 = "description"))) || ((data.applies_to === undefined) && (missing10 = "applies_to"))) || ((data.wildcard === undefined) && (missing10 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/10/then/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data61 = data.value_type;
var _errs218 = errors;
if(typeof data61 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/10/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset_collection" !== data61){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/10/then/properties/value_type/const",keyword:"const",params:{allowedValue: "asset_collection"},message:"must be equal to constant"}];
return false;
}
var valid63 = _errs218 === errors;
}
else {
var valid63 = true;
}
if(valid63){
if(data.description !== undefined){
var _errs220 = errors;
var _errs221 = errors;
if(errors === _errs221){
if(errors === _errs221){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid63 = _errs220 === errors;
}
else {
var valid63 = true;
}
if(valid63){
var data63 = data.applies_to;
var _errs223 = errors;
var _errs224 = errors;
var valid65 = false;
var _errs225 = errors;
if(errors === _errs225){
if(Array.isArray(data63)){
var valid66 = true;
var len10 = data63.length;
for(var i10=0; i10<len10; i10++){
var _errs227 = errors;
if(!(validate37(data63[i10], {instancePath:instancePath+"/applies_to/" + i10,parentData:data63,parentDataProperty:i10,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid66 = _errs227 === errors;
if(!valid66){
break;
}
}
}
else {
var err62 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/10/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
}
}
var _valid21 = _errs225 === errors;
valid65 = valid65 || _valid21;
if(!valid65){
var _errs228 = errors;
if(data63 !== null){
var err63 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/10/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err63];
}
else {
vErrors.push(err63);
}
errors++;
}
var _valid21 = _errs228 === errors;
valid65 = valid65 || _valid21;
}
if(!valid65){
var err64 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/10/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err64];
}
else {
vErrors.push(err64);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs224;
if(vErrors !== null){
if(_errs224){
vErrors.length = _errs224;
}
else {
vErrors = null;
}
}
}
var valid63 = _errs223 === errors;
if(valid63){
var _errs230 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/10/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid63 = _errs230 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/10/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid20 = _errs216 === errors;
valid61 = _valid20;
}
if(!valid61){
var err65 = {instancePath:instancePath,schemaPath:"#/allOf/10/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err65];
}
else {
vErrors.push(err65);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs211 === errors;
if(valid0){
var _errs232 = errors;
var _errs233 = errors;
var valid67 = true;
var _errs234 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data66 = data.value_type;
if(typeof data66 !== "string"){
var err66 = {};
if(vErrors === null){
vErrors = [err66];
}
else {
vErrors.push(err66);
}
errors++;
}
if("move_category" !== data66){
var err67 = {};
if(vErrors === null){
vErrors = [err67];
}
else {
vErrors.push(err67);
}
errors++;
}
}
}
var _valid22 = _errs234 === errors;
errors = _errs233;
if(vErrors !== null){
if(_errs233){
vErrors.length = _errs233;
}
else {
vErrors = null;
}
}
if(_valid22){
var _errs237 = errors;
if(errors === _errs237){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing11;
if(((((data.value_type === undefined) && (missing11 = "value_type")) || ((data.description === undefined) && (missing11 = "description"))) || ((data.applies_to === undefined) && (missing11 = "applies_to"))) || ((data.wildcard === undefined) && (missing11 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/11/then/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data67 = data.value_type;
var _errs239 = errors;
if(typeof data67 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/11/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move_category" !== data67){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/11/then/properties/value_type/const",keyword:"const",params:{allowedValue: "move_category"},message:"must be equal to constant"}];
return false;
}
var valid69 = _errs239 === errors;
}
else {
var valid69 = true;
}
if(valid69){
if(data.description !== undefined){
var _errs241 = errors;
var _errs242 = errors;
if(errors === _errs242){
if(errors === _errs242){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid69 = _errs241 === errors;
}
else {
var valid69 = true;
}
if(valid69){
var data69 = data.applies_to;
var _errs244 = errors;
var _errs245 = errors;
var valid71 = false;
var _errs246 = errors;
if(errors === _errs246){
if(Array.isArray(data69)){
var valid72 = true;
var len11 = data69.length;
for(var i11=0; i11<len11; i11++){
var _errs248 = errors;
if(!(validate37(data69[i11], {instancePath:instancePath+"/applies_to/" + i11,parentData:data69,parentDataProperty:i11,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid72 = _errs248 === errors;
if(!valid72){
break;
}
}
}
else {
var err68 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/11/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err68];
}
else {
vErrors.push(err68);
}
errors++;
}
}
var _valid23 = _errs246 === errors;
valid71 = valid71 || _valid23;
if(!valid71){
var _errs249 = errors;
if(data69 !== null){
var err69 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/11/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err69];
}
else {
vErrors.push(err69);
}
errors++;
}
var _valid23 = _errs249 === errors;
valid71 = valid71 || _valid23;
}
if(!valid71){
var err70 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/11/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err70];
}
else {
vErrors.push(err70);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs245;
if(vErrors !== null){
if(_errs245){
vErrors.length = _errs245;
}
else {
vErrors = null;
}
}
}
var valid69 = _errs244 === errors;
if(valid69){
var _errs251 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/11/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid69 = _errs251 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/11/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid22 = _errs237 === errors;
valid67 = _valid22;
}
if(!valid67){
var err71 = {instancePath:instancePath,schemaPath:"#/allOf/11/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err71];
}
else {
vErrors.push(err71);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs232 === errors;
if(valid0){
var _errs253 = errors;
var _errs254 = errors;
var valid73 = true;
var _errs255 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data72 = data.value_type;
if(typeof data72 !== "string"){
var err72 = {};
if(vErrors === null){
vErrors = [err72];
}
else {
vErrors.push(err72);
}
errors++;
}
if("delve_site" !== data72){
var err73 = {};
if(vErrors === null){
vErrors = [err73];
}
else {
vErrors.push(err73);
}
errors++;
}
}
}
var _valid24 = _errs255 === errors;
errors = _errs254;
if(vErrors !== null){
if(_errs254){
vErrors.length = _errs254;
}
else {
vErrors = null;
}
}
if(_valid24){
var _errs258 = errors;
if(errors === _errs258){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing12;
if(((((data.value_type === undefined) && (missing12 = "value_type")) || ((data.description === undefined) && (missing12 = "description"))) || ((data.applies_to === undefined) && (missing12 = "applies_to"))) || ((data.wildcard === undefined) && (missing12 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/12/then/required",keyword:"required",params:{missingProperty: missing12},message:"must have required property '"+missing12+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data73 = data.value_type;
var _errs260 = errors;
if(typeof data73 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/12/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("delve_site" !== data73){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/12/then/properties/value_type/const",keyword:"const",params:{allowedValue: "delve_site"},message:"must be equal to constant"}];
return false;
}
var valid75 = _errs260 === errors;
}
else {
var valid75 = true;
}
if(valid75){
if(data.description !== undefined){
var _errs262 = errors;
var _errs263 = errors;
if(errors === _errs263){
if(errors === _errs263){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid75 = _errs262 === errors;
}
else {
var valid75 = true;
}
if(valid75){
var data75 = data.applies_to;
var _errs265 = errors;
var _errs266 = errors;
var valid77 = false;
var _errs267 = errors;
if(errors === _errs267){
if(Array.isArray(data75)){
var valid78 = true;
var len12 = data75.length;
for(var i12=0; i12<len12; i12++){
var _errs269 = errors;
if(!(validate37(data75[i12], {instancePath:instancePath+"/applies_to/" + i12,parentData:data75,parentDataProperty:i12,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid78 = _errs269 === errors;
if(!valid78){
break;
}
}
}
else {
var err74 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/12/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err74];
}
else {
vErrors.push(err74);
}
errors++;
}
}
var _valid25 = _errs267 === errors;
valid77 = valid77 || _valid25;
if(!valid77){
var _errs270 = errors;
if(data75 !== null){
var err75 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/12/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err75];
}
else {
vErrors.push(err75);
}
errors++;
}
var _valid25 = _errs270 === errors;
valid77 = valid77 || _valid25;
}
if(!valid77){
var err76 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/12/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err76];
}
else {
vErrors.push(err76);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs266;
if(vErrors !== null){
if(_errs266){
vErrors.length = _errs266;
}
else {
vErrors = null;
}
}
}
var valid75 = _errs265 === errors;
if(valid75){
var _errs272 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/12/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid75 = _errs272 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/12/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid24 = _errs258 === errors;
valid73 = _valid24;
}
if(!valid73){
var err77 = {instancePath:instancePath,schemaPath:"#/allOf/12/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err77];
}
else {
vErrors.push(err77);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs253 === errors;
if(valid0){
var _errs274 = errors;
var _errs275 = errors;
var valid79 = true;
var _errs276 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data78 = data.value_type;
if(typeof data78 !== "string"){
var err78 = {};
if(vErrors === null){
vErrors = [err78];
}
else {
vErrors.push(err78);
}
errors++;
}
if("delve_site_domain" !== data78){
var err79 = {};
if(vErrors === null){
vErrors = [err79];
}
else {
vErrors.push(err79);
}
errors++;
}
}
}
var _valid26 = _errs276 === errors;
errors = _errs275;
if(vErrors !== null){
if(_errs275){
vErrors.length = _errs275;
}
else {
vErrors = null;
}
}
if(_valid26){
var _errs279 = errors;
if(errors === _errs279){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing13;
if(((((data.value_type === undefined) && (missing13 = "value_type")) || ((data.description === undefined) && (missing13 = "description"))) || ((data.applies_to === undefined) && (missing13 = "applies_to"))) || ((data.wildcard === undefined) && (missing13 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/13/then/required",keyword:"required",params:{missingProperty: missing13},message:"must have required property '"+missing13+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data79 = data.value_type;
var _errs281 = errors;
if(typeof data79 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/13/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("delve_site_domain" !== data79){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/13/then/properties/value_type/const",keyword:"const",params:{allowedValue: "delve_site_domain"},message:"must be equal to constant"}];
return false;
}
var valid81 = _errs281 === errors;
}
else {
var valid81 = true;
}
if(valid81){
if(data.description !== undefined){
var _errs283 = errors;
var _errs284 = errors;
if(errors === _errs284){
if(errors === _errs284){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid81 = _errs283 === errors;
}
else {
var valid81 = true;
}
if(valid81){
var data81 = data.applies_to;
var _errs286 = errors;
var _errs287 = errors;
var valid83 = false;
var _errs288 = errors;
if(errors === _errs288){
if(Array.isArray(data81)){
var valid84 = true;
var len13 = data81.length;
for(var i13=0; i13<len13; i13++){
var _errs290 = errors;
if(!(validate37(data81[i13], {instancePath:instancePath+"/applies_to/" + i13,parentData:data81,parentDataProperty:i13,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid84 = _errs290 === errors;
if(!valid84){
break;
}
}
}
else {
var err80 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/13/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err80];
}
else {
vErrors.push(err80);
}
errors++;
}
}
var _valid27 = _errs288 === errors;
valid83 = valid83 || _valid27;
if(!valid83){
var _errs291 = errors;
if(data81 !== null){
var err81 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/13/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err81];
}
else {
vErrors.push(err81);
}
errors++;
}
var _valid27 = _errs291 === errors;
valid83 = valid83 || _valid27;
}
if(!valid83){
var err82 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/13/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err82];
}
else {
vErrors.push(err82);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs287;
if(vErrors !== null){
if(_errs287){
vErrors.length = _errs287;
}
else {
vErrors = null;
}
}
}
var valid81 = _errs286 === errors;
if(valid81){
var _errs293 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/13/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid81 = _errs293 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/13/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid26 = _errs279 === errors;
valid79 = _valid26;
}
if(!valid79){
var err83 = {instancePath:instancePath,schemaPath:"#/allOf/13/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err83];
}
else {
vErrors.push(err83);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs274 === errors;
if(valid0){
var _errs295 = errors;
var _errs296 = errors;
var valid85 = true;
var _errs297 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data84 = data.value_type;
if(typeof data84 !== "string"){
var err84 = {};
if(vErrors === null){
vErrors = [err84];
}
else {
vErrors.push(err84);
}
errors++;
}
if("delve_site_theme" !== data84){
var err85 = {};
if(vErrors === null){
vErrors = [err85];
}
else {
vErrors.push(err85);
}
errors++;
}
}
}
var _valid28 = _errs297 === errors;
errors = _errs296;
if(vErrors !== null){
if(_errs296){
vErrors.length = _errs296;
}
else {
vErrors = null;
}
}
if(_valid28){
var _errs300 = errors;
if(errors === _errs300){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing14;
if(((((data.value_type === undefined) && (missing14 = "value_type")) || ((data.description === undefined) && (missing14 = "description"))) || ((data.applies_to === undefined) && (missing14 = "applies_to"))) || ((data.wildcard === undefined) && (missing14 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/14/then/required",keyword:"required",params:{missingProperty: missing14},message:"must have required property '"+missing14+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data85 = data.value_type;
var _errs302 = errors;
if(typeof data85 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/14/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("delve_site_theme" !== data85){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/14/then/properties/value_type/const",keyword:"const",params:{allowedValue: "delve_site_theme"},message:"must be equal to constant"}];
return false;
}
var valid87 = _errs302 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.description !== undefined){
var _errs304 = errors;
var _errs305 = errors;
if(errors === _errs305){
if(errors === _errs305){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid87 = _errs304 === errors;
}
else {
var valid87 = true;
}
if(valid87){
var data87 = data.applies_to;
var _errs307 = errors;
var _errs308 = errors;
var valid89 = false;
var _errs309 = errors;
if(errors === _errs309){
if(Array.isArray(data87)){
var valid90 = true;
var len14 = data87.length;
for(var i14=0; i14<len14; i14++){
var _errs311 = errors;
if(!(validate37(data87[i14], {instancePath:instancePath+"/applies_to/" + i14,parentData:data87,parentDataProperty:i14,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid90 = _errs311 === errors;
if(!valid90){
break;
}
}
}
else {
var err86 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/14/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err86];
}
else {
vErrors.push(err86);
}
errors++;
}
}
var _valid29 = _errs309 === errors;
valid89 = valid89 || _valid29;
if(!valid89){
var _errs312 = errors;
if(data87 !== null){
var err87 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/14/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err87];
}
else {
vErrors.push(err87);
}
errors++;
}
var _valid29 = _errs312 === errors;
valid89 = valid89 || _valid29;
}
if(!valid89){
var err88 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/14/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err88];
}
else {
vErrors.push(err88);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs308;
if(vErrors !== null){
if(_errs308){
vErrors.length = _errs308;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs307 === errors;
if(valid87){
var _errs314 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/14/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid87 = _errs314 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/14/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid28 = _errs300 === errors;
valid85 = _valid28;
}
if(!valid85){
var err89 = {instancePath:instancePath,schemaPath:"#/allOf/14/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err89];
}
else {
vErrors.push(err89);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs295 === errors;
if(valid0){
var _errs316 = errors;
var _errs317 = errors;
var valid91 = true;
var _errs318 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data90 = data.value_type;
if(typeof data90 !== "string"){
var err90 = {};
if(vErrors === null){
vErrors = [err90];
}
else {
vErrors.push(err90);
}
errors++;
}
if("rarity" !== data90){
var err91 = {};
if(vErrors === null){
vErrors = [err91];
}
else {
vErrors.push(err91);
}
errors++;
}
}
}
var _valid30 = _errs318 === errors;
errors = _errs317;
if(vErrors !== null){
if(_errs317){
vErrors.length = _errs317;
}
else {
vErrors = null;
}
}
if(_valid30){
var _errs321 = errors;
if(errors === _errs321){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing15;
if(((((data.value_type === undefined) && (missing15 = "value_type")) || ((data.description === undefined) && (missing15 = "description"))) || ((data.applies_to === undefined) && (missing15 = "applies_to"))) || ((data.wildcard === undefined) && (missing15 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/15/then/required",keyword:"required",params:{missingProperty: missing15},message:"must have required property '"+missing15+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data91 = data.value_type;
var _errs323 = errors;
if(typeof data91 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/15/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("rarity" !== data91){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/15/then/properties/value_type/const",keyword:"const",params:{allowedValue: "rarity"},message:"must be equal to constant"}];
return false;
}
var valid93 = _errs323 === errors;
}
else {
var valid93 = true;
}
if(valid93){
if(data.description !== undefined){
var _errs325 = errors;
var _errs326 = errors;
if(errors === _errs326){
if(errors === _errs326){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid93 = _errs325 === errors;
}
else {
var valid93 = true;
}
if(valid93){
var data93 = data.applies_to;
var _errs328 = errors;
var _errs329 = errors;
var valid95 = false;
var _errs330 = errors;
if(errors === _errs330){
if(Array.isArray(data93)){
var valid96 = true;
var len15 = data93.length;
for(var i15=0; i15<len15; i15++){
var _errs332 = errors;
if(!(validate37(data93[i15], {instancePath:instancePath+"/applies_to/" + i15,parentData:data93,parentDataProperty:i15,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid96 = _errs332 === errors;
if(!valid96){
break;
}
}
}
else {
var err92 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/15/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err92];
}
else {
vErrors.push(err92);
}
errors++;
}
}
var _valid31 = _errs330 === errors;
valid95 = valid95 || _valid31;
if(!valid95){
var _errs333 = errors;
if(data93 !== null){
var err93 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/15/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err93];
}
else {
vErrors.push(err93);
}
errors++;
}
var _valid31 = _errs333 === errors;
valid95 = valid95 || _valid31;
}
if(!valid95){
var err94 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/15/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err94];
}
else {
vErrors.push(err94);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs329;
if(vErrors !== null){
if(_errs329){
vErrors.length = _errs329;
}
else {
vErrors = null;
}
}
}
var valid93 = _errs328 === errors;
if(valid93){
var _errs335 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/15/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid93 = _errs335 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/15/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid30 = _errs321 === errors;
valid91 = _valid30;
}
if(!valid91){
var err95 = {instancePath:instancePath,schemaPath:"#/allOf/15/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err95];
}
else {
vErrors.push(err95);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs316 === errors;
if(valid0){
var _errs337 = errors;
var _errs338 = errors;
var valid97 = true;
var _errs339 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data96 = data.value_type;
if(typeof data96 !== "string"){
var err96 = {};
if(vErrors === null){
vErrors = [err96];
}
else {
vErrors.push(err96);
}
errors++;
}
if("truth" !== data96){
var err97 = {};
if(vErrors === null){
vErrors = [err97];
}
else {
vErrors.push(err97);
}
errors++;
}
}
}
var _valid32 = _errs339 === errors;
errors = _errs338;
if(vErrors !== null){
if(_errs338){
vErrors.length = _errs338;
}
else {
vErrors = null;
}
}
if(_valid32){
var _errs342 = errors;
if(errors === _errs342){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.wildcard === undefined){
data.wildcard = false;
}
var missing16;
if(((((data.value_type === undefined) && (missing16 = "value_type")) || ((data.description === undefined) && (missing16 = "description"))) || ((data.applies_to === undefined) && (missing16 = "applies_to"))) || ((data.wildcard === undefined) && (missing16 = "wildcard"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/16/then/required",keyword:"required",params:{missingProperty: missing16},message:"must have required property '"+missing16+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data97 = data.value_type;
var _errs344 = errors;
if(typeof data97 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/16/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("truth" !== data97){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/16/then/properties/value_type/const",keyword:"const",params:{allowedValue: "truth"},message:"must be equal to constant"}];
return false;
}
var valid99 = _errs344 === errors;
}
else {
var valid99 = true;
}
if(valid99){
if(data.description !== undefined){
var _errs346 = errors;
var _errs347 = errors;
if(errors === _errs347){
if(errors === _errs347){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid99 = _errs346 === errors;
}
else {
var valid99 = true;
}
if(valid99){
var data99 = data.applies_to;
var _errs349 = errors;
var _errs350 = errors;
var valid101 = false;
var _errs351 = errors;
if(errors === _errs351){
if(Array.isArray(data99)){
var valid102 = true;
var len16 = data99.length;
for(var i16=0; i16<len16; i16++){
var _errs353 = errors;
if(!(validate37(data99[i16], {instancePath:instancePath+"/applies_to/" + i16,parentData:data99,parentDataProperty:i16,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid102 = _errs353 === errors;
if(!valid102){
break;
}
}
}
else {
var err98 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/16/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err98];
}
else {
vErrors.push(err98);
}
errors++;
}
}
var _valid33 = _errs351 === errors;
valid101 = valid101 || _valid33;
if(!valid101){
var _errs354 = errors;
if(data99 !== null){
var err99 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/16/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err99];
}
else {
vErrors.push(err99);
}
errors++;
}
var _valid33 = _errs354 === errors;
valid101 = valid101 || _valid33;
}
if(!valid101){
var err100 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/16/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err100];
}
else {
vErrors.push(err100);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs350;
if(vErrors !== null){
if(_errs350){
vErrors.length = _errs350;
}
else {
vErrors = null;
}
}
}
var valid99 = _errs349 === errors;
if(valid99){
var _errs356 = errors;
if(typeof data.wildcard !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/wildcard",schemaPath:"#/allOf/16/then/properties/wildcard/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid99 = _errs356 === errors;
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/16/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid32 = _errs342 === errors;
valid97 = _valid32;
}
if(!valid97){
var err101 = {instancePath:instancePath,schemaPath:"#/allOf/16/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err101];
}
else {
vErrors.push(err101);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs337 === errors;
if(valid0){
var _errs358 = errors;
var _errs359 = errors;
var valid103 = true;
var _errs360 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value_type !== undefined){
var data102 = data.value_type;
if(typeof data102 !== "string"){
var err102 = {};
if(vErrors === null){
vErrors = [err102];
}
else {
vErrors.push(err102);
}
errors++;
}
if("enum" !== data102){
var err103 = {};
if(vErrors === null){
vErrors = [err103];
}
else {
vErrors.push(err103);
}
errors++;
}
}
}
var _valid34 = _errs360 === errors;
errors = _errs359;
if(vErrors !== null){
if(_errs359){
vErrors.length = _errs359;
}
else {
vErrors = null;
}
}
if(_valid34){
var _errs363 = errors;
if(errors === _errs363){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.applies_to === undefined){
data.applies_to = null;
}
if(data.array === undefined){
data.array = false;
}
var missing17;
if((((((data.value_type === undefined) && (missing17 = "value_type")) || ((data.description === undefined) && (missing17 = "description"))) || ((data.applies_to === undefined) && (missing17 = "applies_to"))) || ((data.array === undefined) && (missing17 = "array"))) || ((data.enum === undefined) && (missing17 = "enum"))){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/17/then/required",keyword:"required",params:{missingProperty: missing17},message:"must have required property '"+missing17+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data103 = data.value_type;
var _errs365 = errors;
if(typeof data103 !== "string"){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/17/then/properties/value_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("enum" !== data103){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/allOf/17/then/properties/value_type/const",keyword:"const",params:{allowedValue: "enum"},message:"must be equal to constant"}];
return false;
}
var valid105 = _errs365 === errors;
}
else {
var valid105 = true;
}
if(valid105){
if(data.description !== undefined){
var _errs367 = errors;
var _errs368 = errors;
if(errors === _errs368){
if(errors === _errs368){
if(!(typeof data.description === "string")){
validate36.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid105 = _errs367 === errors;
}
else {
var valid105 = true;
}
if(valid105){
var data105 = data.applies_to;
var _errs370 = errors;
var _errs371 = errors;
var valid107 = false;
var _errs372 = errors;
if(errors === _errs372){
if(Array.isArray(data105)){
var valid108 = true;
var len17 = data105.length;
for(var i17=0; i17<len17; i17++){
var _errs374 = errors;
if(!(validate37(data105[i17], {instancePath:instancePath+"/applies_to/" + i17,parentData:data105,parentDataProperty:i17,rootData:rootData}))){
vErrors = vErrors === null ? validate37.errors : vErrors.concat(validate37.errors);
errors = vErrors.length;
}
var valid108 = _errs374 === errors;
if(!valid108){
break;
}
}
}
else {
var err104 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/17/then/properties/applies_to/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err104];
}
else {
vErrors.push(err104);
}
errors++;
}
}
var _valid35 = _errs372 === errors;
valid107 = valid107 || _valid35;
if(!valid107){
var _errs375 = errors;
if(data105 !== null){
var err105 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/17/then/properties/applies_to/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err105];
}
else {
vErrors.push(err105);
}
errors++;
}
var _valid35 = _errs375 === errors;
valid107 = valid107 || _valid35;
}
if(!valid107){
var err106 = {instancePath:instancePath+"/applies_to",schemaPath:"#/allOf/17/then/properties/applies_to/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err106];
}
else {
vErrors.push(err106);
}
errors++;
validate36.errors = vErrors;
return false;
}
else {
errors = _errs371;
if(vErrors !== null){
if(_errs371){
vErrors.length = _errs371;
}
else {
vErrors = null;
}
}
}
var valid105 = _errs370 === errors;
if(valid105){
var _errs377 = errors;
if(typeof data.array !== "boolean"){
validate36.errors = [{instancePath:instancePath+"/array",schemaPath:"#/allOf/17/then/properties/array/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid105 = _errs377 === errors;
if(valid105){
if(data.enum !== undefined){
var data108 = data.enum;
var _errs379 = errors;
if(errors === _errs379){
if(Array.isArray(data108)){
var valid109 = true;
var len18 = data108.length;
for(var i18=0; i18<len18; i18++){
var data109 = data108[i18];
var _errs381 = errors;
var _errs382 = errors;
if(errors === _errs382){
if(typeof data109 === "string"){
if(!pattern3.test(data109)){
validate36.errors = [{instancePath:instancePath+"/enum/" + i18,schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate36.errors = [{instancePath:instancePath+"/enum/" + i18,schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid109 = _errs381 === errors;
if(!valid109){
break;
}
}
}
else {
validate36.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/allOf/17/then/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid105 = _errs379 === errors;
}
else {
var valid105 = true;
}
}
}
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/allOf/17/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid34 = _errs363 === errors;
valid103 = _valid34;
}
if(!valid103){
var err107 = {instancePath:instancePath,schemaPath:"#/allOf/17/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err107];
}
else {
vErrors.push(err107);
}
errors++;
validate36.errors = vErrors;
return false;
}
var valid0 = _errs358 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing18;
if((data.value_type === undefined) && (missing18 = "value_type")){
validate36.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing18},message:"must have required property '"+missing18+"'"}];
return false;
}
else {
if(data.value_type !== undefined){
var data110 = data.value_type;
if(!((((((((((((((((((data110 === "boolean") || (data110 === "integer")) || (data110 === "atlas_entry")) || (data110 === "npc")) || (data110 === "oracle_rollable")) || (data110 === "asset")) || (data110 === "move")) || (data110 === "atlas_collection")) || (data110 === "npc_collection")) || (data110 === "oracle_collection")) || (data110 === "asset_collection")) || (data110 === "move_category")) || (data110 === "delve_site")) || (data110 === "delve_site_domain")) || (data110 === "delve_site_theme")) || (data110 === "rarity")) || (data110 === "truth")) || (data110 === "enum"))){
validate36.errors = [{instancePath:instancePath+"/value_type",schemaPath:"#/properties/value_type/enum",keyword:"enum",params:{allowedValues: schema50.properties.value_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate36.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate36.errors = vErrors;
return errors === 0;
}


function validate25(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.condition_meters === undefined){
data.condition_meters = {};
}
if(data.stats === undefined){
data.stats = {};
}
if(data.impacts === undefined){
data.impacts = {};
}
if(data.special_tracks === undefined){
data.special_tracks = {};
}
if(data.tags === undefined){
data.tags = {};
}
var missing0;
if((((((data.condition_meters === undefined) && (missing0 = "condition_meters")) || ((data.stats === undefined) && (missing0 = "stats"))) || ((data.impacts === undefined) && (missing0 = "impacts"))) || ((data.special_tracks === undefined) && (missing0 = "special_tracks"))) || ((data.tags === undefined) && (missing0 = "tags"))){
validate25.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
var data0 = data.condition_meters;
var _errs1 = errors;
if(errors === _errs1){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
var valid1 = true;
for(var key0 in data0){
if(pattern3.test(key0)){
var _errs3 = errors;
if(!(validate26(data0[key0], {instancePath:instancePath+"/condition_meters/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data0,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate26.errors : vErrors.concat(validate26.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
}
else {
validate25.errors = [{instancePath:instancePath+"/condition_meters",schemaPath:"#/properties/condition_meters/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
if(valid0){
var data2 = data.stats;
var _errs4 = errors;
if(errors === _errs4){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var valid2 = true;
for(var key1 in data2){
if(pattern3.test(key1)){
var _errs6 = errors;
if(!(validate28(data2[key1], {instancePath:instancePath+"/stats/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data2,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors);
errors = vErrors.length;
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
}
else {
validate25.errors = [{instancePath:instancePath+"/stats",schemaPath:"#/properties/stats/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
if(valid0){
var data4 = data.impacts;
var _errs7 = errors;
if(errors === _errs7){
if(data4 && typeof data4 == "object" && !Array.isArray(data4)){
var valid3 = true;
for(var key2 in data4){
if(pattern3.test(key2)){
var _errs9 = errors;
if(!(validate30(data4[key2], {instancePath:instancePath+"/impacts/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data4,parentDataProperty:key2,rootData:rootData}))){
vErrors = vErrors === null ? validate30.errors : vErrors.concat(validate30.errors);
errors = vErrors.length;
}
var valid3 = _errs9 === errors;
if(!valid3){
break;
}
}
}
}
else {
validate25.errors = [{instancePath:instancePath+"/impacts",schemaPath:"#/properties/impacts/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs7 === errors;
if(valid0){
var data6 = data.special_tracks;
var _errs10 = errors;
if(errors === _errs10){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
var valid4 = true;
for(var key3 in data6){
if(pattern3.test(key3)){
var _errs12 = errors;
if(!(validate34(data6[key3], {instancePath:instancePath+"/special_tracks/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data6,parentDataProperty:key3,rootData:rootData}))){
vErrors = vErrors === null ? validate34.errors : vErrors.concat(validate34.errors);
errors = vErrors.length;
}
var valid4 = _errs12 === errors;
if(!valid4){
break;
}
}
}
}
else {
validate25.errors = [{instancePath:instancePath+"/special_tracks",schemaPath:"#/properties/special_tracks/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
if(valid0){
var data8 = data.tags;
var _errs13 = errors;
if(errors === _errs13){
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
var valid5 = true;
for(var key4 in data8){
if(pattern3.test(key4)){
var _errs15 = errors;
if(!(validate36(data8[key4], {instancePath:instancePath+"/tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data8,parentDataProperty:key4,rootData:rootData}))){
vErrors = vErrors === null ? validate36.errors : vErrors.concat(validate36.errors);
errors = vErrors.length;
}
var valid5 = _errs15 === errors;
if(!valid5){
break;
}
}
}
}
else {
validate25.errors = [{instancePath:instancePath+"/tags",schemaPath:"#/properties/tags/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs13 === errors;
}
}
}
}
}
}
else {
validate25.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate25.errors = vErrors;
return errors === 0;
}

var schema76 = {"title":"OracleTablesCollection","type":"object","description":"An OracleCollection that represents a category or grouping of tables, which may themselves be `OracleTablesCollection`s.","required":["_id","type","name","oracle_type","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"tables"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleRollableTable"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema77 = {"title":"OracleCollectionId","type":"string","description":"A unique ID representing an OracleCollection object.","pattern":"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"};
var schema80 = {"title":"OracleCollectionIdWildcard","type":"string","description":"A wildcarded OracleCollectionId that can be used to match multiple OracleCollection objects.","pattern":"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"};
var schema82 = {"title":"CssColor","type":"string","description":"A CSS color value.","remarks":"See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"};
var schema83 = {"title":"SvgImageUrl","type":"string","description":"A relative (local) URL pointing to a vector image in the SVG format.","format":"uri-reference","pattern":"\\.svg$"};
var schema84 = {"title":"WebpImageUrl","type":"string","description":"A relative (local) URL pointing to a raster image in the WEBP format.","format":"uri-reference","pattern":"\\.webp$"};
var pattern12 = new RegExp("^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$", "u");
var pattern13 = new RegExp("^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$", "u");
var pattern15 = new RegExp("\\.svg$", "u");
var pattern16 = new RegExp("\\.webp$", "u");
var schema87 = {"title":"OracleRollableTable","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.","required":["oracle_type"],"properties":{"oracle_type":{"enum":["table_text","table_text2","table_text3"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text"}}},"then":{"$ref":"#/definitions/OracleTableText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text2"}}},"then":{"$ref":"#/definitions/OracleTableText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text3"}}},"then":{"$ref":"#/definitions/OracleTableText3"}}]};
var schema88 = {"title":"OracleTableText","type":"object","description":"Represents a basic rollable oracle table with one roll column and one text result column.","required":["_id","type","name","oracle_type","dice","column_labels","rows","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","default":{"roll":"Roll","text":"Result"},"required":["roll","text"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema89 = {"title":"OracleRollableId","type":"string","description":"A unique ID representing an OracleRollable object.","pattern":"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"};
var schema92 = {"title":"OracleRollableIdWildcard","type":"string","description":"A wildcarded OracleRollableId that can be used to match multiple OracleRollable objects.","pattern":"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"};
var schema96 = {"title":"DiceExpression","type":"string","description":"A simple dice roll expression with an optional (positive or negative) modifer.","examples":["1d100","1d6+2","2d10"],"pattern":"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"};
var pattern18 = new RegExp("^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$", "u");
var pattern19 = new RegExp("^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$", "u");
var pattern22 = new RegExp("([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?", "u");
var schema97 = {"title":"OracleMatchBehavior","type":"object","required":["text"],"properties":{"text":{"$ref":"#/definitions/MarkdownString"}}};

function validate61(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.text === undefined) && (missing0 = "text")){
validate61.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.text !== undefined){
var _errs2 = errors;
if(errors === _errs2){
if(errors === _errs2){
if(!(typeof data.text === "string")){
validate61.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
}
}
}
else {
validate61.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate61.errors = vErrors;
return errors === 0;
}

var schema99 = {"title":"Suggestions","type":"array","releaseStage":"experimental","items":{"$ref":"#/definitions/AnyIdWildcard"}};
var schema100 = {"title":"AnyIdWildcard","description":"Represents any kind of wildcard ID, including IDs of embedded objects.","anyOf":[{"$ref":"#/definitions/AtlasEntryIdWildcard"},{"$ref":"#/definitions/NpcIdWildcard"},{"$ref":"#/definitions/NpcVariantIdWildcard"},{"$ref":"#/definitions/OracleRollableIdWildcard"},{"$ref":"#/definitions/AssetAbilityOracleRollableIdWildcard"},{"$ref":"#/definitions/MoveOracleRollableIdWildcard"},{"$ref":"#/definitions/TruthOptionOracleRollableIdWildcard"},{"$ref":"#/definitions/OracleRollableRowIdWildcard"},{"$ref":"#/definitions/AssetAbilityOracleRollableRowIdWildcard"},{"$ref":"#/definitions/MoveOracleRollableRowIdWildcard"},{"$ref":"#/definitions/TruthOptionOracleRollableRowIdWildcard"},{"$ref":"#/definitions/AssetIdWildcard"},{"$ref":"#/definitions/AssetAbilityIdWildcard"},{"$ref":"#/definitions/AssetAbilityMoveIdWildcard"},{"$ref":"#/definitions/MoveIdWildcard"},{"$ref":"#/definitions/AtlasCollectionIdWildcard"},{"$ref":"#/definitions/NpcCollectionIdWildcard"},{"$ref":"#/definitions/OracleCollectionIdWildcard"},{"$ref":"#/definitions/AssetCollectionIdWildcard"},{"$ref":"#/definitions/MoveCategoryIdWildcard"},{"$ref":"#/definitions/DelveSiteIdWildcard"},{"$ref":"#/definitions/DelveSiteDenizenIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainFeatureIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeFeatureIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainDangerIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeDangerIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeIdWildcard"},{"$ref":"#/definitions/RarityIdWildcard"},{"$ref":"#/definitions/TruthIdWildcard"},{"$ref":"#/definitions/TruthOptionIdWildcard"}]};
var schema101 = {"title":"AtlasEntryIdWildcard","type":"string","description":"A wildcarded AtlasEntryId that can be used to match multiple AtlasEntry objects.","pattern":"^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"};
var schema102 = {"title":"NpcIdWildcard","type":"string","description":"A wildcarded NpcId that can be used to match multiple Npc objects.","pattern":"^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"};
var schema103 = {"title":"NpcVariantIdWildcard","type":"string","description":"A wildcarded NpcVariantId that can be used to match multiple NpcVariant objects.","pattern":"^npc\\.variant:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"};
var schema105 = {"title":"AssetAbilityOracleRollableIdWildcard","type":"string","description":"A wildcarded AssetAbilityOracleRollableId that can be used to match multiple AssetAbilityOracleRollable objects.","pattern":"^asset\\.ability\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"};
var schema106 = {"title":"MoveOracleRollableIdWildcard","type":"string","description":"A wildcarded MoveOracleRollableId that can be used to match multiple MoveOracleRollable objects.","pattern":"^move\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"};
var schema107 = {"title":"TruthOptionOracleRollableIdWildcard","type":"string","description":"A wildcarded TruthOptionOracleRollableId that can be used to match multiple TruthOptionOracleRollable objects.","pattern":"^truth\\.option\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"};
var schema108 = {"title":"OracleRollableRowIdWildcard","type":"string","description":"A wildcarded OracleRollableRowId that can be used to match multiple OracleRollableRow objects.","pattern":"^oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"};
var schema109 = {"title":"AssetAbilityOracleRollableRowIdWildcard","type":"string","description":"A wildcarded AssetAbilityOracleRollableRowId that can be used to match multiple AssetAbilityOracleRollableRow objects.","pattern":"^asset\\.ability\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"};
var schema110 = {"title":"MoveOracleRollableRowIdWildcard","type":"string","description":"A wildcarded MoveOracleRollableRowId that can be used to match multiple MoveOracleRollableRow objects.","pattern":"^move\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"};
var schema111 = {"title":"TruthOptionOracleRollableRowIdWildcard","type":"string","description":"A wildcarded TruthOptionOracleRollableRowId that can be used to match multiple TruthOptionOracleRollableRow objects.","pattern":"^truth\\.option\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"};
var schema112 = {"title":"AssetIdWildcard","type":"string","description":"A wildcarded AssetId that can be used to match multiple Asset objects.","pattern":"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"};
var schema113 = {"title":"AssetAbilityIdWildcard","type":"string","description":"A wildcarded AssetAbilityId that can be used to match multiple AssetAbility objects.","pattern":"^asset\\.ability:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"};
var schema114 = {"title":"AssetAbilityMoveIdWildcard","type":"string","description":"A wildcarded AssetAbilityMoveId that can be used to match multiple AssetAbilityMove objects.","pattern":"^asset\\.ability\\.move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"};
var schema115 = {"title":"MoveIdWildcard","type":"string","description":"A wildcarded MoveId that can be used to match multiple Move objects.","pattern":"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"};
var schema116 = {"title":"AtlasCollectionIdWildcard","type":"string","description":"A wildcarded AtlasCollectionId that can be used to match multiple AtlasCollection objects.","pattern":"^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"};
var schema117 = {"title":"NpcCollectionIdWildcard","type":"string","description":"A wildcarded NpcCollectionId that can be used to match multiple NpcCollection objects.","pattern":"^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"};
var schema119 = {"title":"AssetCollectionIdWildcard","type":"string","description":"A wildcarded AssetCollectionId that can be used to match multiple AssetCollection objects.","pattern":"^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"};
var schema120 = {"title":"MoveCategoryIdWildcard","type":"string","description":"A wildcarded MoveCategoryId that can be used to match multiple MoveCategory objects.","pattern":"^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"};
var schema121 = {"title":"DelveSiteIdWildcard","type":"string","description":"A wildcarded DelveSiteId that can be used to match multiple DelveSite objects.","pattern":"^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"};
var schema122 = {"title":"DelveSiteDenizenIdWildcard","type":"string","description":"A wildcarded DelveSiteDenizenId that can be used to match multiple DelveSiteDenizen objects.","pattern":"^delve_site\\.denizen:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"};
var schema123 = {"title":"DelveSiteDomainIdWildcard","type":"string","description":"A wildcarded DelveSiteDomainId that can be used to match multiple DelveSiteDomain objects.","pattern":"^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"};
var schema124 = {"title":"DelveSiteDomainFeatureIdWildcard","type":"string","description":"A wildcarded DelveSiteDomainFeatureId that can be used to match multiple DelveSiteDomainFeature objects.","pattern":"^delve_site_domain\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"};
var schema125 = {"title":"DelveSiteThemeFeatureIdWildcard","type":"string","description":"A wildcarded DelveSiteThemeFeatureId that can be used to match multiple DelveSiteThemeFeature objects.","pattern":"^delve_site_theme\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"};
var schema126 = {"title":"DelveSiteDomainDangerIdWildcard","type":"string","description":"A wildcarded DelveSiteDomainDangerId that can be used to match multiple DelveSiteDomainDanger objects.","pattern":"^delve_site_domain\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"};
var schema127 = {"title":"DelveSiteThemeDangerIdWildcard","type":"string","description":"A wildcarded DelveSiteThemeDangerId that can be used to match multiple DelveSiteThemeDanger objects.","pattern":"^delve_site_theme\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"};
var schema128 = {"title":"DelveSiteThemeIdWildcard","type":"string","description":"A wildcarded DelveSiteThemeId that can be used to match multiple DelveSiteTheme objects.","pattern":"^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"};
var schema129 = {"title":"RarityIdWildcard","type":"string","description":"A wildcarded RarityId that can be used to match multiple Rarity objects.","pattern":"^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"};
var schema130 = {"title":"TruthIdWildcard","type":"string","description":"A wildcarded TruthId that can be used to match multiple Truth objects.","pattern":"^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"};
var schema131 = {"title":"TruthOptionIdWildcard","type":"string","description":"A wildcarded TruthOptionId that can be used to match multiple TruthOption objects.","pattern":"^truth\\.option:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"};
var pattern23 = new RegExp("^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$", "u");
var pattern24 = new RegExp("^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$", "u");
var pattern25 = new RegExp("^npc\\.variant:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$", "u");
var pattern27 = new RegExp("^asset\\.ability\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$", "u");
var pattern28 = new RegExp("^move\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$", "u");
var pattern29 = new RegExp("^truth\\.option\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$", "u");
var pattern30 = new RegExp("^oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$", "u");
var pattern31 = new RegExp("^asset\\.ability\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$", "u");
var pattern32 = new RegExp("^move\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$", "u");
var pattern33 = new RegExp("^truth\\.option\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$", "u");
var pattern34 = new RegExp("^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$", "u");
var pattern35 = new RegExp("^asset\\.ability:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$", "u");
var pattern36 = new RegExp("^asset\\.ability\\.move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$", "u");
var pattern37 = new RegExp("^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$", "u");
var pattern38 = new RegExp("^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$", "u");
var pattern39 = new RegExp("^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$", "u");
var pattern41 = new RegExp("^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$", "u");
var pattern42 = new RegExp("^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$", "u");
var pattern43 = new RegExp("^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$", "u");
var pattern44 = new RegExp("^delve_site\\.denizen:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$", "u");
var pattern45 = new RegExp("^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$", "u");
var pattern46 = new RegExp("^delve_site_domain\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$", "u");
var pattern47 = new RegExp("^delve_site_theme\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$", "u");
var pattern48 = new RegExp("^delve_site_domain\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$", "u");
var pattern49 = new RegExp("^delve_site_theme\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$", "u");
var pattern50 = new RegExp("^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$", "u");
var pattern51 = new RegExp("^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$", "u");
var pattern52 = new RegExp("^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$", "u");
var pattern53 = new RegExp("^truth\\.option:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$", "u");

function validate64(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs0 = errors;
var valid0 = false;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data === "string"){
if(!pattern23.test(data)){
var err0 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasEntryIdWildcard/pattern",keyword:"pattern",params:{pattern: "^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasEntryIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(typeof data === "string"){
if(!pattern24.test(data)){
var err2 = {instancePath:instancePath,schemaPath:"#/definitions/NpcIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
var err3 = {instancePath:instancePath,schemaPath:"#/definitions/NpcIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(typeof data === "string"){
if(!pattern25.test(data)){
var err4 = {instancePath:instancePath,schemaPath:"#/definitions/NpcVariantIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc\\.variant:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^npc\\.variant:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
var err5 = {instancePath:instancePath,schemaPath:"#/definitions/NpcVariantIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
var _valid0 = _errs7 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs10 = errors;
var _errs11 = errors;
if(errors === _errs11){
if(typeof data === "string"){
if(!pattern19.test(data)){
var err6 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
else {
var err7 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
var _valid0 = _errs10 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs13 = errors;
var _errs14 = errors;
if(errors === _errs14){
if(typeof data === "string"){
if(!pattern27.test(data)){
var err8 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
else {
var err9 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var _valid0 = _errs13 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data === "string"){
if(!pattern28.test(data)){
var err10 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^move\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
else {
var err11 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
var _valid0 = _errs16 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(typeof data === "string"){
if(!pattern29.test(data)){
var err12 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^truth\\.option\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^truth\\.option\\.oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
else {
var err13 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
var _valid0 = _errs19 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(typeof data === "string"){
if(!pattern30.test(data)){
var err14 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableRowIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"},message:"must match pattern \""+"^oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
else {
var err15 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableRowIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
var _valid0 = _errs22 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(typeof data === "string"){
if(!pattern31.test(data)){
var err16 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableRowIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
else {
var err17 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableRowIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
var _valid0 = _errs25 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(typeof data === "string"){
if(!pattern32.test(data)){
var err18 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableRowIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^move\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
else {
var err19 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableRowIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
var _valid0 = _errs28 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(typeof data === "string"){
if(!pattern33.test(data)){
var err20 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableRowIdWildcard/pattern",keyword:"pattern",params:{pattern: "^truth\\.option\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^truth\\.option\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
else {
var err21 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableRowIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
var _valid0 = _errs31 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs34 = errors;
var _errs35 = errors;
if(errors === _errs35){
if(typeof data === "string"){
if(!pattern34.test(data)){
var err22 = {instancePath:instancePath,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
else {
var err23 = {instancePath:instancePath,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
var _valid0 = _errs34 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs37 = errors;
var _errs38 = errors;
if(errors === _errs38){
if(typeof data === "string"){
if(!pattern35.test(data)){
var err24 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"},message:"must match pattern \""+"^asset\\.ability:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
else {
var err25 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
var _valid0 = _errs37 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs40 = errors;
var _errs41 = errors;
if(errors === _errs41){
if(typeof data === "string"){
if(!pattern36.test(data)){
var err26 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityMoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
else {
var err27 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityMoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
var _valid0 = _errs40 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs43 = errors;
var _errs44 = errors;
if(errors === _errs44){
if(typeof data === "string"){
if(!pattern37.test(data)){
var err28 = {instancePath:instancePath,schemaPath:"#/definitions/MoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
else {
var err29 = {instancePath:instancePath,schemaPath:"#/definitions/MoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
var _valid0 = _errs43 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs46 = errors;
var _errs47 = errors;
if(errors === _errs47){
if(typeof data === "string"){
if(!pattern38.test(data)){
var err30 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
else {
var err31 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
var _valid0 = _errs46 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs49 = errors;
var _errs50 = errors;
if(errors === _errs50){
if(typeof data === "string"){
if(!pattern39.test(data)){
var err32 = {instancePath:instancePath,schemaPath:"#/definitions/NpcCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
else {
var err33 = {instancePath:instancePath,schemaPath:"#/definitions/NpcCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
var _valid0 = _errs49 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs52 = errors;
var _errs53 = errors;
if(errors === _errs53){
if(typeof data === "string"){
if(!pattern13.test(data)){
var err34 = {instancePath:instancePath,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
else {
var err35 = {instancePath:instancePath,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
var _valid0 = _errs52 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs55 = errors;
var _errs56 = errors;
if(errors === _errs56){
if(typeof data === "string"){
if(!pattern41.test(data)){
var err36 = {instancePath:instancePath,schemaPath:"#/definitions/AssetCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
else {
var err37 = {instancePath:instancePath,schemaPath:"#/definitions/AssetCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
var _valid0 = _errs55 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs58 = errors;
var _errs59 = errors;
if(errors === _errs59){
if(typeof data === "string"){
if(!pattern42.test(data)){
var err38 = {instancePath:instancePath,schemaPath:"#/definitions/MoveCategoryIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
else {
var err39 = {instancePath:instancePath,schemaPath:"#/definitions/MoveCategoryIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
var _valid0 = _errs58 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs61 = errors;
var _errs62 = errors;
if(errors === _errs62){
if(typeof data === "string"){
if(!pattern43.test(data)){
var err40 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
else {
var err41 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
var _valid0 = _errs61 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs64 = errors;
var _errs65 = errors;
if(errors === _errs65){
if(typeof data === "string"){
if(!pattern44.test(data)){
var err42 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDenizenIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site\\.denizen:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^delve_site\\.denizen:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
else {
var err43 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDenizenIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
var _valid0 = _errs64 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs67 = errors;
var _errs68 = errors;
if(errors === _errs68){
if(typeof data === "string"){
if(!pattern45.test(data)){
var err44 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
else {
var err45 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
var _valid0 = _errs67 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs70 = errors;
var _errs71 = errors;
if(errors === _errs71){
if(typeof data === "string"){
if(!pattern46.test(data)){
var err46 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainFeatureIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^delve_site_domain\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
else {
var err47 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainFeatureIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
var _valid0 = _errs70 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs73 = errors;
var _errs74 = errors;
if(errors === _errs74){
if(typeof data === "string"){
if(!pattern47.test(data)){
var err48 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeFeatureIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^delve_site_theme\\.feature:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
else {
var err49 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeFeatureIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
var _valid0 = _errs73 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs76 = errors;
var _errs77 = errors;
if(errors === _errs77){
if(typeof data === "string"){
if(!pattern48.test(data)){
var err50 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainDangerIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^delve_site_domain\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
}
else {
var err51 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainDangerIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
var _valid0 = _errs76 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs79 = errors;
var _errs80 = errors;
if(errors === _errs80){
if(typeof data === "string"){
if(!pattern49.test(data)){
var err52 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeDangerIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^delve_site_theme\\.danger:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
else {
var err53 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeDangerIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
var _valid0 = _errs79 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs82 = errors;
var _errs83 = errors;
if(errors === _errs83){
if(typeof data === "string"){
if(!pattern50.test(data)){
var err54 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
else {
var err55 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
}
var _valid0 = _errs82 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs85 = errors;
var _errs86 = errors;
if(errors === _errs86){
if(typeof data === "string"){
if(!pattern51.test(data)){
var err56 = {instancePath:instancePath,schemaPath:"#/definitions/RarityIdWildcard/pattern",keyword:"pattern",params:{pattern: "^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
}
else {
var err57 = {instancePath:instancePath,schemaPath:"#/definitions/RarityIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
}
var _valid0 = _errs85 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs88 = errors;
var _errs89 = errors;
if(errors === _errs89){
if(typeof data === "string"){
if(!pattern52.test(data)){
var err58 = {instancePath:instancePath,schemaPath:"#/definitions/TruthIdWildcard/pattern",keyword:"pattern",params:{pattern: "^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
}
}
else {
var err59 = {instancePath:instancePath,schemaPath:"#/definitions/TruthIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
}
}
var _valid0 = _errs88 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs91 = errors;
var _errs92 = errors;
if(errors === _errs92){
if(typeof data === "string"){
if(!pattern53.test(data)){
var err60 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^truth\\.option:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"},message:"must match pattern \""+"^truth\\.option:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
}
else {
var err61 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
}
var _valid0 = _errs91 === errors;
valid0 = valid0 || _valid0;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
if(!valid0){
var err62 = {instancePath:instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
validate64.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate64.errors = vErrors;
return errors === 0;
}


function validate63(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(Array.isArray(data)){
var valid0 = true;
var len0 = data.length;
for(var i0=0; i0<len0; i0++){
var _errs1 = errors;
if(!(validate64(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate64.errors : vErrors.concat(validate64.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
if(!valid0){
break;
}
}
}
else {
validate63.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
validate63.errors = vErrors;
return errors === 0;
}

var schema132 = {"title":"Tags","type":"object","description":"A dictionary of tags, keyed by the RulesPackageId that the tags are from.","releaseStage":"experimental","patternProperties":{"^[a-z][a-z0-9_]{3,}$":{"title":"RulesPackageTags","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Tag"}}}},"key":"^[a-z][a-z0-9_]{3,}$"};
var schema133 = {"title":"Tag","anyOf":[{"type":"boolean"},{"type":"integer"},{"$ref":"#/definitions/DictKey"},{"$ref":"#/definitions/DiceExpression"},{"$ref":"#/definitions/AtlasEntryId"},{"$ref":"#/definitions/NpcId"},{"$ref":"#/definitions/OracleRollableId"},{"$ref":"#/definitions/AssetId"},{"$ref":"#/definitions/MoveId"},{"$ref":"#/definitions/AtlasCollectionId"},{"$ref":"#/definitions/NpcCollectionId"},{"$ref":"#/definitions/OracleCollectionId"},{"$ref":"#/definitions/AssetCollectionId"},{"$ref":"#/definitions/MoveCategoryId"},{"$ref":"#/definitions/DelveSiteId"},{"$ref":"#/definitions/DelveSiteDomainId"},{"$ref":"#/definitions/DelveSiteThemeId"},{"$ref":"#/definitions/RarityId"},{"$ref":"#/definitions/TruthId"},{"type":"array","items":{"anyOf":[{"$ref":"#/definitions/AtlasEntryIdWildcard"},{"$ref":"#/definitions/NpcIdWildcard"},{"$ref":"#/definitions/OracleRollableIdWildcard"},{"$ref":"#/definitions/AssetIdWildcard"},{"$ref":"#/definitions/MoveIdWildcard"},{"$ref":"#/definitions/AtlasCollectionIdWildcard"},{"$ref":"#/definitions/NpcCollectionIdWildcard"},{"$ref":"#/definitions/OracleCollectionIdWildcard"},{"$ref":"#/definitions/AssetCollectionIdWildcard"},{"$ref":"#/definitions/MoveCategoryIdWildcard"},{"$ref":"#/definitions/DelveSiteIdWildcard"},{"$ref":"#/definitions/DelveSiteDomainIdWildcard"},{"$ref":"#/definitions/DelveSiteThemeIdWildcard"},{"$ref":"#/definitions/RarityIdWildcard"},{"$ref":"#/definitions/TruthIdWildcard"}]}}]};
var schema136 = {"title":"AtlasEntryId","type":"string","description":"A unique ID representing an AtlasEntry object.","pattern":"^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"};
var schema137 = {"title":"NpcId","type":"string","description":"A unique ID representing a Npc object.","pattern":"^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"};
var schema139 = {"title":"AssetId","type":"string","description":"A unique ID representing an Asset object.","pattern":"^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"};
var schema140 = {"title":"MoveId","type":"string","description":"A unique ID representing a Move object.","pattern":"^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"};
var schema141 = {"title":"AtlasCollectionId","type":"string","description":"A unique ID representing an AtlasCollection object.","pattern":"^atlas_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"};
var schema142 = {"title":"NpcCollectionId","type":"string","description":"A unique ID representing a NpcCollection object.","pattern":"^npc_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"};
var schema144 = {"title":"AssetCollectionId","type":"string","description":"A unique ID representing an AssetCollection object.","pattern":"^asset_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"};
var schema145 = {"title":"MoveCategoryId","type":"string","description":"A unique ID representing a MoveCategory object.","pattern":"^move_category:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"};
var schema146 = {"title":"DelveSiteId","type":"string","description":"A unique ID representing a DelveSite object.","pattern":"^delve_site:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"};
var schema147 = {"title":"DelveSiteDomainId","type":"string","description":"A unique ID representing a DelveSiteDomain object.","pattern":"^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"};
var schema148 = {"title":"DelveSiteThemeId","type":"string","description":"A unique ID representing a DelveSiteTheme object.","pattern":"^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"};
var schema149 = {"title":"RarityId","type":"string","description":"A unique ID representing a Rarity object.","pattern":"^rarity:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"};
var schema150 = {"title":"TruthId","type":"string","description":"A unique ID representing a Truth object.","pattern":"^truth:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"};
var pattern58 = new RegExp("^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$", "u");
var pattern59 = new RegExp("^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$", "u");
var pattern61 = new RegExp("^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$", "u");
var pattern62 = new RegExp("^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$", "u");
var pattern63 = new RegExp("^atlas_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$", "u");
var pattern64 = new RegExp("^npc_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$", "u");
var pattern66 = new RegExp("^asset_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$", "u");
var pattern67 = new RegExp("^move_category:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$", "u");
var pattern68 = new RegExp("^delve_site:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$", "u");
var pattern69 = new RegExp("^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$", "u");
var pattern70 = new RegExp("^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$", "u");
var pattern71 = new RegExp("^rarity:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$", "u");
var pattern72 = new RegExp("^truth:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$", "u");

function validate68(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs0 = errors;
var valid0 = false;
var _errs1 = errors;
if(typeof data !== "boolean"){
var err0 = {instancePath:instancePath,schemaPath:"#/anyOf/0/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs3 = errors;
if(!((typeof data == "number") && (!(data % 1) && !isNaN(data)))){
var err1 = {instancePath:instancePath,schemaPath:"#/anyOf/1/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs3 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs5 = errors;
var _errs6 = errors;
if(errors === _errs6){
if(typeof data === "string"){
if(!pattern3.test(data)){
var err2 = {instancePath:instancePath,schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
var err3 = {instancePath:instancePath,schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs8 = errors;
var _errs9 = errors;
if(errors === _errs9){
if(typeof data === "string"){
if(!pattern22.test(data)){
var err4 = {instancePath:instancePath,schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
var err5 = {instancePath:instancePath,schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
var _valid0 = _errs8 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs11 = errors;
var _errs12 = errors;
if(errors === _errs12){
if(typeof data === "string"){
if(!pattern58.test(data)){
var err6 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasEntryId/pattern",keyword:"pattern",params:{pattern: "^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
else {
var err7 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasEntryId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
var _valid0 = _errs11 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data === "string"){
if(!pattern59.test(data)){
var err8 = {instancePath:instancePath,schemaPath:"#/definitions/NpcId/pattern",keyword:"pattern",params:{pattern: "^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
else {
var err9 = {instancePath:instancePath,schemaPath:"#/definitions/NpcId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var _valid0 = _errs14 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(typeof data === "string"){
if(!pattern18.test(data)){
var err10 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
else {
var err11 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
}
var _valid0 = _errs17 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(typeof data === "string"){
if(!pattern61.test(data)){
var err12 = {instancePath:instancePath,schemaPath:"#/definitions/AssetId/pattern",keyword:"pattern",params:{pattern: "^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
else {
var err13 = {instancePath:instancePath,schemaPath:"#/definitions/AssetId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
var _valid0 = _errs20 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data === "string"){
if(!pattern62.test(data)){
var err14 = {instancePath:instancePath,schemaPath:"#/definitions/MoveId/pattern",keyword:"pattern",params:{pattern: "^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
else {
var err15 = {instancePath:instancePath,schemaPath:"#/definitions/MoveId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
var _valid0 = _errs23 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs26 = errors;
var _errs27 = errors;
if(errors === _errs27){
if(typeof data === "string"){
if(!pattern63.test(data)){
var err16 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasCollectionId/pattern",keyword:"pattern",params:{pattern: "^atlas_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^atlas_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
else {
var err17 = {instancePath:instancePath,schemaPath:"#/definitions/AtlasCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
var _valid0 = _errs26 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs29 = errors;
var _errs30 = errors;
if(errors === _errs30){
if(typeof data === "string"){
if(!pattern64.test(data)){
var err18 = {instancePath:instancePath,schemaPath:"#/definitions/NpcCollectionId/pattern",keyword:"pattern",params:{pattern: "^npc_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^npc_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
else {
var err19 = {instancePath:instancePath,schemaPath:"#/definitions/NpcCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
var _valid0 = _errs29 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(typeof data === "string"){
if(!pattern12.test(data)){
var err20 = {instancePath:instancePath,schemaPath:"#/definitions/OracleCollectionId/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
else {
var err21 = {instancePath:instancePath,schemaPath:"#/definitions/OracleCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
var _valid0 = _errs32 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs35 = errors;
var _errs36 = errors;
if(errors === _errs36){
if(typeof data === "string"){
if(!pattern66.test(data)){
var err22 = {instancePath:instancePath,schemaPath:"#/definitions/AssetCollectionId/pattern",keyword:"pattern",params:{pattern: "^asset_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^asset_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
else {
var err23 = {instancePath:instancePath,schemaPath:"#/definitions/AssetCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
var _valid0 = _errs35 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs38 = errors;
var _errs39 = errors;
if(errors === _errs39){
if(typeof data === "string"){
if(!pattern67.test(data)){
var err24 = {instancePath:instancePath,schemaPath:"#/definitions/MoveCategoryId/pattern",keyword:"pattern",params:{pattern: "^move_category:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^move_category:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
else {
var err25 = {instancePath:instancePath,schemaPath:"#/definitions/MoveCategoryId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
var _valid0 = _errs38 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs41 = errors;
var _errs42 = errors;
if(errors === _errs42){
if(typeof data === "string"){
if(!pattern68.test(data)){
var err26 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteId/pattern",keyword:"pattern",params:{pattern: "^delve_site:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
else {
var err27 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
}
var _valid0 = _errs41 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs44 = errors;
var _errs45 = errors;
if(errors === _errs45){
if(typeof data === "string"){
if(!pattern69.test(data)){
var err28 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainId/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
else {
var err29 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteDomainId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
var _valid0 = _errs44 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs47 = errors;
var _errs48 = errors;
if(errors === _errs48){
if(typeof data === "string"){
if(!pattern70.test(data)){
var err30 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeId/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
else {
var err31 = {instancePath:instancePath,schemaPath:"#/definitions/DelveSiteThemeId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
}
var _valid0 = _errs47 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs50 = errors;
var _errs51 = errors;
if(errors === _errs51){
if(typeof data === "string"){
if(!pattern71.test(data)){
var err32 = {instancePath:instancePath,schemaPath:"#/definitions/RarityId/pattern",keyword:"pattern",params:{pattern: "^rarity:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^rarity:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
}
else {
var err33 = {instancePath:instancePath,schemaPath:"#/definitions/RarityId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
}
var _valid0 = _errs50 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs53 = errors;
var _errs54 = errors;
if(errors === _errs54){
if(typeof data === "string"){
if(!pattern72.test(data)){
var err34 = {instancePath:instancePath,schemaPath:"#/definitions/TruthId/pattern",keyword:"pattern",params:{pattern: "^truth:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^truth:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
else {
var err35 = {instancePath:instancePath,schemaPath:"#/definitions/TruthId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
}
var _valid0 = _errs53 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs56 = errors;
if(errors === _errs56){
if(Array.isArray(data)){
var valid18 = true;
var len0 = data.length;
for(var i0=0; i0<len0; i0++){
var data0 = data[i0];
var _errs58 = errors;
var _errs59 = errors;
var valid19 = false;
var _errs60 = errors;
var _errs61 = errors;
if(errors === _errs61){
if(typeof data0 === "string"){
if(!pattern23.test(data0)){
var err36 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AtlasEntryIdWildcard/pattern",keyword:"pattern",params:{pattern: "^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
else {
var err37 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AtlasEntryIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
}
var _valid1 = _errs60 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs63 = errors;
var _errs64 = errors;
if(errors === _errs64){
if(typeof data0 === "string"){
if(!pattern24.test(data0)){
var err38 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/NpcIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
}
else {
var err39 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/NpcIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
var _valid1 = _errs63 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs66 = errors;
var _errs67 = errors;
if(errors === _errs67){
if(typeof data0 === "string"){
if(!pattern19.test(data0)){
var err40 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
}
else {
var err41 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
}
var _valid1 = _errs66 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs69 = errors;
var _errs70 = errors;
if(errors === _errs70){
if(typeof data0 === "string"){
if(!pattern34.test(data0)){
var err42 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
else {
var err43 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
}
var _valid1 = _errs69 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs72 = errors;
var _errs73 = errors;
if(errors === _errs73){
if(typeof data0 === "string"){
if(!pattern37.test(data0)){
var err44 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/MoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
}
else {
var err45 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/MoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
}
var _valid1 = _errs72 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs75 = errors;
var _errs76 = errors;
if(errors === _errs76){
if(typeof data0 === "string"){
if(!pattern38.test(data0)){
var err46 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AtlasCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
else {
var err47 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AtlasCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
var _valid1 = _errs75 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs78 = errors;
var _errs79 = errors;
if(errors === _errs79){
if(typeof data0 === "string"){
if(!pattern39.test(data0)){
var err48 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/NpcCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
}
else {
var err49 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/NpcCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
}
var _valid1 = _errs78 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs81 = errors;
var _errs82 = errors;
if(errors === _errs82){
if(typeof data0 === "string"){
if(!pattern13.test(data0)){
var err50 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
}
else {
var err51 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
}
var _valid1 = _errs81 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs84 = errors;
var _errs85 = errors;
if(errors === _errs85){
if(typeof data0 === "string"){
if(!pattern41.test(data0)){
var err52 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AssetCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
else {
var err53 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/AssetCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
}
var _valid1 = _errs84 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs87 = errors;
var _errs88 = errors;
if(errors === _errs88){
if(typeof data0 === "string"){
if(!pattern42.test(data0)){
var err54 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/MoveCategoryIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
else {
var err55 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/MoveCategoryIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
}
var _valid1 = _errs87 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs90 = errors;
var _errs91 = errors;
if(errors === _errs91){
if(typeof data0 === "string"){
if(!pattern43.test(data0)){
var err56 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/DelveSiteIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
}
else {
var err57 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/DelveSiteIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
}
var _valid1 = _errs90 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs93 = errors;
var _errs94 = errors;
if(errors === _errs94){
if(typeof data0 === "string"){
if(!pattern45.test(data0)){
var err58 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/DelveSiteDomainIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
}
}
else {
var err59 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/DelveSiteDomainIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
}
}
var _valid1 = _errs93 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs96 = errors;
var _errs97 = errors;
if(errors === _errs97){
if(typeof data0 === "string"){
if(!pattern50.test(data0)){
var err60 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/DelveSiteThemeIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
}
else {
var err61 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/DelveSiteThemeIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
}
var _valid1 = _errs96 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs99 = errors;
var _errs100 = errors;
if(errors === _errs100){
if(typeof data0 === "string"){
if(!pattern51.test(data0)){
var err62 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/RarityIdWildcard/pattern",keyword:"pattern",params:{pattern: "^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
}
}
else {
var err63 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/RarityIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err63];
}
else {
vErrors.push(err63);
}
errors++;
}
}
var _valid1 = _errs99 === errors;
valid19 = valid19 || _valid1;
if(!valid19){
var _errs102 = errors;
var _errs103 = errors;
if(errors === _errs103){
if(typeof data0 === "string"){
if(!pattern52.test(data0)){
var err64 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/TruthIdWildcard/pattern",keyword:"pattern",params:{pattern: "^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""};
if(vErrors === null){
vErrors = [err64];
}
else {
vErrors.push(err64);
}
errors++;
}
}
else {
var err65 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/TruthIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err65];
}
else {
vErrors.push(err65);
}
errors++;
}
}
var _valid1 = _errs102 === errors;
valid19 = valid19 || _valid1;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
if(!valid19){
var err66 = {instancePath:instancePath+"/" + i0,schemaPath:"#/anyOf/19/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err66];
}
else {
vErrors.push(err66);
}
errors++;
}
else {
errors = _errs59;
if(vErrors !== null){
if(_errs59){
vErrors.length = _errs59;
}
else {
vErrors = null;
}
}
}
var valid18 = _errs58 === errors;
if(!valid18){
break;
}
}
}
else {
var err67 = {instancePath:instancePath,schemaPath:"#/anyOf/19/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err67];
}
else {
vErrors.push(err67);
}
errors++;
}
}
var _valid0 = _errs56 === errors;
valid0 = valid0 || _valid0;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
if(!valid0){
var err68 = {instancePath:instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err68];
}
else {
vErrors.push(err68);
}
errors++;
validate68.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate68.errors = vErrors;
return errors === 0;
}


function validate67(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var valid0 = true;
for(var key0 in data){
if(pattern0.test(key0)){
var data0 = data[key0];
var _errs1 = errors;
if(errors === _errs1){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
var valid1 = true;
for(var key1 in data0){
if(pattern3.test(key1)){
var _errs3 = errors;
if(!(validate68(data0[key1], {instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data0,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
}
else {
validate67.errors = [{instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/patternProperties/%5E%5Ba-z%5D%5Ba-z0-9_%5D%7B3%2C%7D%24/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
if(!valid0){
break;
}
}
}
}
else {
validate67.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate67.errors = vErrors;
return errors === 0;
}

var schema168 = {"title":"OracleRollableRowText","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/AnyOracleRollableRowId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}};
var schema175 = {"title":"DiceRange","type":"object","description":"Represents a range of dice roll results, bounded by `min` and `max` (inclusive).","required":["min","max"],"properties":{"min":{"type":"integer","description":"Low end of the dice range."},"max":{"type":"integer","description":"High end of the dice range."}}};
var schema169 = {"title":"AnyOracleRollableRowId","anyOf":[{"$ref":"#/definitions/OracleRollableRowId"},{"$ref":"#/definitions/AssetAbilityOracleRollableRowId"},{"$ref":"#/definitions/MoveOracleRollableRowId"},{"$ref":"#/definitions/TruthOptionOracleRollableRowId"}]};
var schema170 = {"title":"OracleRollableRowId","type":"string","description":"A unique ID representing an OracleRollableRow object.","pattern":"^oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"};
var schema171 = {"title":"AssetAbilityOracleRollableRowId","type":"string","description":"A unique ID representing an AssetAbilityOracleRollableRow object.","pattern":"^asset\\.ability\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"};
var schema172 = {"title":"MoveOracleRollableRowId","type":"string","description":"A unique ID representing a MoveOracleRollableRow object.","pattern":"^move\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"};
var schema173 = {"title":"TruthOptionOracleRollableRowId","type":"string","description":"A unique ID representing a TruthOptionOracleRollableRow object.","pattern":"^truth\\.option\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"};
var pattern88 = new RegExp("^oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$", "u");
var pattern89 = new RegExp("^asset\\.ability\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$", "u");
var pattern90 = new RegExp("^move\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+)$", "u");
var pattern91 = new RegExp("^truth\\.option\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$", "u");

function validate72(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs0 = errors;
var valid0 = false;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data === "string"){
if(!pattern88.test(data)){
var err0 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableRowId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"},message:"must match pattern \""+"^oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath,schemaPath:"#/definitions/OracleRollableRowId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(typeof data === "string"){
if(!pattern89.test(data)){
var err2 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableRowId/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"},message:"must match pattern \""+"^asset\\.ability\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"+"\""};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
var err3 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableRowId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(typeof data === "string"){
if(!pattern90.test(data)){
var err4 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableRowId/pattern",keyword:"pattern",params:{pattern: "^move\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"},message:"must match pattern \""+"^move\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
var err5 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableRowId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
var _valid0 = _errs7 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs10 = errors;
var _errs11 = errors;
if(errors === _errs11){
if(typeof data === "string"){
if(!pattern91.test(data)){
var err6 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableRowId/pattern",keyword:"pattern",params:{pattern: "^truth\\.option\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"},message:"must match pattern \""+"^truth\\.option\\.oracle_rollable\\.row:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)\\.(\\d+)$"+"\""};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
else {
var err7 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableRowId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
var _valid0 = _errs10 === errors;
valid0 = valid0 || _valid0;
}
}
}
if(!valid0){
var err8 = {instancePath:instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate72.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate72.errors = vErrors;
return errors === 0;
}

var schema177 = {"title":"OracleRollTemplate","type":"object","description":"Provides string templates that may be used in place of the static row text from `OracleRollableRow#text`, `OracleRollableRow#text2`, and `OracleRollableRow#text3`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{text>some_oracle_rollable_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleRollableRow#text` from the target oracle rollable ID.","releaseStage":"experimental","properties":{"text":{"$ref":"#/definitions/MarkdownTemplateString","description":"A string template that may be used in place of OracleRollableRow#text.","examples":["{{text>oracle_rollable:starforged/faction/name/affiliation}} of the {{text>oracle_rollable:starforged/faction/name/legacy}} {{text>oracle_rollable:starforged/faction/name/identity}}"]},"text2":{"$ref":"#/definitions/MarkdownTemplateString","description":"A string template that may be used in place of OracleRollableRow#text2."},"text3":{"$ref":"#/definitions/MarkdownTemplateString","description":"A string template that may be used in place of OracleRollableRow#text3."}}};
var schema178 = {"title":"MarkdownTemplateString","type":"string","description":"A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key>some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `text` key, for example `{{text>oracle_rollable:starforged/core/action}}`\n","releaseStage":"experimental","i18n":true,"format":"markdown"};

function validate74(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.text !== undefined){
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(errors === _errs2){
if(!(typeof data.text === "string")){
validate74.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownTemplateString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text2 !== undefined){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data.text2 === "string")){
validate74.errors = [{instancePath:instancePath+"/text2",schemaPath:"#/definitions/MarkdownTemplateString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text3 !== undefined){
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(errors === _errs8){
if(!(typeof data.text3 === "string")){
validate74.errors = [{instancePath:instancePath+"/text3",schemaPath:"#/definitions/MarkdownTemplateString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate74.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate74.errors = vErrors;
return errors === 0;
}

var schema182 = {"title":"OracleRoll","type":"object","required":["oracle","dice","auto","duplicates","number_of_rolls"],"properties":{"oracle":{"description":"The ID of the oracle to be rolled. A `null` value indicates that it's a roll on the same table.","default":null,"anyOf":[{"$ref":"#/definitions/OracleRollableId"},{"type":"null"}]},"dice":{"description":"The dice roll to make on the oracle table. Set it to `null` if you just want the table's default.","default":null,"anyOf":[{"$ref":"#/definitions/DiceExpression"},{"type":"null"}]},"auto":{"type":"boolean","description":"Both Ironsworn and Starforged explicitly recommend *against* rolling all details at once. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\" or \"Roll twice\".","default":false},"duplicates":{"$ref":"#/definitions/OracleDuplicateBehavior","description":"Special rules on how to handle duplicate results, when rolling multiple times.","default":"reroll"},"number_of_rolls":{"type":"integer","description":"The number of times to roll.","default":1,"minimum":1}}};
var schema185 = {"title":"OracleDuplicateBehavior","description":"Special roll instructions to use when rolling multiple times on a single oracle.\n\n  - `reroll`: Duplicate results should be re-rolled.\n  - `keep`: Duplicates results should be kept.\n  - `make_it_worse`: Duplicate results should be kept, and they compound to make things worse.","enum":["reroll","keep","make_it_worse"]};

function validate77(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle === undefined){
data.oracle = null;
}
if(data.dice === undefined){
data.dice = null;
}
if(data.auto === undefined){
data.auto = false;
}
if(data.duplicates === undefined){
data.duplicates = "reroll";
}
if(data.number_of_rolls === undefined){
data.number_of_rolls = 1;
}
var missing0;
if((((((data.oracle === undefined) && (missing0 = "oracle")) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.auto === undefined) && (missing0 = "auto"))) || ((data.duplicates === undefined) && (missing0 = "duplicates"))) || ((data.number_of_rolls === undefined) && (missing0 = "number_of_rolls"))){
validate77.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
var data0 = data.oracle;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = false;
var _errs3 = errors;
var _errs4 = errors;
if(errors === _errs4){
if(typeof data0 === "string"){
if(!pattern18.test(data0)){
var err0 = {instancePath:instancePath+"/oracle",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath+"/oracle",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs3 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
var _errs6 = errors;
if(data0 !== null){
var err2 = {instancePath:instancePath+"/oracle",schemaPath:"#/properties/oracle/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs6 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
var err3 = {instancePath:instancePath+"/oracle",schemaPath:"#/properties/oracle/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate77.errors = vErrors;
return false;
}
else {
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs1 === errors;
if(valid0){
var data1 = data.dice;
var _errs8 = errors;
var _errs9 = errors;
var valid3 = false;
var _errs10 = errors;
var _errs11 = errors;
if(errors === _errs11){
if(typeof data1 === "string"){
if(!pattern22.test(data1)){
var err4 = {instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
var err5 = {instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
var _valid1 = _errs10 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
var _errs13 = errors;
if(data1 !== null){
var err6 = {instancePath:instancePath+"/dice",schemaPath:"#/properties/dice/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var _valid1 = _errs13 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
var err7 = {instancePath:instancePath+"/dice",schemaPath:"#/properties/dice/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
validate77.errors = vErrors;
return false;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs8 === errors;
if(valid0){
var _errs15 = errors;
if(typeof data.auto !== "boolean"){
validate77.errors = [{instancePath:instancePath+"/auto",schemaPath:"#/properties/auto/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs15 === errors;
if(valid0){
var data3 = data.duplicates;
var _errs17 = errors;
if(!(((data3 === "reroll") || (data3 === "keep")) || (data3 === "make_it_worse"))){
validate77.errors = [{instancePath:instancePath+"/duplicates",schemaPath:"#/definitions/OracleDuplicateBehavior/enum",keyword:"enum",params:{allowedValues: schema185.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs17 === errors;
if(valid0){
var data4 = data.number_of_rolls;
var _errs19 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
validate77.errors = [{instancePath:instancePath+"/number_of_rolls",schemaPath:"#/properties/number_of_rolls/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
if(errors === _errs19){
if(typeof data4 == "number"){
if(data4 < 1 || isNaN(data4)){
validate77.errors = [{instancePath:instancePath+"/number_of_rolls",schemaPath:"#/properties/number_of_rolls/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];
return false;
}
}
}
var valid0 = _errs19 === errors;
}
}
}
}
}
}
else {
validate77.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate77.errors = vErrors;
return errors === 0;
}

var schema186 = {"title":"I18nHints","type":"object","description":"Internationalization/localization hints for the text content of this object.","releaseStage":"experimental","properties":{"text":{"$ref":"#/definitions/I18nHint"},"text2":{"$ref":"#/definitions/I18nHint"},"text3":{"$ref":"#/definitions/I18nHint"},"template":{"type":"object","properties":{"text":{"$ref":"#/definitions/I18nHint"},"text2":{"$ref":"#/definitions/I18nHint"},"text3":{"$ref":"#/definitions/I18nHint"}}}}};
var schema187 = {"title":"I18nHint","type":"object","releaseStage":"experimental","properties":{"part_of_speech":{"$ref":"#/definitions/PartOfSpeech","description":"The part of speech for this string."}}};
var schema188 = {"title":"PartOfSpeech","description":"  - `common_noun`: A common noun.\n  - `proper_noun`: A proper noun.\n  - `adjunct_common_noun`: A common noun used as an adjective, to modify another noun.\n  - `adjunct_proper_noun`: A proper noun used as an adjective, to modify another noun.\n  - `verb`: A verb in present tense\n  - `gerund`: Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\". Can function as a noun, an adjective, or a progressive verb.\n  - `adjective`: An adjective.\n  - `attributive_verb`: A verb used as an adjective, to modify a noun.\n  - `adjective_as_proper_noun`: An adjective used as a proper noun.\n  - `common_noun_as_proper_noun`: An common noun used as a proper noun.","releaseStage":"experimental","enum":["common_noun","proper_noun","adjunct_common_noun","adjunct_proper_noun","verb","gerund","adjective","attributive_verb","adjective_as_proper_noun","common_noun_as_proper_noun"]};

function validate81(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.part_of_speech !== undefined){
var data0 = data.part_of_speech;
if(!((((((((((data0 === "common_noun") || (data0 === "proper_noun")) || (data0 === "adjunct_common_noun")) || (data0 === "adjunct_proper_noun")) || (data0 === "verb")) || (data0 === "gerund")) || (data0 === "adjective")) || (data0 === "attributive_verb")) || (data0 === "adjective_as_proper_noun")) || (data0 === "common_noun_as_proper_noun"))){
validate81.errors = [{instancePath:instancePath+"/part_of_speech",schemaPath:"#/definitions/PartOfSpeech/enum",keyword:"enum",params:{allowedValues: schema188.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
else {
validate81.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate81.errors = vErrors;
return errors === 0;
}


function validate80(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.text !== undefined){
var _errs1 = errors;
if(!(validate81(data.text, {instancePath:instancePath+"/text",parentData:data,parentDataProperty:"text",rootData:rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text2 !== undefined){
var _errs2 = errors;
if(!(validate81(data.text2, {instancePath:instancePath+"/text2",parentData:data,parentDataProperty:"text2",rootData:rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text3 !== undefined){
var _errs3 = errors;
if(!(validate81(data.text3, {instancePath:instancePath+"/text3",parentData:data,parentDataProperty:"text3",rootData:rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var data3 = data.template;
var _errs4 = errors;
if(errors === _errs4){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
if(data3.text !== undefined){
var _errs6 = errors;
if(!(validate81(data3.text, {instancePath:instancePath+"/template/text",parentData:data3,parentDataProperty:"text",rootData:rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
var valid1 = _errs6 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data3.text2 !== undefined){
var _errs7 = errors;
if(!(validate81(data3.text2, {instancePath:instancePath+"/template/text2",parentData:data3,parentDataProperty:"text2",rootData:rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
var valid1 = _errs7 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data3.text3 !== undefined){
var _errs8 = errors;
if(!(validate81(data3.text3, {instancePath:instancePath+"/template/text3",parentData:data3,parentDataProperty:"text3",rootData:rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
var valid1 = _errs8 === errors;
}
else {
var valid1 = true;
}
}
}
}
else {
validate80.errors = [{instancePath:instancePath+"/template",schemaPath:"#/properties/template/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate80.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate80.errors = vErrors;
return errors === 0;
}


function validate71(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll === undefined){
data.roll = null;
}
var missing0;
if((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.text === undefined) && (missing0 = "text"))){
validate71.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate72(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate72.errors : vErrors.concat(validate72.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data1 = data.icon;
var _errs2 = errors;
var _errs3 = errors;
if(errors === _errs3){
if(errors === _errs3){
if(typeof data1 === "string"){
if(!pattern15.test(data1)){
validate71.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate71.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.roll;
var _errs5 = errors;
var _errs6 = errors;
var valid2 = false;
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var missing1;
if(((data2.min === undefined) && (missing1 = "min")) || ((data2.max === undefined) && (missing1 = "max"))){
var err0 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data2.min !== undefined){
var data3 = data2.min;
var _errs10 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
var err1 = {instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid4 = _errs10 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data2.max !== undefined){
var data4 = data2.max;
var _errs12 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err2 = {instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid4 = _errs12 === errors;
}
else {
var valid4 = true;
}
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs7 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
var _errs14 = errors;
if(data2 !== null){
var err4 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs14 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
var err5 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate71.errors = vErrors;
return false;
}
else {
errors = _errs6;
if(vErrors !== null){
if(_errs6){
vErrors.length = _errs6;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs5 === errors;
if(valid0){
if(data.text !== undefined){
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(errors === _errs17){
if(!(typeof data.text === "string")){
validate71.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var _errs19 = errors;
if(!(validate74(data.template, {instancePath:instancePath+"/template",parentData:data,parentDataProperty:"template",rootData:rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.embed_table !== undefined){
var data7 = data.embed_table;
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(typeof data7 === "string"){
if(!pattern18.test(data7)){
validate71.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate71.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs23 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data9 = data.oracle_rolls;
var _errs24 = errors;
if(errors === _errs24){
if(Array.isArray(data9)){
var valid7 = true;
var len0 = data9.length;
for(var i0=0; i0<len0; i0++){
var _errs26 = errors;
if(!(validate77(data9[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data9,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid7 = _errs26 === errors;
if(!valid7){
break;
}
}
}
else {
validate71.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs27 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._i18n !== undefined){
var _errs28 = errors;
if(!(validate80(data._i18n, {instancePath:instancePath+"/_i18n",parentData:data,parentDataProperty:"_i18n",rootData:rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate71.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate71.errors = vErrors;
return errors === 0;
}

var schema189 = {"title":"SourceInfo","type":"object","description":"Metadata describing the original source of this node","required":["title","authors","date","license","url"],"properties":{"title":{"$ref":"#/definitions/Label","description":"The title of the source document.","examples":["Ironsworn Rulebook","Ironsworn Assets Master Set","Ironsworn: Delve","Ironsworn: Starforged Rulebook","Ironsworn: Starforged Assets","Sundered Isles"]},"authors":{"type":"array","description":"Lists authors credited by the source material.","items":{"$ref":"#/definitions/AuthorInfo"},"minItems":1},"date":{"type":"string","description":"The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.","remarks":"You may prefer to deserialize this as a Date object.","format":"date","pattern":"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},"license":{"description":"An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.","examples":["https://creativecommons.org/licenses/by/4.0","https://creativecommons.org/licenses/by-nc-sa/4.0"],"anyOf":[{"$ref":"#/definitions/WebUrl"},{"type":"null"}]},"page":{"$ref":"#/definitions/PageNumber","description":"The page number where this content is described in full."},"url":{"$ref":"#/definitions/WebUrl","description":"A URL where the source document is available.","examples":["https://ironswornrpg.com"]}}};
var schema192 = {"title":"PageNumber","type":"integer","description":"Represents a page number in a book.","minimum":1};

function validate90(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((((((data.title === undefined) && (missing0 = "title")) || ((data.authors === undefined) && (missing0 = "authors"))) || ((data.date === undefined) && (missing0 = "date"))) || ((data.license === undefined) && (missing0 = "license"))) || ((data.url === undefined) && (missing0 = "url"))){
validate90.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.title !== undefined){
var _errs1 = errors;
if(typeof data.title !== "string"){
validate90.errors = [{instancePath:instancePath+"/title",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.authors !== undefined){
var data1 = data.authors;
var _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
if(data1.length < 1){
validate90.errors = [{instancePath:instancePath+"/authors",schemaPath:"#/properties/authors/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];
return false;
}
else {
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var _errs6 = errors;
if(!(validate23(data1[i0], {instancePath:instancePath+"/authors/" + i0,parentData:data1,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);
errors = vErrors.length;
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
}
else {
validate90.errors = [{instancePath:instancePath+"/authors",schemaPath:"#/properties/authors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.date !== undefined){
var data3 = data.date;
var _errs7 = errors;
if(errors === _errs7){
if(errors === _errs7){
if(typeof data3 === "string"){
if(!pattern2.test(data3)){
validate90.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/pattern",keyword:"pattern",params:{pattern: "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},message:"must match pattern \""+"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"+"\""}];
return false;
}
}
else {
validate90.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.license !== undefined){
var data4 = data.license;
var _errs9 = errors;
var _errs10 = errors;
var valid3 = false;
var _errs11 = errors;
var _errs12 = errors;
if(errors === _errs12){
if(errors === _errs12){
if(!(typeof data4 === "string")){
var err0 = {instancePath:instancePath+"/license",schemaPath:"#/definitions/WebUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
}
var _valid0 = _errs11 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs14 = errors;
if(data4 !== null){
var err1 = {instancePath:instancePath+"/license",schemaPath:"#/properties/license/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs14 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err2 = {instancePath:instancePath+"/license",schemaPath:"#/properties/license/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate90.errors = vErrors;
return false;
}
else {
errors = _errs10;
if(vErrors !== null){
if(_errs10){
vErrors.length = _errs10;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.page !== undefined){
var data5 = data.page;
var _errs16 = errors;
var _errs17 = errors;
if(!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))){
validate90.errors = [{instancePath:instancePath+"/page",schemaPath:"#/definitions/PageNumber/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
if(errors === _errs17){
if(typeof data5 == "number"){
if(data5 < 1 || isNaN(data5)){
validate90.errors = [{instancePath:instancePath+"/page",schemaPath:"#/definitions/PageNumber/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"}];
return false;
}
}
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.url !== undefined){
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(errors === _errs20){
if(!(typeof data.url === "string")){
validate90.errors = [{instancePath:instancePath+"/url",schemaPath:"#/definitions/WebUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate90.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate90.errors = vErrors;
return errors === 0;
}


function validate60(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
if(data.column_labels === undefined){
data.column_labels = {"roll":"Roll","text":"Result"};
}
var missing0;
if(((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data.rows === undefined) && (missing0 = "rows"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate60.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern18.test(data0)){
validate60.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate60.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate60.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate60.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate60.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate60.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate60.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_text" !== data4){
validate60.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_text"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern19.test(data6)){
validate60.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate60.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate60.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate60.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate60.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate60.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate60.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate60.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate60.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.dice;
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern22.test(data11)){
validate60.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate60.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs30 === errors;
if(valid0){
if(data.match !== undefined){
var _errs33 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data13 = data.recommended_rolls;
var _errs34 = errors;
if(errors === _errs34){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
if(data13.min === undefined){
data13.min = 1;
}
if(data13.max === undefined){
data13.max = 1;
}
var missing1;
if(((data13.min === undefined) && (missing1 = "min")) || ((data13.max === undefined) && (missing1 = "max"))){
validate60.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data14 = data13.min;
var _errs36 = errors;
if(!((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14)))){
validate60.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs36 === errors;
if(valid11){
var data15 = data13.max;
var _errs38 = errors;
if(!((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15)))){
validate60.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs38 === errors;
}
}
}
else {
validate60.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs40 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs41 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs42 = errors;
if(typeof data._comment !== "string"){
validate60.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data19 = data.column_labels;
var _errs44 = errors;
if(errors === _errs44){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
var missing2;
if(((data19.roll === undefined) && (missing2 = "roll")) || ((data19.text === undefined) && (missing2 = "text"))){
validate60.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data19.roll !== undefined){
var _errs46 = errors;
if(typeof data19.roll !== "string"){
validate60.errors = [{instancePath:instancePath+"/column_labels/roll",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs46 === errors;
}
else {
var valid12 = true;
}
if(valid12){
if(data19.text !== undefined){
var _errs49 = errors;
if(typeof data19.text !== "string"){
validate60.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs49 === errors;
}
else {
var valid12 = true;
}
}
}
}
else {
validate60.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs44 === errors;
if(valid0){
if(data.rows !== undefined){
var data22 = data.rows;
var _errs52 = errors;
if(errors === _errs52){
if(Array.isArray(data22)){
var valid15 = true;
var len2 = data22.length;
for(var i2=0; i2<len2; i2++){
var _errs54 = errors;
if(!(validate71(data22[i2], {instancePath:instancePath+"/rows/" + i2,parentData:data22,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate71.errors : vErrors.concat(validate71.errors);
errors = vErrors.length;
}
var valid15 = _errs54 === errors;
if(!valid15){
break;
}
}
}
else {
validate60.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs52 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs55 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs55 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate60.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate60.errors = vErrors;
return errors === 0;
}

var schema194 = {"title":"OracleTableText2","type":"object","description":"A rollable oracle table with one roll column and two text columns.","required":["_id","type","name","oracle_type","dice","column_labels","rows","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text2"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text2ColumnLabels","type":"object","default":{"roll":"Roll","text":"Result","text2":"Details"},"required":["roll","text","text2"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema206 = {"title":"OracleRollableRowText2","type":"object","description":"Represents a row in an oracle table that provides a secondary text field.","required":["_id","roll","text","text2"],"properties":{"_id":{"$ref":"#/definitions/AnyOracleRollableRowId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"text2":{"description":"The secondary text for this row. Use `null` to represent a cell with a blank or empty vlue.","anyOf":[{"$ref":"#/definitions/MarkdownString"},{"type":"null"}]},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}};

function validate98(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll === undefined){
data.roll = null;
}
var missing0;
if(((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.text2 === undefined) && (missing0 = "text2"))){
validate98.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate72(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate72.errors : vErrors.concat(validate72.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data1 = data.icon;
var _errs2 = errors;
var _errs3 = errors;
if(errors === _errs3){
if(errors === _errs3){
if(typeof data1 === "string"){
if(!pattern15.test(data1)){
validate98.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate98.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.roll;
var _errs5 = errors;
var _errs6 = errors;
var valid2 = false;
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var missing1;
if(((data2.min === undefined) && (missing1 = "min")) || ((data2.max === undefined) && (missing1 = "max"))){
var err0 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data2.min !== undefined){
var data3 = data2.min;
var _errs10 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
var err1 = {instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid4 = _errs10 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data2.max !== undefined){
var data4 = data2.max;
var _errs12 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err2 = {instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid4 = _errs12 === errors;
}
else {
var valid4 = true;
}
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs7 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
var _errs14 = errors;
if(data2 !== null){
var err4 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs14 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
var err5 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate98.errors = vErrors;
return false;
}
else {
errors = _errs6;
if(vErrors !== null){
if(_errs6){
vErrors.length = _errs6;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs5 === errors;
if(valid0){
if(data.text !== undefined){
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(errors === _errs17){
if(!(typeof data.text === "string")){
validate98.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text2 !== undefined){
var data6 = data.text2;
var _errs19 = errors;
var _errs20 = errors;
var valid6 = false;
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(errors === _errs22){
if(!(typeof data6 === "string")){
var err6 = {instancePath:instancePath+"/text2",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
}
var _valid1 = _errs21 === errors;
valid6 = valid6 || _valid1;
if(!valid6){
var _errs24 = errors;
if(data6 !== null){
var err7 = {instancePath:instancePath+"/text2",schemaPath:"#/properties/text2/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var _valid1 = _errs24 === errors;
valid6 = valid6 || _valid1;
}
if(!valid6){
var err8 = {instancePath:instancePath+"/text2",schemaPath:"#/properties/text2/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate98.errors = vErrors;
return false;
}
else {
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var _errs26 = errors;
if(!(validate74(data.template, {instancePath:instancePath+"/template",parentData:data,parentDataProperty:"template",rootData:rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.embed_table !== undefined){
var data8 = data.embed_table;
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(typeof data8 === "string"){
if(!pattern18.test(data8)){
validate98.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate98.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs30 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data10 = data.oracle_rolls;
var _errs31 = errors;
if(errors === _errs31){
if(Array.isArray(data10)){
var valid9 = true;
var len0 = data10.length;
for(var i0=0; i0<len0; i0++){
var _errs33 = errors;
if(!(validate77(data10[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data10,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid9 = _errs33 === errors;
if(!valid9){
break;
}
}
}
else {
validate98.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._i18n !== undefined){
var _errs35 = errors;
if(!(validate80(data._i18n, {instancePath:instancePath+"/_i18n",parentData:data,parentDataProperty:"_i18n",rootData:rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate98.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate98.errors = vErrors;
return errors === 0;
}


function validate94(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
if(data.column_labels === undefined){
data.column_labels = {"roll":"Roll","text":"Result","text2":"Details"};
}
var missing0;
if(((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data.rows === undefined) && (missing0 = "rows"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate94.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern18.test(data0)){
validate94.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate94.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate94.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate94.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate94.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate94.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate94.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_text2" !== data4){
validate94.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_text2"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern19.test(data6)){
validate94.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate94.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate94.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate94.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate94.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate94.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate94.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate94.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate94.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.dice;
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern22.test(data11)){
validate94.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate94.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs30 === errors;
if(valid0){
if(data.match !== undefined){
var _errs33 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data13 = data.recommended_rolls;
var _errs34 = errors;
if(errors === _errs34){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
if(data13.min === undefined){
data13.min = 1;
}
if(data13.max === undefined){
data13.max = 1;
}
var missing1;
if(((data13.min === undefined) && (missing1 = "min")) || ((data13.max === undefined) && (missing1 = "max"))){
validate94.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data14 = data13.min;
var _errs36 = errors;
if(!((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14)))){
validate94.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs36 === errors;
if(valid11){
var data15 = data13.max;
var _errs38 = errors;
if(!((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15)))){
validate94.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs38 === errors;
}
}
}
else {
validate94.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs40 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs41 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs42 = errors;
if(typeof data._comment !== "string"){
validate94.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data19 = data.column_labels;
var _errs44 = errors;
if(errors === _errs44){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
var missing2;
if((((data19.roll === undefined) && (missing2 = "roll")) || ((data19.text === undefined) && (missing2 = "text"))) || ((data19.text2 === undefined) && (missing2 = "text2"))){
validate94.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data19.roll !== undefined){
var _errs46 = errors;
if(typeof data19.roll !== "string"){
validate94.errors = [{instancePath:instancePath+"/column_labels/roll",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs46 === errors;
}
else {
var valid12 = true;
}
if(valid12){
if(data19.text !== undefined){
var _errs49 = errors;
if(typeof data19.text !== "string"){
validate94.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs49 === errors;
}
else {
var valid12 = true;
}
if(valid12){
if(data19.text2 !== undefined){
var _errs52 = errors;
if(typeof data19.text2 !== "string"){
validate94.errors = [{instancePath:instancePath+"/column_labels/text2",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs52 === errors;
}
else {
var valid12 = true;
}
}
}
}
}
else {
validate94.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs44 === errors;
if(valid0){
if(data.rows !== undefined){
var data23 = data.rows;
var _errs55 = errors;
if(errors === _errs55){
if(Array.isArray(data23)){
var valid16 = true;
var len2 = data23.length;
for(var i2=0; i2<len2; i2++){
var _errs57 = errors;
if(!(validate98(data23[i2], {instancePath:instancePath+"/rows/" + i2,parentData:data23,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate98.errors : vErrors.concat(validate98.errors);
errors = vErrors.length;
}
var valid16 = _errs57 === errors;
if(!valid16){
break;
}
}
}
else {
validate94.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs55 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs58 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate94.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate94.errors = vErrors;
return errors === 0;
}

var schema212 = {"title":"OracleTableText3","type":"object","description":"A rollable oracle table with one roll column and 3 text columns.","required":["_id","type","name","oracle_type","dice","column_labels","rows","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text3"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text3ColumnLabels","type":"object","required":["roll","text","text2","text3"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"},"text3":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema225 = {"title":"OracleRollableRowText3","type":"object","description":"Represents a row in an oracle table with 3 text cells.","required":["_id","roll","text","text2","text3"],"properties":{"_id":{"$ref":"#/definitions/AnyOracleRollableRowId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"text2":{"description":"The secondary text for this row. Use `null` to represent a cell with a blank or empty value.","anyOf":[{"$ref":"#/definitions/MarkdownString"},{"type":"null"}]},"text3":{"description":"The tertiary text for this row. Use `null` to represent a cell with a blank or empty vlue.","anyOf":[{"$ref":"#/definitions/MarkdownString"},{"type":"null"}]},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}};

function validate112(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll === undefined){
data.roll = null;
}
var missing0;
if((((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.text2 === undefined) && (missing0 = "text2"))) || ((data.text3 === undefined) && (missing0 = "text3"))){
validate112.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate72(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate72.errors : vErrors.concat(validate72.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data1 = data.icon;
var _errs2 = errors;
var _errs3 = errors;
if(errors === _errs3){
if(errors === _errs3){
if(typeof data1 === "string"){
if(!pattern15.test(data1)){
validate112.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate112.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.roll;
var _errs5 = errors;
var _errs6 = errors;
var valid2 = false;
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var missing1;
if(((data2.min === undefined) && (missing1 = "min")) || ((data2.max === undefined) && (missing1 = "max"))){
var err0 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data2.min !== undefined){
var data3 = data2.min;
var _errs10 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
var err1 = {instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid4 = _errs10 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data2.max !== undefined){
var data4 = data2.max;
var _errs12 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err2 = {instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid4 = _errs12 === errors;
}
else {
var valid4 = true;
}
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs7 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
var _errs14 = errors;
if(data2 !== null){
var err4 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs14 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
var err5 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate112.errors = vErrors;
return false;
}
else {
errors = _errs6;
if(vErrors !== null){
if(_errs6){
vErrors.length = _errs6;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs5 === errors;
if(valid0){
if(data.text !== undefined){
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(errors === _errs17){
if(!(typeof data.text === "string")){
validate112.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text2 !== undefined){
var data6 = data.text2;
var _errs19 = errors;
var _errs20 = errors;
var valid6 = false;
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(errors === _errs22){
if(!(typeof data6 === "string")){
var err6 = {instancePath:instancePath+"/text2",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
}
var _valid1 = _errs21 === errors;
valid6 = valid6 || _valid1;
if(!valid6){
var _errs24 = errors;
if(data6 !== null){
var err7 = {instancePath:instancePath+"/text2",schemaPath:"#/properties/text2/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var _valid1 = _errs24 === errors;
valid6 = valid6 || _valid1;
}
if(!valid6){
var err8 = {instancePath:instancePath+"/text2",schemaPath:"#/properties/text2/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate112.errors = vErrors;
return false;
}
else {
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text3 !== undefined){
var data7 = data.text3;
var _errs26 = errors;
var _errs27 = errors;
var valid8 = false;
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(errors === _errs29){
if(!(typeof data7 === "string")){
var err9 = {instancePath:instancePath+"/text3",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
}
var _valid2 = _errs28 === errors;
valid8 = valid8 || _valid2;
if(!valid8){
var _errs31 = errors;
if(data7 !== null){
var err10 = {instancePath:instancePath+"/text3",schemaPath:"#/properties/text3/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid2 = _errs31 === errors;
valid8 = valid8 || _valid2;
}
if(!valid8){
var err11 = {instancePath:instancePath+"/text3",schemaPath:"#/properties/text3/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate112.errors = vErrors;
return false;
}
else {
errors = _errs27;
if(vErrors !== null){
if(_errs27){
vErrors.length = _errs27;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var _errs33 = errors;
if(!(validate74(data.template, {instancePath:instancePath+"/template",parentData:data,parentDataProperty:"template",rootData:rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.embed_table !== undefined){
var data9 = data.embed_table;
var _errs34 = errors;
var _errs35 = errors;
if(errors === _errs35){
if(typeof data9 === "string"){
if(!pattern18.test(data9)){
validate112.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate112.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs37 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data11 = data.oracle_rolls;
var _errs38 = errors;
if(errors === _errs38){
if(Array.isArray(data11)){
var valid11 = true;
var len0 = data11.length;
for(var i0=0; i0<len0; i0++){
var _errs40 = errors;
if(!(validate77(data11[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data11,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid11 = _errs40 === errors;
if(!valid11){
break;
}
}
}
else {
validate112.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs41 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._i18n !== undefined){
var _errs42 = errors;
if(!(validate80(data._i18n, {instancePath:instancePath+"/_i18n",parentData:data,parentDataProperty:"_i18n",rootData:rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate112.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate112.errors = vErrors;
return errors === 0;
}


function validate108(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data.rows === undefined) && (missing0 = "rows"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate108.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern18.test(data0)){
validate108.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate108.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate108.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate108.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate108.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate108.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate108.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_text3" !== data4){
validate108.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_text3"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern19.test(data6)){
validate108.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate108.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate108.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate108.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate108.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate108.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate108.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate108.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate108.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.dice;
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern22.test(data11)){
validate108.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate108.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs30 === errors;
if(valid0){
if(data.match !== undefined){
var _errs33 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data13 = data.recommended_rolls;
var _errs34 = errors;
if(errors === _errs34){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
if(data13.min === undefined){
data13.min = 1;
}
if(data13.max === undefined){
data13.max = 1;
}
var missing1;
if(((data13.min === undefined) && (missing1 = "min")) || ((data13.max === undefined) && (missing1 = "max"))){
validate108.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data14 = data13.min;
var _errs36 = errors;
if(!((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14)))){
validate108.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs36 === errors;
if(valid11){
var data15 = data13.max;
var _errs38 = errors;
if(!((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15)))){
validate108.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs38 === errors;
}
}
}
else {
validate108.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs40 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs41 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs42 = errors;
if(typeof data._comment !== "string"){
validate108.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.column_labels !== undefined){
var data19 = data.column_labels;
var _errs44 = errors;
if(errors === _errs44){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
var missing2;
if(((((data19.roll === undefined) && (missing2 = "roll")) || ((data19.text === undefined) && (missing2 = "text"))) || ((data19.text2 === undefined) && (missing2 = "text2"))) || ((data19.text3 === undefined) && (missing2 = "text3"))){
validate108.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data19.roll !== undefined){
var _errs46 = errors;
if(typeof data19.roll !== "string"){
validate108.errors = [{instancePath:instancePath+"/column_labels/roll",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs46 === errors;
}
else {
var valid12 = true;
}
if(valid12){
if(data19.text !== undefined){
var _errs49 = errors;
if(typeof data19.text !== "string"){
validate108.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs49 === errors;
}
else {
var valid12 = true;
}
if(valid12){
if(data19.text2 !== undefined){
var _errs52 = errors;
if(typeof data19.text2 !== "string"){
validate108.errors = [{instancePath:instancePath+"/column_labels/text2",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs52 === errors;
}
else {
var valid12 = true;
}
if(valid12){
if(data19.text3 !== undefined){
var _errs55 = errors;
if(typeof data19.text3 !== "string"){
validate108.errors = [{instancePath:instancePath+"/column_labels/text3",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs55 === errors;
}
else {
var valid12 = true;
}
}
}
}
}
}
else {
validate108.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data24 = data.rows;
var _errs58 = errors;
if(errors === _errs58){
if(Array.isArray(data24)){
var valid17 = true;
var len2 = data24.length;
for(var i2=0; i2<len2; i2++){
var _errs60 = errors;
if(!(validate112(data24[i2], {instancePath:instancePath+"/rows/" + i2,parentData:data24,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate112.errors : vErrors.concat(validate112.errors);
errors = vErrors.length;
}
var valid17 = _errs60 === errors;
if(!valid17){
break;
}
}
}
else {
validate108.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs61 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs61 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate108.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate108.errors = vErrors;
return errors === 0;
}


function validate59(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data0 = data.oracle_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("table_text" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate60(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate60.errors : vErrors.concat(validate60.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate59.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data1 = data.oracle_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("table_text2" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate94(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate94.errors : vErrors.concat(validate94.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate59.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data2 = data.oracle_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("table_text3" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate108(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate108.errors : vErrors.concat(validate108.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate59.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.oracle_type === undefined) && (missing0 = "oracle_type")){
validate59.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.oracle_type !== undefined){
var data3 = data.oracle_type;
if(!(((data3 === "table_text") || (data3 === "table_text2")) || (data3 === "table_text3"))){
validate59.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/enum",keyword:"enum",params:{allowedValues: schema87.properties.oracle_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate59.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate59.errors = vErrors;
return errors === 0;
}

var schema232 = {"title":"OracleCollection","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.","required":["oracle_type"],"properties":{"oracle_type":{"enum":["tables","table_shared_rolls","table_shared_text","table_shared_text2","table_shared_text3"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"oracle_type":{"type":"string","const":"tables"}}},"then":{"$ref":"#/definitions/OracleTablesCollection"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_rolls"}}},"then":{"$ref":"#/definitions/OracleTableSharedRolls"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_text"}}},"then":{"$ref":"#/definitions/OracleTableSharedText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_text2"}}},"then":{"$ref":"#/definitions/OracleTableSharedText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_shared_text3"}}},"then":{"$ref":"#/definitions/OracleTableSharedText3"}}]};
var wrapper0 = {validate: validate58};
var schema233 = {"title":"OracleTableSharedRolls","type":"object","description":"An OracleCollection representing a single table with one roll column and multiple text columns.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_rolls"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","description":"Provides column labels for this table. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row). For all other column labels, see the `name` property of each child `OracleColumn`.","default":{"roll":"Roll","text":"Result"},"required":["roll"],"properties":{"roll":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema244 = {"title":"OracleColumnText","type":"object","description":"Represents a single column in an OracleCollection.","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}}}};

function validate125(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate125.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern18.test(data0)){
validate125.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate125.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate125.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate125.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate125.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate125.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate125.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("column_text" !== data4){
validate125.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "column_text"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern19.test(data6)){
validate125.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate125.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate125.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate125.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate125.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate125.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate125.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate125.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate125.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.dice;
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern22.test(data11)){
validate125.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate125.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs30 === errors;
if(valid0){
if(data.match !== undefined){
var _errs33 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data13 = data.recommended_rolls;
var _errs34 = errors;
if(errors === _errs34){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
if(data13.min === undefined){
data13.min = 1;
}
if(data13.max === undefined){
data13.max = 1;
}
var missing1;
if(((data13.min === undefined) && (missing1 = "min")) || ((data13.max === undefined) && (missing1 = "max"))){
validate125.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data14 = data13.min;
var _errs36 = errors;
if(!((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14)))){
validate125.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs36 === errors;
if(valid11){
var data15 = data13.max;
var _errs38 = errors;
if(!((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15)))){
validate125.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs38 === errors;
}
}
}
else {
validate125.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs40 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs41 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs42 = errors;
if(typeof data._comment !== "string"){
validate125.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data19 = data.rows;
var _errs44 = errors;
if(errors === _errs44){
if(Array.isArray(data19)){
var valid12 = true;
var len2 = data19.length;
for(var i2=0; i2<len2; i2++){
var _errs46 = errors;
if(!(validate71(data19[i2], {instancePath:instancePath+"/rows/" + i2,parentData:data19,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate71.errors : vErrors.concat(validate71.errors);
errors = vErrors.length;
}
var valid12 = _errs46 === errors;
if(!valid12){
break;
}
}
}
else {
validate125.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate125.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate125.errors = vErrors;
return errors === 0;
}


function validate124(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.column_labels === undefined){
data.column_labels = {"roll":"Roll","text":"Result"};
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate124.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern12.test(data0)){
validate124.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate124.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate124.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_collection" !== data1){
validate124.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate124.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate124.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate124.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_shared_rolls" !== data4){
validate124.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_shared_rolls"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern13.test(data6)){
validate124.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate124.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data7 = data.enhances;
var _errs19 = errors;
if(errors === _errs19){
if(Array.isArray(data7)){
var valid6 = true;
var len1 = data7.length;
for(var i1=0; i1<len1; i1++){
var data8 = data7[i1];
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(typeof data8 === "string"){
if(!pattern13.test(data8)){
validate124.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate124.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs21 === errors;
if(!valid6){
break;
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs24 = errors;
if(typeof data.color !== "string"){
validate124.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data10 = data.icon;
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern15.test(data10)){
validate124.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate124.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data11 = data.images;
var _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data11)){
var valid10 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var data12 = data11[i2];
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(errors === _errs33){
if(typeof data12 === "string"){
if(!pattern16.test(data12)){
validate124.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate124.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs32 === errors;
if(!valid10){
break;
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs35 = errors;
var _errs36 = errors;
if(errors === _errs36){
if(errors === _errs36){
if(!(typeof data.summary === "string")){
validate124.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs38 = errors;
var _errs39 = errors;
if(errors === _errs39){
if(errors === _errs39){
if(!(typeof data.description === "string")){
validate124.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.contents;
var _errs41 = errors;
if(errors === _errs41){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid14 = true;
for(var key0 in data15){
if(pattern3.test(key0)){
var _errs43 = errors;
if(!(validate125(data15[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate125.errors : vErrors.concat(validate125.errors);
errors = vErrors.length;
}
var valid14 = _errs43 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs41 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs44 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs45 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs46 = errors;
if(typeof data._comment !== "string"){
validate124.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data20 = data.column_labels;
var _errs48 = errors;
if(errors === _errs48){
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
var missing1;
if((data20.roll === undefined) && (missing1 = "roll")){
validate124.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data20.roll !== undefined){
if(typeof data20.roll !== "string"){
validate124.errors = [{instancePath:instancePath+"/column_labels/roll",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs48 === errors;
if(valid0){
if(data._source !== undefined){
var _errs53 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate124.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate124.errors = vErrors;
return errors === 0;
}

var schema254 = {"title":"OracleTableSharedText","type":"object","description":"An OracleCollection representing a single table with multiple roll columns and one text column.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_text"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","default":{"roll":"Roll","text":"Result"},"required":["text"],"properties":{"text":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};

function validate135(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.column_labels === undefined){
data.column_labels = {"roll":"Roll","text":"Result"};
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate135.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern12.test(data0)){
validate135.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate135.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate135.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_collection" !== data1){
validate135.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate135.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate135.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate135.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_shared_text" !== data4){
validate135.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_shared_text"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern13.test(data6)){
validate135.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate135.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate135.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data7 = data.enhances;
var _errs19 = errors;
if(errors === _errs19){
if(Array.isArray(data7)){
var valid6 = true;
var len1 = data7.length;
for(var i1=0; i1<len1; i1++){
var data8 = data7[i1];
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(typeof data8 === "string"){
if(!pattern13.test(data8)){
validate135.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate135.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs21 === errors;
if(!valid6){
break;
}
}
}
else {
validate135.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs24 = errors;
if(typeof data.color !== "string"){
validate135.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data10 = data.icon;
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern15.test(data10)){
validate135.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate135.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data11 = data.images;
var _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data11)){
var valid10 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var data12 = data11[i2];
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(errors === _errs33){
if(typeof data12 === "string"){
if(!pattern16.test(data12)){
validate135.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate135.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs32 === errors;
if(!valid10){
break;
}
}
}
else {
validate135.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs35 = errors;
var _errs36 = errors;
if(errors === _errs36){
if(errors === _errs36){
if(!(typeof data.summary === "string")){
validate135.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs38 = errors;
var _errs39 = errors;
if(errors === _errs39){
if(errors === _errs39){
if(!(typeof data.description === "string")){
validate135.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.contents;
var _errs41 = errors;
if(errors === _errs41){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid14 = true;
for(var key0 in data15){
if(pattern3.test(key0)){
var _errs43 = errors;
if(!(validate125(data15[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate125.errors : vErrors.concat(validate125.errors);
errors = vErrors.length;
}
var valid14 = _errs43 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate135.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs41 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs44 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs45 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs46 = errors;
if(typeof data._comment !== "string"){
validate135.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data20 = data.column_labels;
var _errs48 = errors;
if(errors === _errs48){
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
var missing1;
if((data20.text === undefined) && (missing1 = "text")){
validate135.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data20.text !== undefined){
if(typeof data20.text !== "string"){
validate135.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
}
else {
validate135.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs48 === errors;
if(valid0){
if(data._source !== undefined){
var _errs53 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate135.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate135.errors = vErrors;
return errors === 0;
}

var schema266 = {"title":"OracleTableSharedText2","type":"object","description":"An OracleCollection representing a single table with multiple roll columns, and 2 shared text columns.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_text2"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText2"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text2ColumnLabels","type":"object","default":{"roll":"Roll","text":"Result","text2":"Details"},"required":["text","text2"],"properties":{"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema277 = {"title":"OracleColumnText2","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text2"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}}}};

function validate142(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate142.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern18.test(data0)){
validate142.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate142.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate142.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate142.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate142.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate142.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate142.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("column_text2" !== data4){
validate142.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "column_text2"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern19.test(data6)){
validate142.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate142.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate142.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate142.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate142.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate142.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate142.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate142.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate142.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.dice;
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern22.test(data11)){
validate142.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate142.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs30 === errors;
if(valid0){
if(data.match !== undefined){
var _errs33 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data13 = data.recommended_rolls;
var _errs34 = errors;
if(errors === _errs34){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
if(data13.min === undefined){
data13.min = 1;
}
if(data13.max === undefined){
data13.max = 1;
}
var missing1;
if(((data13.min === undefined) && (missing1 = "min")) || ((data13.max === undefined) && (missing1 = "max"))){
validate142.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data14 = data13.min;
var _errs36 = errors;
if(!((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14)))){
validate142.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs36 === errors;
if(valid11){
var data15 = data13.max;
var _errs38 = errors;
if(!((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15)))){
validate142.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs38 === errors;
}
}
}
else {
validate142.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs40 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs41 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs42 = errors;
if(typeof data._comment !== "string"){
validate142.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data19 = data.rows;
var _errs44 = errors;
if(errors === _errs44){
if(Array.isArray(data19)){
var valid12 = true;
var len2 = data19.length;
for(var i2=0; i2<len2; i2++){
var _errs46 = errors;
if(!(validate98(data19[i2], {instancePath:instancePath+"/rows/" + i2,parentData:data19,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate98.errors : vErrors.concat(validate98.errors);
errors = vErrors.length;
}
var valid12 = _errs46 === errors;
if(!valid12){
break;
}
}
}
else {
validate142.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate142.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate142.errors = vErrors;
return errors === 0;
}


function validate141(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.column_labels === undefined){
data.column_labels = {"roll":"Roll","text":"Result","text2":"Details"};
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate141.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern12.test(data0)){
validate141.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate141.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate141.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_collection" !== data1){
validate141.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate141.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate141.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate141.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_shared_text2" !== data4){
validate141.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_shared_text2"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern13.test(data6)){
validate141.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate141.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate141.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data7 = data.enhances;
var _errs19 = errors;
if(errors === _errs19){
if(Array.isArray(data7)){
var valid6 = true;
var len1 = data7.length;
for(var i1=0; i1<len1; i1++){
var data8 = data7[i1];
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(typeof data8 === "string"){
if(!pattern13.test(data8)){
validate141.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate141.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs21 === errors;
if(!valid6){
break;
}
}
}
else {
validate141.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs24 = errors;
if(typeof data.color !== "string"){
validate141.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data10 = data.icon;
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern15.test(data10)){
validate141.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate141.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data11 = data.images;
var _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data11)){
var valid10 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var data12 = data11[i2];
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(errors === _errs33){
if(typeof data12 === "string"){
if(!pattern16.test(data12)){
validate141.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate141.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs32 === errors;
if(!valid10){
break;
}
}
}
else {
validate141.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs35 = errors;
var _errs36 = errors;
if(errors === _errs36){
if(errors === _errs36){
if(!(typeof data.summary === "string")){
validate141.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs38 = errors;
var _errs39 = errors;
if(errors === _errs39){
if(errors === _errs39){
if(!(typeof data.description === "string")){
validate141.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.contents;
var _errs41 = errors;
if(errors === _errs41){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid14 = true;
for(var key0 in data15){
if(pattern3.test(key0)){
var _errs43 = errors;
if(!(validate142(data15[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate142.errors : vErrors.concat(validate142.errors);
errors = vErrors.length;
}
var valid14 = _errs43 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate141.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs41 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs44 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs45 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs46 = errors;
if(typeof data._comment !== "string"){
validate141.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data20 = data.column_labels;
var _errs48 = errors;
if(errors === _errs48){
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
var missing1;
if(((data20.text === undefined) && (missing1 = "text")) || ((data20.text2 === undefined) && (missing1 = "text2"))){
validate141.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data20.text !== undefined){
var _errs50 = errors;
if(typeof data20.text !== "string"){
validate141.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs50 === errors;
}
else {
var valid15 = true;
}
if(valid15){
if(data20.text2 !== undefined){
var _errs53 = errors;
if(typeof data20.text2 !== "string"){
validate141.errors = [{instancePath:instancePath+"/column_labels/text2",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs53 === errors;
}
else {
var valid15 = true;
}
}
}
}
else {
validate141.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs48 === errors;
if(valid0){
if(data._source !== undefined){
var _errs56 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs56 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate141.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate141.errors = vErrors;
return errors === 0;
}

var schema288 = {"title":"OracleTableSharedText3","type":"object","description":"An OracleCollection representing a single table with multiple roll columns, and 3 shared text columns.","required":["_id","type","name","oracle_type","contents","column_labels","_source"],"properties":{"_id":{"$ref":"#/definitions/OracleCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_shared_text3"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/OracleCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleColumnText3"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text3ColumnLabels","type":"object","default":{},"required":["text","text2","text3"],"properties":{"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"},"text3":{"$ref":"#/definitions/Label"}}},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema299 = {"title":"OracleColumnText3","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/OracleRollableId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text3"},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/OracleRollableIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}}}};

function validate153(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate153.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern18.test(data0)){
validate153.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate153.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate153.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate153.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate153.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate153.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate153.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("column_text3" !== data4){
validate153.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "column_text3"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern19.test(data6)){
validate153.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^oracle_rollable:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate153.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleRollableIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate153.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate153.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate153.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate153.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate153.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate153.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate153.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.dice;
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern22.test(data11)){
validate153.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate153.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs30 === errors;
if(valid0){
if(data.match !== undefined){
var _errs33 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data13 = data.recommended_rolls;
var _errs34 = errors;
if(errors === _errs34){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
if(data13.min === undefined){
data13.min = 1;
}
if(data13.max === undefined){
data13.max = 1;
}
var missing1;
if(((data13.min === undefined) && (missing1 = "min")) || ((data13.max === undefined) && (missing1 = "max"))){
validate153.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data14 = data13.min;
var _errs36 = errors;
if(!((typeof data14 == "number") && (!(data14 % 1) && !isNaN(data14)))){
validate153.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs36 === errors;
if(valid11){
var data15 = data13.max;
var _errs38 = errors;
if(!((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15)))){
validate153.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid11 = _errs38 === errors;
}
}
}
else {
validate153.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs40 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs41 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs42 = errors;
if(typeof data._comment !== "string"){
validate153.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data19 = data.rows;
var _errs44 = errors;
if(errors === _errs44){
if(Array.isArray(data19)){
var valid12 = true;
var len2 = data19.length;
for(var i2=0; i2<len2; i2++){
var _errs46 = errors;
if(!(validate112(data19[i2], {instancePath:instancePath+"/rows/" + i2,parentData:data19,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate112.errors : vErrors.concat(validate112.errors);
errors = vErrors.length;
}
var valid12 = _errs46 === errors;
if(!valid12){
break;
}
}
}
else {
validate153.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate153.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate153.errors = vErrors;
return errors === 0;
}


function validate152(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.column_labels === undefined){
data.column_labels = {};
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate152.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern12.test(data0)){
validate152.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate152.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate152.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_collection" !== data1){
validate152.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate152.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate152.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate152.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_shared_text3" !== data4){
validate152.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_shared_text3"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern13.test(data6)){
validate152.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate152.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate152.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data7 = data.enhances;
var _errs19 = errors;
if(errors === _errs19){
if(Array.isArray(data7)){
var valid6 = true;
var len1 = data7.length;
for(var i1=0; i1<len1; i1++){
var data8 = data7[i1];
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(typeof data8 === "string"){
if(!pattern13.test(data8)){
validate152.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate152.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs21 === errors;
if(!valid6){
break;
}
}
}
else {
validate152.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs24 = errors;
if(typeof data.color !== "string"){
validate152.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data10 = data.icon;
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern15.test(data10)){
validate152.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate152.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data11 = data.images;
var _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data11)){
var valid10 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var data12 = data11[i2];
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(errors === _errs33){
if(typeof data12 === "string"){
if(!pattern16.test(data12)){
validate152.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate152.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs32 === errors;
if(!valid10){
break;
}
}
}
else {
validate152.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs35 = errors;
var _errs36 = errors;
if(errors === _errs36){
if(errors === _errs36){
if(!(typeof data.summary === "string")){
validate152.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs38 = errors;
var _errs39 = errors;
if(errors === _errs39){
if(errors === _errs39){
if(!(typeof data.description === "string")){
validate152.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.contents;
var _errs41 = errors;
if(errors === _errs41){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid14 = true;
for(var key0 in data15){
if(pattern3.test(key0)){
var _errs43 = errors;
if(!(validate153(data15[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate153.errors : vErrors.concat(validate153.errors);
errors = vErrors.length;
}
var valid14 = _errs43 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate152.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs41 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs44 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs44 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs45 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs46 = errors;
if(typeof data._comment !== "string"){
validate152.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data20 = data.column_labels;
var _errs48 = errors;
if(errors === _errs48){
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
var missing1;
if((((data20.text === undefined) && (missing1 = "text")) || ((data20.text2 === undefined) && (missing1 = "text2"))) || ((data20.text3 === undefined) && (missing1 = "text3"))){
validate152.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data20.text !== undefined){
var _errs50 = errors;
if(typeof data20.text !== "string"){
validate152.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs50 === errors;
}
else {
var valid15 = true;
}
if(valid15){
if(data20.text2 !== undefined){
var _errs53 = errors;
if(typeof data20.text2 !== "string"){
validate152.errors = [{instancePath:instancePath+"/column_labels/text2",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs53 === errors;
}
else {
var valid15 = true;
}
if(valid15){
if(data20.text3 !== undefined){
var _errs56 = errors;
if(typeof data20.text3 !== "string"){
validate152.errors = [{instancePath:instancePath+"/column_labels/text3",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs56 === errors;
}
else {
var valid15 = true;
}
}
}
}
}
else {
validate152.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs48 === errors;
if(valid0){
if(data._source !== undefined){
var _errs59 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate152.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate152.errors = vErrors;
return errors === 0;
}


function validate123(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data0 = data.oracle_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("tables" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(wrapper0.validate(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate123.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data1 = data.oracle_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("table_shared_rolls" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate124(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate124.errors : vErrors.concat(validate124.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate123.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data2 = data.oracle_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("table_shared_text" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate135(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate135.errors : vErrors.concat(validate135.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate123.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data3 = data.oracle_type;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("table_shared_text2" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate141(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate141.errors : vErrors.concat(validate141.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate123.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
if(valid0){
var _errs25 = errors;
var _errs26 = errors;
var valid9 = true;
var _errs27 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
if(typeof data4 !== "string"){
var err12 = {};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if("table_shared_text3" !== data4){
var err13 = {};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
}
var _valid4 = _errs27 === errors;
errors = _errs26;
if(vErrors !== null){
if(_errs26){
vErrors.length = _errs26;
}
else {
vErrors = null;
}
}
if(_valid4){
var _errs30 = errors;
if(!(validate152(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate152.errors : vErrors.concat(validate152.errors);
errors = vErrors.length;
}
var _valid4 = _errs30 === errors;
valid9 = _valid4;
}
if(!valid9){
var err14 = {instancePath:instancePath,schemaPath:"#/allOf/4/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
validate123.errors = vErrors;
return false;
}
var valid0 = _errs25 === errors;
}
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.oracle_type === undefined) && (missing0 = "oracle_type")){
validate123.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.oracle_type !== undefined){
var data5 = data.oracle_type;
if(!(((((data5 === "tables") || (data5 === "table_shared_rolls")) || (data5 === "table_shared_text")) || (data5 === "table_shared_text2")) || (data5 === "table_shared_text3"))){
validate123.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/enum",keyword:"enum",params:{allowedValues: schema232.properties.oracle_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate123.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate123.errors = vErrors;
return errors === 0;
}


function validate58(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.collections === undefined){
data.collections = {};
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.collections === undefined) && (missing0 = "collections"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate58.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern12.test(data0)){
validate58.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^oracle_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate58.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/OracleCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate58.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_collection" !== data1){
validate58.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate58.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate58.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate58.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("tables" !== data4){
validate58.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "tables"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern13.test(data6)){
validate58.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate58.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate58.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data7 = data.enhances;
var _errs19 = errors;
if(errors === _errs19){
if(Array.isArray(data7)){
var valid6 = true;
var len1 = data7.length;
for(var i1=0; i1<len1; i1++){
var data8 = data7[i1];
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(typeof data8 === "string"){
if(!pattern13.test(data8)){
validate58.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^oracle_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate58.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/OracleCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs21 === errors;
if(!valid6){
break;
}
}
}
else {
validate58.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs24 = errors;
if(typeof data.color !== "string"){
validate58.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data10 = data.icon;
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern15.test(data10)){
validate58.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate58.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data11 = data.images;
var _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data11)){
var valid10 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var data12 = data11[i2];
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(errors === _errs33){
if(typeof data12 === "string"){
if(!pattern16.test(data12)){
validate58.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate58.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs32 === errors;
if(!valid10){
break;
}
}
}
else {
validate58.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs35 = errors;
var _errs36 = errors;
if(errors === _errs36){
if(errors === _errs36){
if(!(typeof data.summary === "string")){
validate58.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs38 = errors;
var _errs39 = errors;
if(errors === _errs39){
if(errors === _errs39){
if(!(typeof data.description === "string")){
validate58.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.contents;
var _errs41 = errors;
if(errors === _errs41){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid14 = true;
for(var key0 in data15){
if(pattern3.test(key0)){
var _errs43 = errors;
if(!(validate59(data15[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate59.errors : vErrors.concat(validate59.errors);
errors = vErrors.length;
}
var valid14 = _errs43 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate58.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs41 === errors;
if(valid0){
var data17 = data.collections;
var _errs44 = errors;
if(errors === _errs44){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
var valid15 = true;
for(var key1 in data17){
if(pattern3.test(key1)){
var _errs46 = errors;
if(!(validate123(data17[key1], {instancePath:instancePath+"/collections/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data17,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate123.errors : vErrors.concat(validate123.errors);
errors = vErrors.length;
}
var valid15 = _errs46 === errors;
if(!valid15){
break;
}
}
}
}
else {
validate58.errors = [{instancePath:instancePath+"/collections",schemaPath:"#/properties/collections/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs44 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs47 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs48 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs48 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs49 = errors;
if(typeof data._comment !== "string"){
validate58.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs51 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs51 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate58.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate58.errors = vErrors;
return errors === 0;
}

var schema311 = {"title":"AssetCollection","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/AssetCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"asset_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AssetCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/AssetCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Asset"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema322 = {"title":"Asset","type":"object","required":["_id","type","name","category","options","count_as_impact","shared","abilities","_source"],"properties":{"_id":{"$ref":"#/definitions/AssetId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"asset"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"category":{"$ref":"#/definitions/Label","description":"A localized category label for this asset. This is the surtitle above the asset's name on the card.","examples":["Combat Talent","Command Vehicle","Companion","Deed","Module","Path","Ritual","Support Vehicle"]},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AssetIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"options":{"type":"object","description":"Options are input fields set when the player purchases the asset. They're likely to remain the same through the life of the asset. Typically, they are rendered at the top of the asset card.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetOptionField"}}},"count_as_impact":{"type":"boolean","description":"If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn).","default":false},"shared":{"type":"boolean","description":"Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too.","default":false},"attachments":{"$ref":"#/definitions/AssetAttachment"},"requirement":{"$ref":"#/definitions/MarkdownString","description":"Describes prerequisites for purchasing or using this asset."},"abilities":{"type":"array","items":{"$ref":"#/definitions/AssetAbility","description":"Abilities provided by this asset. Most assets have 3."}},"controls":{"type":"object","description":"Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetControlField"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema331 = {"title":"AssetOptionField","type":"object","description":"Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["select_value","select_enhancement","text"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"select_value"}}},"then":{"$ref":"#/definitions/SelectValueField"}},{"if":{"properties":{"field_type":{"type":"string","const":"select_enhancement"}}},"then":{"$ref":"#/definitions/SelectEnhancementField"}},{"if":{"properties":{"field_type":{"type":"string","const":"text"}}},"then":{"$ref":"#/definitions/TextField"}}]};
var schema332 = {"title":"SelectValueField","type":"object","description":"Represents a list of mutually exclusive choices.","remarks":"Semantics are similar to the HTML `<select>` element","required":["label","field_type","choices","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"select_value"},"choices":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SelectValueFieldChoice"}}},"value":{"description":"The key of the currently selected choice from the `choices` property, or `null` if none is selected.","default":null,"anyOf":[{"$ref":"#/definitions/DictKey"},{"type":"null"}]},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}};
var schema334 = {"title":"SelectValueFieldChoice","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `using` property as a discriminator.","required":["using"],"properties":{"using":{"enum":["stat","condition_meter","asset_control","asset_option","attached_asset_control","attached_asset_option","custom"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"using":{"type":"string","const":"stat"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","stat"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of a standard player character stat.","const":"stat"},"stat":{"$ref":"#/definitions/StatKey"}}}},{"if":{"properties":{"using":{"type":"string","const":"condition_meter"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","condition_meter"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of a standard player condition meter.","const":"condition_meter"},"condition_meter":{"$ref":"#/definitions/ConditionMeterKey"}}}},{"if":{"properties":{"using":{"type":"string","const":"asset_control"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","control","assets"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an asset control.","const":"asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.","default":null,"anyOf":[{"type":"array","default":null,"items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}}},{"if":{"properties":{"using":{"type":"string","const":"asset_option"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","option","assets"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an asset option.","const":"asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_control"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","control"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.","const":"attached_asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]}}}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_option"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","option"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"A reference to the value of an attached asset option.","const":"attached_asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."}}}},{"if":{"properties":{"using":{"type":"string","const":"custom"}}},"then":{"type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type","using","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"using":{"type":"string","description":"An arbitrary static integer value with a label.","const":"custom"},"value":{"type":"integer"}}}}]};

function validate172(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data0 = data.using;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("stat" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(errors === _errs6){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((((data.label === undefined) && (missing0 = "label")) || ((data.choice_type === undefined) && (missing0 = "choice_type"))) || ((data.using === undefined) && (missing0 = "using"))) || ((data.stat === undefined) && (missing0 = "stat"))){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/0/then/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs8 = errors;
if(typeof data.label !== "string"){
validate172.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid3 = _errs8 === errors;
}
else {
var valid3 = true;
}
if(valid3){
if(data.choice_type !== undefined){
var data2 = data.choice_type;
var _errs11 = errors;
if(typeof data2 !== "string"){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/0/then/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data2){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/0/then/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid3 = _errs11 === errors;
}
else {
var valid3 = true;
}
if(valid3){
if(data.using !== undefined){
var data3 = data.using;
var _errs13 = errors;
if(typeof data3 !== "string"){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/0/then/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("stat" !== data3){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/0/then/properties/using/const",keyword:"const",params:{allowedValue: "stat"},message:"must be equal to constant"}];
return false;
}
var valid3 = _errs13 === errors;
}
else {
var valid3 = true;
}
if(valid3){
if(data.stat !== undefined){
var data4 = data.stat;
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(typeof data4 === "string"){
if(!pattern3.test(data4)){
validate172.errors = [{instancePath:instancePath+"/stat",schemaPath:"#/definitions/StatKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate172.errors = [{instancePath:instancePath+"/stat",schemaPath:"#/definitions/StatKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid3 = _errs15 === errors;
}
else {
var valid3 = true;
}
}
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/0/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate172.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs18 = errors;
var _errs19 = errors;
var valid6 = true;
var _errs20 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data5 = data.using;
if(typeof data5 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("condition_meter" !== data5){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs20 === errors;
errors = _errs19;
if(vErrors !== null){
if(_errs19){
vErrors.length = _errs19;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs23 = errors;
if(errors === _errs23){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing1;
if(((((data.label === undefined) && (missing1 = "label")) || ((data.choice_type === undefined) && (missing1 = "choice_type"))) || ((data.using === undefined) && (missing1 = "using"))) || ((data.condition_meter === undefined) && (missing1 = "condition_meter"))){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/1/then/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs25 = errors;
if(typeof data.label !== "string"){
validate172.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid8 = _errs25 === errors;
}
else {
var valid8 = true;
}
if(valid8){
if(data.choice_type !== undefined){
var data7 = data.choice_type;
var _errs28 = errors;
if(typeof data7 !== "string"){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/1/then/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data7){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/1/then/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid8 = _errs28 === errors;
}
else {
var valid8 = true;
}
if(valid8){
if(data.using !== undefined){
var data8 = data.using;
var _errs30 = errors;
if(typeof data8 !== "string"){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/1/then/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("condition_meter" !== data8){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/1/then/properties/using/const",keyword:"const",params:{allowedValue: "condition_meter"},message:"must be equal to constant"}];
return false;
}
var valid8 = _errs30 === errors;
}
else {
var valid8 = true;
}
if(valid8){
if(data.condition_meter !== undefined){
var data9 = data.condition_meter;
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(typeof data9 === "string"){
if(!pattern3.test(data9)){
validate172.errors = [{instancePath:instancePath+"/condition_meter",schemaPath:"#/definitions/ConditionMeterKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate172.errors = [{instancePath:instancePath+"/condition_meter",schemaPath:"#/definitions/ConditionMeterKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid8 = _errs32 === errors;
}
else {
var valid8 = true;
}
}
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/1/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid1 = _errs23 === errors;
valid6 = _valid1;
}
if(!valid6){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate172.errors = vErrors;
return false;
}
var valid0 = _errs18 === errors;
if(valid0){
var _errs35 = errors;
var _errs36 = errors;
var valid11 = true;
var _errs37 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data10 = data.using;
if(typeof data10 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("asset_control" !== data10){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs37 === errors;
errors = _errs36;
if(vErrors !== null){
if(_errs36){
vErrors.length = _errs36;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs40 = errors;
if(errors === _errs40){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.assets === undefined){
data.assets = null;
}
var missing2;
if((((((data.label === undefined) && (missing2 = "label")) || ((data.choice_type === undefined) && (missing2 = "choice_type"))) || ((data.using === undefined) && (missing2 = "using"))) || ((data.control === undefined) && (missing2 = "control"))) || ((data.assets === undefined) && (missing2 = "assets"))){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/2/then/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs42 = errors;
if(typeof data.label !== "string"){
validate172.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid13 = _errs42 === errors;
}
else {
var valid13 = true;
}
if(valid13){
if(data.choice_type !== undefined){
var data12 = data.choice_type;
var _errs45 = errors;
if(typeof data12 !== "string"){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/2/then/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data12){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/2/then/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid13 = _errs45 === errors;
}
else {
var valid13 = true;
}
if(valid13){
if(data.using !== undefined){
var data13 = data.using;
var _errs47 = errors;
if(typeof data13 !== "string"){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/2/then/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset_control" !== data13){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/2/then/properties/using/const",keyword:"const",params:{allowedValue: "asset_control"},message:"must be equal to constant"}];
return false;
}
var valid13 = _errs47 === errors;
}
else {
var valid13 = true;
}
if(valid13){
if(data.control !== undefined){
var data14 = data.control;
var _errs49 = errors;
var _errs50 = errors;
if(errors === _errs50){
if(typeof data14 === "string"){
if(!pattern3.test(data14)){
validate172.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate172.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid13 = _errs49 === errors;
}
else {
var valid13 = true;
}
if(valid13){
var data15 = data.assets;
var _errs52 = errors;
var _errs53 = errors;
var valid16 = false;
var _errs54 = errors;
if(errors === _errs54){
if(Array.isArray(data15)){
var valid17 = true;
var len0 = data15.length;
for(var i0=0; i0<len0; i0++){
var data16 = data15[i0];
var _errs56 = errors;
var _errs57 = errors;
if(errors === _errs57){
if(typeof data16 === "string"){
if(!pattern34.test(data16)){
var err8 = {instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
else {
var err9 = {instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var valid17 = _errs56 === errors;
if(!valid17){
break;
}
}
}
else {
var err10 = {instancePath:instancePath+"/assets",schemaPath:"#/allOf/2/then/properties/assets/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
var _valid3 = _errs54 === errors;
valid16 = valid16 || _valid3;
if(!valid16){
var _errs59 = errors;
if(data15 !== null){
var err11 = {instancePath:instancePath+"/assets",schemaPath:"#/allOf/2/then/properties/assets/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
var _valid3 = _errs59 === errors;
valid16 = valid16 || _valid3;
}
if(!valid16){
var err12 = {instancePath:instancePath+"/assets",schemaPath:"#/allOf/2/then/properties/assets/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
validate172.errors = vErrors;
return false;
}
else {
errors = _errs53;
if(vErrors !== null){
if(_errs53){
vErrors.length = _errs53;
}
else {
vErrors = null;
}
}
}
var valid13 = _errs52 === errors;
}
}
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/2/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid2 = _errs40 === errors;
valid11 = _valid2;
}
if(!valid11){
var err13 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
validate172.errors = vErrors;
return false;
}
var valid0 = _errs35 === errors;
if(valid0){
var _errs61 = errors;
var _errs62 = errors;
var valid19 = true;
var _errs63 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data17 = data.using;
if(typeof data17 !== "string"){
var err14 = {};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
if("asset_option" !== data17){
var err15 = {};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
}
}
var _valid4 = _errs63 === errors;
errors = _errs62;
if(vErrors !== null){
if(_errs62){
vErrors.length = _errs62;
}
else {
vErrors = null;
}
}
if(_valid4){
var _errs66 = errors;
if(errors === _errs66){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.assets === undefined){
data.assets = null;
}
var missing3;
if((((((data.label === undefined) && (missing3 = "label")) || ((data.choice_type === undefined) && (missing3 = "choice_type"))) || ((data.using === undefined) && (missing3 = "using"))) || ((data.option === undefined) && (missing3 = "option"))) || ((data.assets === undefined) && (missing3 = "assets"))){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/3/then/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs68 = errors;
if(typeof data.label !== "string"){
validate172.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs68 === errors;
}
else {
var valid21 = true;
}
if(valid21){
if(data.choice_type !== undefined){
var data19 = data.choice_type;
var _errs71 = errors;
if(typeof data19 !== "string"){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/3/then/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data19){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/3/then/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid21 = _errs71 === errors;
}
else {
var valid21 = true;
}
if(valid21){
if(data.using !== undefined){
var data20 = data.using;
var _errs73 = errors;
if(typeof data20 !== "string"){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/3/then/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset_option" !== data20){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/3/then/properties/using/const",keyword:"const",params:{allowedValue: "asset_option"},message:"must be equal to constant"}];
return false;
}
var valid21 = _errs73 === errors;
}
else {
var valid21 = true;
}
if(valid21){
if(data.option !== undefined){
var data21 = data.option;
var _errs75 = errors;
var _errs76 = errors;
if(errors === _errs76){
if(typeof data21 === "string"){
if(!pattern3.test(data21)){
validate172.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate172.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid21 = _errs75 === errors;
}
else {
var valid21 = true;
}
if(valid21){
var data22 = data.assets;
var _errs78 = errors;
var _errs79 = errors;
var valid24 = false;
var _errs80 = errors;
if(errors === _errs80){
if(Array.isArray(data22)){
var valid25 = true;
var len1 = data22.length;
for(var i1=0; i1<len1; i1++){
var data23 = data22[i1];
var _errs82 = errors;
var _errs83 = errors;
if(errors === _errs83){
if(typeof data23 === "string"){
if(!pattern34.test(data23)){
var err16 = {instancePath:instancePath+"/assets/" + i1,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
else {
var err17 = {instancePath:instancePath+"/assets/" + i1,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
}
var valid25 = _errs82 === errors;
if(!valid25){
break;
}
}
}
else {
var err18 = {instancePath:instancePath+"/assets",schemaPath:"#/allOf/3/then/properties/assets/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
var _valid5 = _errs80 === errors;
valid24 = valid24 || _valid5;
if(!valid24){
var _errs85 = errors;
if(data22 !== null){
var err19 = {instancePath:instancePath+"/assets",schemaPath:"#/allOf/3/then/properties/assets/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
var _valid5 = _errs85 === errors;
valid24 = valid24 || _valid5;
}
if(!valid24){
var err20 = {instancePath:instancePath+"/assets",schemaPath:"#/allOf/3/then/properties/assets/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
validate172.errors = vErrors;
return false;
}
else {
errors = _errs79;
if(vErrors !== null){
if(_errs79){
vErrors.length = _errs79;
}
else {
vErrors = null;
}
}
}
var valid21 = _errs78 === errors;
}
}
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/3/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid4 = _errs66 === errors;
valid19 = _valid4;
}
if(!valid19){
var err21 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
validate172.errors = vErrors;
return false;
}
var valid0 = _errs61 === errors;
if(valid0){
var _errs87 = errors;
var _errs88 = errors;
var valid27 = true;
var _errs89 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data24 = data.using;
if(typeof data24 !== "string"){
var err22 = {};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
if("attached_asset_control" !== data24){
var err23 = {};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
}
var _valid6 = _errs89 === errors;
errors = _errs88;
if(vErrors !== null){
if(_errs88){
vErrors.length = _errs88;
}
else {
vErrors = null;
}
}
if(_valid6){
var _errs92 = errors;
if(errors === _errs92){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing4;
if(((((data.label === undefined) && (missing4 = "label")) || ((data.choice_type === undefined) && (missing4 = "choice_type"))) || ((data.using === undefined) && (missing4 = "using"))) || ((data.control === undefined) && (missing4 = "control"))){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/4/then/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs94 = errors;
if(typeof data.label !== "string"){
validate172.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid29 = _errs94 === errors;
}
else {
var valid29 = true;
}
if(valid29){
if(data.choice_type !== undefined){
var data26 = data.choice_type;
var _errs97 = errors;
if(typeof data26 !== "string"){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/4/then/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data26){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/4/then/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid29 = _errs97 === errors;
}
else {
var valid29 = true;
}
if(valid29){
if(data.using !== undefined){
var data27 = data.using;
var _errs99 = errors;
if(typeof data27 !== "string"){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/4/then/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("attached_asset_control" !== data27){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/4/then/properties/using/const",keyword:"const",params:{allowedValue: "attached_asset_control"},message:"must be equal to constant"}];
return false;
}
var valid29 = _errs99 === errors;
}
else {
var valid29 = true;
}
if(valid29){
if(data.control !== undefined){
var data28 = data.control;
var _errs101 = errors;
var _errs102 = errors;
if(errors === _errs102){
if(typeof data28 === "string"){
if(!pattern3.test(data28)){
validate172.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate172.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid29 = _errs101 === errors;
}
else {
var valid29 = true;
}
}
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/4/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid6 = _errs92 === errors;
valid27 = _valid6;
}
if(!valid27){
var err24 = {instancePath:instancePath,schemaPath:"#/allOf/4/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
validate172.errors = vErrors;
return false;
}
var valid0 = _errs87 === errors;
if(valid0){
var _errs104 = errors;
var _errs105 = errors;
var valid32 = true;
var _errs106 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data29 = data.using;
if(typeof data29 !== "string"){
var err25 = {};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
if("attached_asset_option" !== data29){
var err26 = {};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
}
var _valid7 = _errs106 === errors;
errors = _errs105;
if(vErrors !== null){
if(_errs105){
vErrors.length = _errs105;
}
else {
vErrors = null;
}
}
if(_valid7){
var _errs109 = errors;
if(errors === _errs109){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing5;
if(((((data.label === undefined) && (missing5 = "label")) || ((data.choice_type === undefined) && (missing5 = "choice_type"))) || ((data.using === undefined) && (missing5 = "using"))) || ((data.option === undefined) && (missing5 = "option"))){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/5/then/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs111 = errors;
if(typeof data.label !== "string"){
validate172.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid34 = _errs111 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data.choice_type !== undefined){
var data31 = data.choice_type;
var _errs114 = errors;
if(typeof data31 !== "string"){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/5/then/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data31){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/5/then/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid34 = _errs114 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data.using !== undefined){
var data32 = data.using;
var _errs116 = errors;
if(typeof data32 !== "string"){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/5/then/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("attached_asset_option" !== data32){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/5/then/properties/using/const",keyword:"const",params:{allowedValue: "attached_asset_option"},message:"must be equal to constant"}];
return false;
}
var valid34 = _errs116 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data.option !== undefined){
var data33 = data.option;
var _errs118 = errors;
var _errs119 = errors;
if(errors === _errs119){
if(typeof data33 === "string"){
if(!pattern3.test(data33)){
validate172.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate172.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid34 = _errs118 === errors;
}
else {
var valid34 = true;
}
}
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/5/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid7 = _errs109 === errors;
valid32 = _valid7;
}
if(!valid32){
var err27 = {instancePath:instancePath,schemaPath:"#/allOf/5/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
validate172.errors = vErrors;
return false;
}
var valid0 = _errs104 === errors;
if(valid0){
var _errs121 = errors;
var _errs122 = errors;
var valid37 = true;
var _errs123 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data34 = data.using;
if(typeof data34 !== "string"){
var err28 = {};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
if("custom" !== data34){
var err29 = {};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
}
}
var _valid8 = _errs123 === errors;
errors = _errs122;
if(vErrors !== null){
if(_errs122){
vErrors.length = _errs122;
}
else {
vErrors = null;
}
}
if(_valid8){
var _errs126 = errors;
if(errors === _errs126){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing6;
if(((((data.label === undefined) && (missing6 = "label")) || ((data.choice_type === undefined) && (missing6 = "choice_type"))) || ((data.using === undefined) && (missing6 = "using"))) || ((data.value === undefined) && (missing6 = "value"))){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/6/then/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs128 = errors;
if(typeof data.label !== "string"){
validate172.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid39 = _errs128 === errors;
}
else {
var valid39 = true;
}
if(valid39){
if(data.choice_type !== undefined){
var data36 = data.choice_type;
var _errs131 = errors;
if(typeof data36 !== "string"){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/6/then/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data36){
validate172.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/allOf/6/then/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid39 = _errs131 === errors;
}
else {
var valid39 = true;
}
if(valid39){
if(data.using !== undefined){
var data37 = data.using;
var _errs133 = errors;
if(typeof data37 !== "string"){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/6/then/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("custom" !== data37){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/allOf/6/then/properties/using/const",keyword:"const",params:{allowedValue: "custom"},message:"must be equal to constant"}];
return false;
}
var valid39 = _errs133 === errors;
}
else {
var valid39 = true;
}
if(valid39){
if(data.value !== undefined){
var data38 = data.value;
var _errs135 = errors;
if(!((typeof data38 == "number") && (!(data38 % 1) && !isNaN(data38)))){
validate172.errors = [{instancePath:instancePath+"/value",schemaPath:"#/allOf/6/then/properties/value/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid39 = _errs135 === errors;
}
else {
var valid39 = true;
}
}
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/allOf/6/then/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid8 = _errs126 === errors;
valid37 = _valid8;
}
if(!valid37){
var err30 = {instancePath:instancePath,schemaPath:"#/allOf/6/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
validate172.errors = vErrors;
return false;
}
var valid0 = _errs121 === errors;
}
}
}
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing7;
if((data.using === undefined) && (missing7 = "using")){
validate172.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data39 = data.using;
if(!(((((((data39 === "stat") || (data39 === "condition_meter")) || (data39 === "asset_control")) || (data39 === "asset_option")) || (data39 === "attached_asset_control")) || (data39 === "attached_asset_option")) || (data39 === "custom"))){
validate172.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/enum",keyword:"enum",params:{allowedValues: schema334.properties.using.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate172.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate172.errors = vErrors;
return errors === 0;
}


function validate171(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.choices === undefined){
data.choices = {};
}
if(data.value === undefined){
data.value = null;
}
var missing0;
if(((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.choices === undefined) && (missing0 = "choices"))) || ((data.value === undefined) && (missing0 = "value"))){
validate171.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate171.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate171.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("select_value" !== data1){
validate171.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "select_value"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.choices;
var _errs6 = errors;
if(errors === _errs6){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var valid2 = true;
for(var key0 in data2){
if(pattern3.test(key0)){
var _errs8 = errors;
if(!(validate172(data2[key0], {instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data2,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate172.errors : vErrors.concat(validate172.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
}
else {
validate171.errors = [{instancePath:instancePath+"/choices",schemaPath:"#/properties/choices/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs6 === errors;
if(valid0){
var data4 = data.value;
var _errs9 = errors;
var _errs10 = errors;
var valid3 = false;
var _errs11 = errors;
var _errs12 = errors;
if(errors === _errs12){
if(typeof data4 === "string"){
if(!pattern3.test(data4)){
var err0 = {instancePath:instancePath+"/value",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath+"/value",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs11 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs14 = errors;
if(data4 !== null){
var err2 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs14 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err3 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate171.errors = vErrors;
return false;
}
else {
errors = _errs10;
if(vErrors !== null){
if(_errs10){
vErrors.length = _errs10;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs9 === errors;
if(valid0){
if(data.icon !== undefined){
var data5 = data.icon;
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(errors === _errs17){
if(typeof data5 === "string"){
if(!pattern15.test(data5)){
validate171.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate171.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
else {
validate171.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate171.errors = vErrors;
return errors === 0;
}

var schema352 = {"title":"SelectEnhancementField","type":"object","description":"Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles).","remarks":"Semantics are similar to the HTML `<select>` element","required":["label","field_type","choices","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"select_enhancement"},"choices":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `choice_type` property as a discriminator.","required":["choice_type"],"properties":{"choice_type":{"enum":["choice","choice_group"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"choice_type":{"type":"string","const":"choice"}}},"then":{"$ref":"#/definitions/SelectEnhancementFieldChoice"}},{"if":{"properties":{"choice_type":{"type":"string","const":"choice_group"}}},"then":{"$ref":"#/definitions/SelectEnhancementFieldChoiceGroup"}}]}}},"value":{"description":"The key of the currently selected choice from the `choices` property, or `null` if none is selected.","default":null,"anyOf":[{"$ref":"#/definitions/DictKey"},{"type":"null"}]},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}};
var schema354 = {"title":"SelectEnhancementFieldChoice","type":"object","description":"Represents an option in a list of choices.","remarks":"Semantics are similar to the HTML `<option>` element.","required":["label","choice_type"],"properties":{"label":{"$ref":"#/definitions/Label"},"choice_type":{"type":"string","const":"choice"},"enhance_asset":{"$ref":"#/definitions/AssetEnhancement"},"enhance_moves":{"type":"array","items":{"$ref":"#/definitions/MoveEnhancement"}}}};
var schema356 = {"title":"AssetEnhancement","type":"object","description":"Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed.","properties":{"count_as_impact":{"type":"boolean","description":"If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."},"shared":{"type":"boolean","description":"Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."},"attachments":{"$ref":"#/definitions/AssetAttachment"},"controls":{"type":"object","description":"Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset.","remarks":"Deserialize as a dictionary object.","patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetControlFieldEnhancement"}}},"suggestions":{"$ref":"#/definitions/Suggestions"}}};
var schema357 = {"title":"AssetAttachment","type":"object","description":"Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info.","required":["max","assets"],"properties":{"max":{"description":"Null if there's no upper limit to the number of attached assets.","default":null,"anyOf":[{"type":"integer","minimum":1},{"type":"null"}]},"assets":{"type":"array","description":"Asset IDs (which may be wildcards) that may be attached to this asset","items":{"$ref":"#/definitions/AssetIdWildcard"}}}};

function validate178(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.max === undefined){
data.max = null;
}
var missing0;
if(((data.max === undefined) && (missing0 = "max")) || ((data.assets === undefined) && (missing0 = "assets"))){
validate178.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
var data0 = data.max;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = false;
var _errs3 = errors;
if(!((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0)))){
var err0 = {instancePath:instancePath+"/max",schemaPath:"#/properties/max/anyOf/0/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(errors === _errs3){
if(typeof data0 == "number"){
if(data0 < 1 || isNaN(data0)){
var err1 = {instancePath:instancePath+"/max",schemaPath:"#/properties/max/anyOf/0/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
var _errs5 = errors;
if(data0 !== null){
var err2 = {instancePath:instancePath+"/max",schemaPath:"#/properties/max/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
var err3 = {instancePath:instancePath+"/max",schemaPath:"#/properties/max/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate178.errors = vErrors;
return false;
}
else {
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs1 === errors;
if(valid0){
if(data.assets !== undefined){
var data1 = data.assets;
var _errs7 = errors;
if(errors === _errs7){
if(Array.isArray(data1)){
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var data2 = data1[i0];
var _errs9 = errors;
var _errs10 = errors;
if(errors === _errs10){
if(typeof data2 === "string"){
if(!pattern34.test(data2)){
validate178.errors = [{instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate178.errors = [{instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid2 = _errs9 === errors;
if(!valid2){
break;
}
}
}
else {
validate178.errors = [{instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate178.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate178.errors = vErrors;
return errors === 0;
}

var schema359 = {"title":"AssetControlFieldEnhancement","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["condition_meter"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"condition_meter"}}},"then":{"$ref":"#/definitions/AssetConditionMeterEnhancement"}}]};
var schema360 = {"title":"AssetConditionMeterEnhancement","type":"object","description":"Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".","required":["field_type","max"],"properties":{"field_type":{"type":"string","const":"condition_meter"},"max":{"type":"integer","description":"The maximum value of this meter."}}};

function validate180(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data0 = data.field_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("condition_meter" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
var _errs7 = errors;
if(errors === _errs7){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.field_type === undefined) && (missing0 = "field_type")) || ((data.max === undefined) && (missing0 = "max"))){
validate180.errors = [{instancePath:instancePath,schemaPath:"#/definitions/AssetConditionMeterEnhancement/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs9 = errors;
if(typeof data1 !== "string"){
validate180.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/definitions/AssetConditionMeterEnhancement/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("condition_meter" !== data1){
validate180.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/definitions/AssetConditionMeterEnhancement/properties/field_type/const",keyword:"const",params:{allowedValue: "condition_meter"},message:"must be equal to constant"}];
return false;
}
var valid4 = _errs9 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data.max !== undefined){
var data2 = data.max;
var _errs11 = errors;
if(!((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2)))){
validate180.errors = [{instancePath:instancePath+"/max",schemaPath:"#/definitions/AssetConditionMeterEnhancement/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid4 = _errs11 === errors;
}
else {
var valid4 = true;
}
}
}
}
else {
validate180.errors = [{instancePath:instancePath,schemaPath:"#/definitions/AssetConditionMeterEnhancement/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate180.errors = vErrors;
return false;
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing1;
if((data.field_type === undefined) && (missing1 = "field_type")){
validate180.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data.field_type !== undefined){
if(!(data.field_type === "condition_meter")){
validate180.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/enum",keyword:"enum",params:{allowedValues: schema359.properties.field_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate180.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate180.errors = vErrors;
return errors === 0;
}


function validate177(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.count_as_impact !== undefined){
var _errs1 = errors;
if(typeof data.count_as_impact !== "boolean"){
validate177.errors = [{instancePath:instancePath+"/count_as_impact",schemaPath:"#/properties/count_as_impact/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.shared !== undefined){
var _errs3 = errors;
if(typeof data.shared !== "boolean"){
validate177.errors = [{instancePath:instancePath+"/shared",schemaPath:"#/properties/shared/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.attachments !== undefined){
var _errs5 = errors;
if(!(validate178(data.attachments, {instancePath:instancePath+"/attachments",parentData:data,parentDataProperty:"attachments",rootData:rootData}))){
vErrors = vErrors === null ? validate178.errors : vErrors.concat(validate178.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.controls !== undefined){
var data3 = data.controls;
var _errs6 = errors;
if(errors === _errs6){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
var valid1 = true;
for(var key0 in data3){
if(pattern3.test(key0)){
var _errs8 = errors;
if(!(validate180(data3[key0], {instancePath:instancePath+"/controls/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data3,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate180.errors : vErrors.concat(validate180.errors);
errors = vErrors.length;
}
var valid1 = _errs8 === errors;
if(!valid1){
break;
}
}
}
}
else {
validate177.errors = [{instancePath:instancePath+"/controls",schemaPath:"#/properties/controls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs9 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate177.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate177.errors = vErrors;
return errors === 0;
}

var schema361 = {"title":"MoveEnhancement","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.","required":["roll_type"],"properties":{"roll_type":{"enum":["action_roll","no_roll","progress_roll","special_track"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"roll_type":{"type":"string","const":"action_roll"}}},"then":{"$ref":"#/definitions/MoveActionRollEnhancement"}},{"if":{"properties":{"roll_type":{"type":"string","const":"no_roll"}}},"then":{"$ref":"#/definitions/MoveNoRollEnhancement"}},{"if":{"properties":{"roll_type":{"type":"string","const":"progress_roll"}}},"then":{"$ref":"#/definitions/MoveProgressRollEnhancement"}},{"if":{"properties":{"roll_type":{"type":"string","const":"special_track"}}},"then":{"$ref":"#/definitions/MoveSpecialTrackEnhancement"}}]};
var schema362 = {"title":"MoveActionRollEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"action_roll"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerActionRollEnhancement"}}};
var schema363 = {"title":"AnyMoveIdWildcard","anyOf":[{"$ref":"#/definitions/MoveIdWildcard"},{"$ref":"#/definitions/AssetAbilityMoveIdWildcard"}]};

function validate186(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs0 = errors;
var valid0 = false;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data === "string"){
if(!pattern37.test(data)){
var err0 = {instancePath:instancePath,schemaPath:"#/definitions/MoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath,schemaPath:"#/definitions/MoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(typeof data === "string"){
if(!pattern36.test(data)){
var err2 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityMoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
var err3 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityMoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid0 = valid0 || _valid0;
}
if(!valid0){
var err4 = {instancePath:instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
validate186.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate186.errors = vErrors;
return errors === 0;
}

var schema366 = {"title":"TriggerActionRollEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerActionRollConditionEnhancement"}}}};
var schema367 = {"title":"TriggerActionRollConditionEnhancement","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"description":"A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.","default":null,"anyOf":[{"$ref":"#/definitions/ActionRollMethod"},{"type":"null"}]},"roll_options":{"default":null,"anyOf":[{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/RollableValue"}},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}};
var schema368 = {"title":"TriggerBy","type":"object","description":"Information on who can activate this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move.","required":["ally","player"],"properties":{"ally":{"type":"boolean","description":"Can this trigger be activated by one of the player's allies?","default":false},"player":{"type":"boolean","description":"Can this trigger be activated by the player who owns this?","default":true}}};
var schema369 = {"title":"ActionRollMethod","description":"  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `player_choice`: The player chooses which roll option to use.\n  - `highest`: Use the roll option with the best/highest value.\n  - `lowest`: Use the roll option with the worst/lowest value.\n  - `all`: Use _every_ roll option at once.","enum":["miss","weak_hit","strong_hit","player_choice","highest","lowest","all"]};
var schema370 = {"title":"RollableValue","type":"object","description":"Provides a value like a stat, condition meter, or other number (usually for use in an action roll). The expected value is an integer, or null.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `using` property as a discriminator.","required":["using"],"properties":{"using":{"enum":["stat","condition_meter","asset_control","asset_option","attached_asset_control","attached_asset_option","custom"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"using":{"type":"string","const":"stat"}}},"then":{"$ref":"#/definitions/StatValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"condition_meter"}}},"then":{"$ref":"#/definitions/ConditionMeterValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"asset_control"}}},"then":{"$ref":"#/definitions/AssetControlValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"asset_option"}}},"then":{"$ref":"#/definitions/AssetOptionValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_control"}}},"then":{"$ref":"#/definitions/AttachedAssetControlValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"attached_asset_option"}}},"then":{"$ref":"#/definitions/AttachedAssetOptionValueRef"}},{"if":{"properties":{"using":{"type":"string","const":"custom"}}},"then":{"$ref":"#/definitions/CustomValue"}}]};
var schema371 = {"title":"StatValueRef","type":"object","description":"A reference to the value of a standard player character stat.","required":["using","stat"],"properties":{"using":{"type":"string","description":"A reference to the value of a standard player character stat.","const":"stat"},"stat":{"$ref":"#/definitions/StatKey"}}};

function validate191(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.using === undefined) && (missing0 = "using")) || ((data.stat === undefined) && (missing0 = "stat"))){
validate191.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data0 = data.using;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate191.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("stat" !== data0){
validate191.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/const",keyword:"const",params:{allowedValue: "stat"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.stat !== undefined){
var data1 = data.stat;
var _errs3 = errors;
var _errs4 = errors;
if(errors === _errs4){
if(typeof data1 === "string"){
if(!pattern3.test(data1)){
validate191.errors = [{instancePath:instancePath+"/stat",schemaPath:"#/definitions/StatKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate191.errors = [{instancePath:instancePath+"/stat",schemaPath:"#/definitions/StatKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate191.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate191.errors = vErrors;
return errors === 0;
}

var schema373 = {"title":"ConditionMeterValueRef","type":"object","description":"A reference to the value of a standard player condition meter.","required":["using","condition_meter"],"properties":{"using":{"type":"string","description":"A reference to the value of a standard player condition meter.","const":"condition_meter"},"condition_meter":{"$ref":"#/definitions/ConditionMeterKey"}}};

function validate193(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.using === undefined) && (missing0 = "using")) || ((data.condition_meter === undefined) && (missing0 = "condition_meter"))){
validate193.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data0 = data.using;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate193.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("condition_meter" !== data0){
validate193.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/const",keyword:"const",params:{allowedValue: "condition_meter"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.condition_meter !== undefined){
var data1 = data.condition_meter;
var _errs3 = errors;
var _errs4 = errors;
if(errors === _errs4){
if(typeof data1 === "string"){
if(!pattern3.test(data1)){
validate193.errors = [{instancePath:instancePath+"/condition_meter",schemaPath:"#/definitions/ConditionMeterKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate193.errors = [{instancePath:instancePath+"/condition_meter",schemaPath:"#/definitions/ConditionMeterKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate193.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate193.errors = vErrors;
return errors === 0;
}

var schema375 = {"title":"AssetControlValueRef","type":"object","description":"A reference to the value of an asset control.","required":["using","control","assets"],"properties":{"using":{"type":"string","description":"A reference to the value of an asset control.","const":"asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the control field. For asset ability enhancements, `null` is used to represent the asset's own control fields.","default":null,"anyOf":[{"type":"array","default":null,"items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}};

function validate195(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.assets === undefined){
data.assets = null;
}
var missing0;
if((((data.using === undefined) && (missing0 = "using")) || ((data.control === undefined) && (missing0 = "control"))) || ((data.assets === undefined) && (missing0 = "assets"))){
validate195.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data0 = data.using;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate195.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset_control" !== data0){
validate195.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/const",keyword:"const",params:{allowedValue: "asset_control"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.control !== undefined){
var data1 = data.control;
var _errs3 = errors;
var _errs4 = errors;
if(errors === _errs4){
if(typeof data1 === "string"){
if(!pattern3.test(data1)){
validate195.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate195.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.assets;
var _errs6 = errors;
var _errs7 = errors;
var valid2 = false;
var _errs8 = errors;
if(errors === _errs8){
if(Array.isArray(data2)){
var valid3 = true;
var len0 = data2.length;
for(var i0=0; i0<len0; i0++){
var data3 = data2[i0];
var _errs10 = errors;
var _errs11 = errors;
if(errors === _errs11){
if(typeof data3 === "string"){
if(!pattern34.test(data3)){
var err0 = {instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var valid3 = _errs10 === errors;
if(!valid3){
break;
}
}
}
else {
var err2 = {instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs8 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
var _errs13 = errors;
if(data2 !== null){
var err3 = {instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var _valid0 = _errs13 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
var err4 = {instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
validate195.errors = vErrors;
return false;
}
else {
errors = _errs7;
if(vErrors !== null){
if(_errs7){
vErrors.length = _errs7;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs6 === errors;
}
}
}
}
else {
validate195.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate195.errors = vErrors;
return errors === 0;
}

var schema378 = {"title":"AssetOptionValueRef","type":"object","description":"A reference to the value of an asset option.","required":["using","option","assets"],"properties":{"using":{"type":"string","description":"A reference to the value of an asset option.","const":"asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."},"assets":{"description":"Asset IDs (which may be wildcarded) that may provide the option field. For asset ability enhancements, `null` is used to represent the asset's own option fields.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AssetIdWildcard"}},{"type":"null"}]}}};

function validate197(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.assets === undefined){
data.assets = null;
}
var missing0;
if((((data.using === undefined) && (missing0 = "using")) || ((data.option === undefined) && (missing0 = "option"))) || ((data.assets === undefined) && (missing0 = "assets"))){
validate197.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data0 = data.using;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate197.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset_option" !== data0){
validate197.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/const",keyword:"const",params:{allowedValue: "asset_option"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.option !== undefined){
var data1 = data.option;
var _errs3 = errors;
var _errs4 = errors;
if(errors === _errs4){
if(typeof data1 === "string"){
if(!pattern3.test(data1)){
validate197.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate197.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.assets;
var _errs6 = errors;
var _errs7 = errors;
var valid2 = false;
var _errs8 = errors;
if(errors === _errs8){
if(Array.isArray(data2)){
var valid3 = true;
var len0 = data2.length;
for(var i0=0; i0<len0; i0++){
var data3 = data2[i0];
var _errs10 = errors;
var _errs11 = errors;
if(errors === _errs11){
if(typeof data3 === "string"){
if(!pattern34.test(data3)){
var err0 = {instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath+"/assets/" + i0,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var valid3 = _errs10 === errors;
if(!valid3){
break;
}
}
}
else {
var err2 = {instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs8 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
var _errs13 = errors;
if(data2 !== null){
var err3 = {instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var _valid0 = _errs13 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
var err4 = {instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
validate197.errors = vErrors;
return false;
}
else {
errors = _errs7;
if(vErrors !== null){
if(_errs7){
vErrors.length = _errs7;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs6 === errors;
}
}
}
}
else {
validate197.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate197.errors = vErrors;
return errors === 0;
}

var schema381 = {"title":"AttachedAssetControlValueRef","type":"object","description":"A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.","required":["using","control"],"properties":{"using":{"type":"string","description":"A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle.","const":"attached_asset_control"},"control":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset control field.","examples":["health","integrity"]}}};

function validate199(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.using === undefined) && (missing0 = "using")) || ((data.control === undefined) && (missing0 = "control"))){
validate199.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data0 = data.using;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate199.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("attached_asset_control" !== data0){
validate199.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/const",keyword:"const",params:{allowedValue: "attached_asset_control"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.control !== undefined){
var data1 = data.control;
var _errs3 = errors;
var _errs4 = errors;
if(errors === _errs4){
if(typeof data1 === "string"){
if(!pattern3.test(data1)){
validate199.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate199.errors = [{instancePath:instancePath+"/control",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate199.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate199.errors = vErrors;
return errors === 0;
}

var schema383 = {"title":"AttachedAssetOptionValueRef","type":"object","description":"A reference to the value of an attached asset option.","required":["using","option"],"properties":{"using":{"type":"string","description":"A reference to the value of an attached asset option.","const":"attached_asset_option"},"option":{"$ref":"#/definitions/DictKey","description":"The dictionary key of the asset option field."}}};

function validate201(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.using === undefined) && (missing0 = "using")) || ((data.option === undefined) && (missing0 = "option"))){
validate201.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data0 = data.using;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate201.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("attached_asset_option" !== data0){
validate201.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/const",keyword:"const",params:{allowedValue: "attached_asset_option"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.option !== undefined){
var data1 = data.option;
var _errs3 = errors;
var _errs4 = errors;
if(errors === _errs4){
if(typeof data1 === "string"){
if(!pattern3.test(data1)){
validate201.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate201.errors = [{instancePath:instancePath+"/option",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate201.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate201.errors = vErrors;
return errors === 0;
}

var schema385 = {"title":"CustomValue","type":"object","description":"An arbitrary static integer value with a label.","required":["label","using","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"using":{"type":"string","description":"An arbitrary static integer value with a label.","const":"custom"},"value":{"type":"integer"}}};

function validate203(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((((data.label === undefined) && (missing0 = "label")) || ((data.using === undefined) && (missing0 = "using"))) || ((data.value === undefined) && (missing0 = "value"))){
validate203.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate203.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.using !== undefined){
var data1 = data.using;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate203.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("custom" !== data1){
validate203.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/const",keyword:"const",params:{allowedValue: "custom"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.value !== undefined){
var data2 = data.value;
var _errs6 = errors;
if(!((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2)))){
validate203.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate203.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate203.errors = vErrors;
return errors === 0;
}


function validate190(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data0 = data.using;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("stat" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate191(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate191.errors : vErrors.concat(validate191.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate190.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data1 = data.using;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("condition_meter" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate193(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate193.errors : vErrors.concat(validate193.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate190.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data2 = data.using;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("asset_control" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate195(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate195.errors : vErrors.concat(validate195.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate190.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data3 = data.using;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("asset_option" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate197(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate197.errors : vErrors.concat(validate197.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate190.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
if(valid0){
var _errs25 = errors;
var _errs26 = errors;
var valid9 = true;
var _errs27 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data4 = data.using;
if(typeof data4 !== "string"){
var err12 = {};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if("attached_asset_control" !== data4){
var err13 = {};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
}
var _valid4 = _errs27 === errors;
errors = _errs26;
if(vErrors !== null){
if(_errs26){
vErrors.length = _errs26;
}
else {
vErrors = null;
}
}
if(_valid4){
var _errs30 = errors;
if(!(validate199(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate199.errors : vErrors.concat(validate199.errors);
errors = vErrors.length;
}
var _valid4 = _errs30 === errors;
valid9 = _valid4;
}
if(!valid9){
var err14 = {instancePath:instancePath,schemaPath:"#/allOf/4/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
validate190.errors = vErrors;
return false;
}
var valid0 = _errs25 === errors;
if(valid0){
var _errs31 = errors;
var _errs32 = errors;
var valid11 = true;
var _errs33 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data5 = data.using;
if(typeof data5 !== "string"){
var err15 = {};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if("attached_asset_option" !== data5){
var err16 = {};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
var _valid5 = _errs33 === errors;
errors = _errs32;
if(vErrors !== null){
if(_errs32){
vErrors.length = _errs32;
}
else {
vErrors = null;
}
}
if(_valid5){
var _errs36 = errors;
if(!(validate201(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate201.errors : vErrors.concat(validate201.errors);
errors = vErrors.length;
}
var _valid5 = _errs36 === errors;
valid11 = _valid5;
}
if(!valid11){
var err17 = {instancePath:instancePath,schemaPath:"#/allOf/5/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate190.errors = vErrors;
return false;
}
var valid0 = _errs31 === errors;
if(valid0){
var _errs37 = errors;
var _errs38 = errors;
var valid13 = true;
var _errs39 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.using !== undefined){
var data6 = data.using;
if(typeof data6 !== "string"){
var err18 = {};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if("custom" !== data6){
var err19 = {};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
}
var _valid6 = _errs39 === errors;
errors = _errs38;
if(vErrors !== null){
if(_errs38){
vErrors.length = _errs38;
}
else {
vErrors = null;
}
}
if(_valid6){
var _errs42 = errors;
if(!(validate203(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate203.errors : vErrors.concat(validate203.errors);
errors = vErrors.length;
}
var _valid6 = _errs42 === errors;
valid13 = _valid6;
}
if(!valid13){
var err20 = {instancePath:instancePath,schemaPath:"#/allOf/6/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
validate190.errors = vErrors;
return false;
}
var valid0 = _errs37 === errors;
}
}
}
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.using === undefined) && (missing0 = "using")){
validate190.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data7 = data.using;
if(!(((((((data7 === "stat") || (data7 === "condition_meter")) || (data7 === "asset_control")) || (data7 === "asset_option")) || (data7 === "attached_asset_control")) || (data7 === "attached_asset_option")) || (data7 === "custom"))){
validate190.errors = [{instancePath:instancePath+"/using",schemaPath:"#/properties/using/enum",keyword:"enum",params:{allowedValues: schema370.properties.using.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate190.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate190.errors = vErrors;
return errors === 0;
}


function validate189(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.method === undefined){
data.method = null;
}
if(data.roll_options === undefined){
data.roll_options = null;
}
var missing0;
if(((data.method === undefined) && (missing0 = "method")) || ((data.roll_options === undefined) && (missing0 = "roll_options"))){
validate189.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.by !== undefined){
var data0 = data.by;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.ally === undefined){
data0.ally = false;
}
if(data0.player === undefined){
data0.player = true;
}
var missing1;
if(((data0.ally === undefined) && (missing1 = "ally")) || ((data0.player === undefined) && (missing1 = "player"))){
validate189.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var _errs4 = errors;
if(typeof data0.ally !== "boolean"){
validate189.errors = [{instancePath:instancePath+"/by/ally",schemaPath:"#/definitions/TriggerBy/properties/ally/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs4 === errors;
if(valid2){
var _errs6 = errors;
if(typeof data0.player !== "boolean"){
validate189.errors = [{instancePath:instancePath+"/by/player",schemaPath:"#/definitions/TriggerBy/properties/player/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs6 === errors;
}
}
}
else {
validate189.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data3 = data.method;
var _errs8 = errors;
var _errs9 = errors;
var valid3 = false;
var _errs10 = errors;
if(!(((((((data3 === "miss") || (data3 === "weak_hit")) || (data3 === "strong_hit")) || (data3 === "player_choice")) || (data3 === "highest")) || (data3 === "lowest")) || (data3 === "all"))){
var err0 = {instancePath:instancePath+"/method",schemaPath:"#/definitions/ActionRollMethod/enum",keyword:"enum",params:{allowedValues: schema369.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs12 = errors;
if(data3 !== null){
var err1 = {instancePath:instancePath+"/method",schemaPath:"#/properties/method/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err2 = {instancePath:instancePath+"/method",schemaPath:"#/properties/method/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate189.errors = vErrors;
return false;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs8 === errors;
if(valid0){
var data4 = data.roll_options;
var _errs14 = errors;
var _errs15 = errors;
var valid5 = false;
var _errs16 = errors;
if(errors === _errs16){
if(Array.isArray(data4)){
var valid6 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var _errs18 = errors;
if(!(validate190(data4[i0], {instancePath:instancePath+"/roll_options/" + i0,parentData:data4,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate190.errors : vErrors.concat(validate190.errors);
errors = vErrors.length;
}
var valid6 = _errs18 === errors;
if(!valid6){
break;
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid1 = _errs16 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
var _errs19 = errors;
if(data4 !== null){
var err4 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid1 = _errs19 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
var err5 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate189.errors = vErrors;
return false;
}
else {
errors = _errs15;
if(vErrors !== null){
if(_errs15){
vErrors.length = _errs15;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs14 === errors;
if(valid0){
if(data.text !== undefined){
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(errors === _errs22){
if(!(typeof data.text === "string")){
validate189.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate189.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate189.errors = vErrors;
return errors === 0;
}


function validate188(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.conditions === undefined) && (missing0 = "conditions")){
validate188.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.conditions !== undefined){
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate189(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate189.errors : vErrors.concat(validate189.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate188.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
else {
validate188.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate188.errors = vErrors;
return errors === 0;
}


function validate185(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enhances === undefined){
data.enhances = null;
}
var missing0;
if(((data.roll_type === undefined) && (missing0 = "roll_type")) || ((data.enhances === undefined) && (missing0 = "enhances"))){
validate185.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.roll_type !== undefined){
var data0 = data.roll_type;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate185.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("action_roll" !== data0){
validate185.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "action_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data1 = data.enhances;
var _errs3 = errors;
var _errs4 = errors;
var valid1 = false;
var _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var _errs7 = errors;
if(!(validate186(data1[i0], {instancePath:instancePath+"/enhances/" + i0,parentData:data1,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
var err0 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
var _errs8 = errors;
if(data1 !== null){
var err1 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs8 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate185.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
if(valid0){
if(data.trigger !== undefined){
var _errs10 = errors;
if(!(validate188(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate188.errors : vErrors.concat(validate188.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate185.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate185.errors = vErrors;
return errors === 0;
}

var schema388 = {"title":"MoveNoRollEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"no_roll"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerNoRollEnhancement"}}};
var schema389 = {"title":"TriggerNoRollEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerNoRollCondition"}}}};
var schema390 = {"title":"TriggerNoRollCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"type":"null","default":null},"roll_options":{"type":"null","description":"The options available when rolling with this trigger condition.","default":null},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}};

function validate212(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.method === undefined){
data.method = null;
}
if(data.roll_options === undefined){
data.roll_options = null;
}
var missing0;
if(((data.method === undefined) && (missing0 = "method")) || ((data.roll_options === undefined) && (missing0 = "roll_options"))){
validate212.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.by !== undefined){
var data0 = data.by;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.ally === undefined){
data0.ally = false;
}
if(data0.player === undefined){
data0.player = true;
}
var missing1;
if(((data0.ally === undefined) && (missing1 = "ally")) || ((data0.player === undefined) && (missing1 = "player"))){
validate212.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var _errs4 = errors;
if(typeof data0.ally !== "boolean"){
validate212.errors = [{instancePath:instancePath+"/by/ally",schemaPath:"#/definitions/TriggerBy/properties/ally/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs4 === errors;
if(valid2){
var _errs6 = errors;
if(typeof data0.player !== "boolean"){
validate212.errors = [{instancePath:instancePath+"/by/player",schemaPath:"#/definitions/TriggerBy/properties/player/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs6 === errors;
}
}
}
else {
validate212.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs8 = errors;
if(data.method !== null){
validate212.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/type",keyword:"type",params:{type: "null"},message:"must be null"}];
return false;
}
var valid0 = _errs8 === errors;
if(valid0){
var _errs10 = errors;
if(data.roll_options !== null){
validate212.errors = [{instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/type",keyword:"type",params:{type: "null"},message:"must be null"}];
return false;
}
var valid0 = _errs10 === errors;
if(valid0){
if(data.text !== undefined){
var _errs12 = errors;
var _errs13 = errors;
if(errors === _errs13){
if(errors === _errs13){
if(!(typeof data.text === "string")){
validate212.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate212.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate212.errors = vErrors;
return errors === 0;
}


function validate211(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.conditions === undefined) && (missing0 = "conditions")){
validate211.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.conditions !== undefined){
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate212(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate212.errors : vErrors.concat(validate212.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate211.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
else {
validate211.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate211.errors = vErrors;
return errors === 0;
}


function validate209(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enhances === undefined){
data.enhances = null;
}
var missing0;
if(((data.roll_type === undefined) && (missing0 = "roll_type")) || ((data.enhances === undefined) && (missing0 = "enhances"))){
validate209.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.roll_type !== undefined){
var data0 = data.roll_type;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate209.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("no_roll" !== data0){
validate209.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "no_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data1 = data.enhances;
var _errs3 = errors;
var _errs4 = errors;
var valid1 = false;
var _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var _errs7 = errors;
if(!(validate186(data1[i0], {instancePath:instancePath+"/enhances/" + i0,parentData:data1,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
var err0 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
var _errs8 = errors;
if(data1 !== null){
var err1 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs8 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate209.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
if(valid0){
if(data.trigger !== undefined){
var _errs10 = errors;
if(!(validate211(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate211.errors : vErrors.concat(validate211.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate209.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate209.errors = vErrors;
return errors === 0;
}

var schema393 = {"title":"MoveProgressRollEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"progress_roll"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerProgressRollEnhancement"}}};
var schema394 = {"title":"TriggerProgressRollEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerProgressRollConditionEnhancement"}}}};
var schema395 = {"title":"TriggerProgressRollConditionEnhancement","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"description":"A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.","default":null,"anyOf":[{"$ref":"#/definitions/ProgressRollMethod","default":"progress_roll"},{"type":"null"}]},"roll_options":{"default":null,"anyOf":[{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/ProgressRollOption"}},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}};
var schema397 = {"title":"ProgressRollMethod","description":"  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `progress_roll`: Make a progress roll on a progress track associated with this move.","enum":["miss","weak_hit","strong_hit","progress_roll"]};
var schema398 = {"title":"ProgressRollOption","type":"object","required":["using"],"properties":{"using":{"type":"string","const":"progress_track"}}};

function validate219(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.method === undefined){
data.method = null;
}
if(data.roll_options === undefined){
data.roll_options = null;
}
var missing0;
if(((data.method === undefined) && (missing0 = "method")) || ((data.roll_options === undefined) && (missing0 = "roll_options"))){
validate219.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.by !== undefined){
var data0 = data.by;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.ally === undefined){
data0.ally = false;
}
if(data0.player === undefined){
data0.player = true;
}
var missing1;
if(((data0.ally === undefined) && (missing1 = "ally")) || ((data0.player === undefined) && (missing1 = "player"))){
validate219.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var _errs4 = errors;
if(typeof data0.ally !== "boolean"){
validate219.errors = [{instancePath:instancePath+"/by/ally",schemaPath:"#/definitions/TriggerBy/properties/ally/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs4 === errors;
if(valid2){
var _errs6 = errors;
if(typeof data0.player !== "boolean"){
validate219.errors = [{instancePath:instancePath+"/by/player",schemaPath:"#/definitions/TriggerBy/properties/player/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs6 === errors;
}
}
}
else {
validate219.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data3 = data.method;
var _errs8 = errors;
var _errs9 = errors;
var valid3 = false;
var _errs10 = errors;
if(!((((data3 === "miss") || (data3 === "weak_hit")) || (data3 === "strong_hit")) || (data3 === "progress_roll"))){
var err0 = {instancePath:instancePath+"/method",schemaPath:"#/definitions/ProgressRollMethod/enum",keyword:"enum",params:{allowedValues: schema397.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs12 = errors;
if(data3 !== null){
var err1 = {instancePath:instancePath+"/method",schemaPath:"#/properties/method/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err2 = {instancePath:instancePath+"/method",schemaPath:"#/properties/method/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate219.errors = vErrors;
return false;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs8 === errors;
if(valid0){
var data4 = data.roll_options;
var _errs14 = errors;
var _errs15 = errors;
var valid5 = false;
var _errs16 = errors;
if(errors === _errs16){
if(Array.isArray(data4)){
var valid6 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs18 = errors;
var _errs19 = errors;
if(errors === _errs19){
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
var missing2;
if((data5.using === undefined) && (missing2 = "using")){
var err3 = {instancePath:instancePath+"/roll_options/" + i0,schemaPath:"#/definitions/ProgressRollOption/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
else {
if(data5.using !== undefined){
var data6 = data5.using;
if(typeof data6 !== "string"){
var err4 = {instancePath:instancePath+"/roll_options/" + i0+"/using",schemaPath:"#/definitions/ProgressRollOption/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if("progress_track" !== data6){
var err5 = {instancePath:instancePath+"/roll_options/" + i0+"/using",schemaPath:"#/definitions/ProgressRollOption/properties/using/const",keyword:"const",params:{allowedValue: "progress_track"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
}
}
else {
var err6 = {instancePath:instancePath+"/roll_options/" + i0,schemaPath:"#/definitions/ProgressRollOption/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
var valid6 = _errs18 === errors;
if(!valid6){
break;
}
}
}
else {
var err7 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
var _valid1 = _errs16 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
var _errs23 = errors;
if(data4 !== null){
var err8 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
var _valid1 = _errs23 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
var err9 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
validate219.errors = vErrors;
return false;
}
else {
errors = _errs15;
if(vErrors !== null){
if(_errs15){
vErrors.length = _errs15;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs14 === errors;
if(valid0){
if(data.text !== undefined){
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(!(typeof data.text === "string")){
validate219.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate219.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate219.errors = vErrors;
return errors === 0;
}


function validate218(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.conditions === undefined) && (missing0 = "conditions")){
validate218.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.conditions !== undefined){
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate219(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate219.errors : vErrors.concat(validate219.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate218.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
else {
validate218.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate218.errors = vErrors;
return errors === 0;
}


function validate216(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enhances === undefined){
data.enhances = null;
}
var missing0;
if(((data.roll_type === undefined) && (missing0 = "roll_type")) || ((data.enhances === undefined) && (missing0 = "enhances"))){
validate216.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.roll_type !== undefined){
var data0 = data.roll_type;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate216.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("progress_roll" !== data0){
validate216.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "progress_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data1 = data.enhances;
var _errs3 = errors;
var _errs4 = errors;
var valid1 = false;
var _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var _errs7 = errors;
if(!(validate186(data1[i0], {instancePath:instancePath+"/enhances/" + i0,parentData:data1,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
var err0 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
var _errs8 = errors;
if(data1 !== null){
var err1 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs8 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate216.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
if(valid0){
if(data.trigger !== undefined){
var _errs10 = errors;
if(!(validate218(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate218.errors : vErrors.concat(validate218.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate216.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate216.errors = vErrors;
return errors === 0;
}

var schema400 = {"title":"MoveSpecialTrackEnhancement","type":"object","description":"An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value.","required":["roll_type","enhances"],"properties":{"roll_type":{"type":"string","description":"A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties.","const":"special_track"},"enhances":{"description":"An array of wildcard IDs. An item must match one of the wildcard IDs to receive this enhancement. If this is `null`, any ID is valid.","default":null,"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AnyMoveIdWildcard"}},{"type":"null"}]},"trigger":{"$ref":"#/definitions/TriggerSpecialTrackEnhancement"}}};
var schema401 = {"title":"TriggerSpecialTrackEnhancement","type":"object","description":"Describes changes/additions made to the enhanced move's trigger conditions.","required":["conditions"],"properties":{"conditions":{"type":"array","description":"Trigger conditions added to the enhanced move.","items":{"$ref":"#/definitions/TriggerSpecialTrackConditionEnhancement"}}}};
var schema402 = {"title":"TriggerSpecialTrackConditionEnhancement","type":"object","description":"A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged).","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"description":"A `null` value means this condition provides no roll mechanic of its own; it must be used with another trigger condition that provides a non-null `method`.","default":null,"anyOf":[{"$ref":"#/definitions/SpecialTrackRollMethod"},{"type":"null"}]},"roll_options":{"default":null,"anyOf":[{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/TriggerSpecialTrackConditionOption"}},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}};
var schema404 = {"title":"SpecialTrackRollMethod","description":"  - `miss`: An automatic miss.\n  - `weak_hit`: An automatic weak hit.\n  - `strong_hit`: An automatic strong hit.\n  - `player_choice`: The player chooses which roll option to use.\n  - `highest`: Use the roll option with the best/highest value.\n  - `lowest`: Use the roll option with the worst/lowest value.\n  - `all`: Use _every_ roll option at once.","enum":["miss","weak_hit","strong_hit","player_choice","highest","lowest","all"]};
var schema405 = {"title":"TriggerSpecialTrackConditionOption","type":"object","required":["using"],"properties":{"using":{"$ref":"#/definitions/SpecialTrackType"}}};

function validate227(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.using === undefined) && (missing0 = "using")){
validate227.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.using !== undefined){
var data0 = data.using;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern3.test(data0)){
validate227.errors = [{instancePath:instancePath+"/using",schemaPath:"#/definitions/SpecialTrackType/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""}];
return false;
}
}
else {
validate227.errors = [{instancePath:instancePath+"/using",schemaPath:"#/definitions/SpecialTrackType/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
}
}
else {
validate227.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate227.errors = vErrors;
return errors === 0;
}


function validate226(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.method === undefined){
data.method = null;
}
if(data.roll_options === undefined){
data.roll_options = null;
}
var missing0;
if(((data.method === undefined) && (missing0 = "method")) || ((data.roll_options === undefined) && (missing0 = "roll_options"))){
validate226.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.by !== undefined){
var data0 = data.by;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.ally === undefined){
data0.ally = false;
}
if(data0.player === undefined){
data0.player = true;
}
var missing1;
if(((data0.ally === undefined) && (missing1 = "ally")) || ((data0.player === undefined) && (missing1 = "player"))){
validate226.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var _errs4 = errors;
if(typeof data0.ally !== "boolean"){
validate226.errors = [{instancePath:instancePath+"/by/ally",schemaPath:"#/definitions/TriggerBy/properties/ally/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs4 === errors;
if(valid2){
var _errs6 = errors;
if(typeof data0.player !== "boolean"){
validate226.errors = [{instancePath:instancePath+"/by/player",schemaPath:"#/definitions/TriggerBy/properties/player/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs6 === errors;
}
}
}
else {
validate226.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data3 = data.method;
var _errs8 = errors;
var _errs9 = errors;
var valid3 = false;
var _errs10 = errors;
if(!(((((((data3 === "miss") || (data3 === "weak_hit")) || (data3 === "strong_hit")) || (data3 === "player_choice")) || (data3 === "highest")) || (data3 === "lowest")) || (data3 === "all"))){
var err0 = {instancePath:instancePath+"/method",schemaPath:"#/definitions/SpecialTrackRollMethod/enum",keyword:"enum",params:{allowedValues: schema404.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs12 = errors;
if(data3 !== null){
var err1 = {instancePath:instancePath+"/method",schemaPath:"#/properties/method/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err2 = {instancePath:instancePath+"/method",schemaPath:"#/properties/method/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate226.errors = vErrors;
return false;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs8 === errors;
if(valid0){
var data4 = data.roll_options;
var _errs14 = errors;
var _errs15 = errors;
var valid5 = false;
var _errs16 = errors;
if(errors === _errs16){
if(Array.isArray(data4)){
var valid6 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var _errs18 = errors;
if(!(validate227(data4[i0], {instancePath:instancePath+"/roll_options/" + i0,parentData:data4,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate227.errors : vErrors.concat(validate227.errors);
errors = vErrors.length;
}
var valid6 = _errs18 === errors;
if(!valid6){
break;
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid1 = _errs16 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
var _errs19 = errors;
if(data4 !== null){
var err4 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid1 = _errs19 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
var err5 = {instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate226.errors = vErrors;
return false;
}
else {
errors = _errs15;
if(vErrors !== null){
if(_errs15){
vErrors.length = _errs15;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs14 === errors;
if(valid0){
if(data.text !== undefined){
var _errs21 = errors;
var _errs22 = errors;
if(errors === _errs22){
if(errors === _errs22){
if(!(typeof data.text === "string")){
validate226.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate226.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate226.errors = vErrors;
return errors === 0;
}


function validate225(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.conditions === undefined) && (missing0 = "conditions")){
validate225.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.conditions !== undefined){
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate226(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate226.errors : vErrors.concat(validate226.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate225.errors = vErrors;
return errors === 0;
}


function validate223(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enhances === undefined){
data.enhances = null;
}
var missing0;
if(((data.roll_type === undefined) && (missing0 = "roll_type")) || ((data.enhances === undefined) && (missing0 = "enhances"))){
validate223.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.roll_type !== undefined){
var data0 = data.roll_type;
var _errs1 = errors;
if(typeof data0 !== "string"){
validate223.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("special_track" !== data0){
validate223.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "special_track"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data1 = data.enhances;
var _errs3 = errors;
var _errs4 = errors;
var valid1 = false;
var _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var _errs7 = errors;
if(!(validate186(data1[i0], {instancePath:instancePath+"/enhances/" + i0,parentData:data1,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
var err0 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
var _errs8 = errors;
if(data1 !== null){
var err1 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs8 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate223.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
if(valid0){
if(data.trigger !== undefined){
var _errs10 = errors;
if(!(validate225(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate225.errors : vErrors.concat(validate225.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate223.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate223.errors = vErrors;
return errors === 0;
}


function validate184(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data0 = data.roll_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("action_roll" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate185(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate185.errors : vErrors.concat(validate185.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate184.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data1 = data.roll_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("no_roll" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate209(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate209.errors : vErrors.concat(validate209.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate184.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data2 = data.roll_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("progress_roll" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate216(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate216.errors : vErrors.concat(validate216.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate184.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data3 = data.roll_type;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("special_track" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate223(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate223.errors : vErrors.concat(validate223.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate184.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.roll_type === undefined) && (missing0 = "roll_type")){
validate184.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.roll_type !== undefined){
var data4 = data.roll_type;
if(!((((data4 === "action_roll") || (data4 === "no_roll")) || (data4 === "progress_roll")) || (data4 === "special_track"))){
validate184.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/enum",keyword:"enum",params:{allowedValues: schema361.properties.roll_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate184.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate184.errors = vErrors;
return errors === 0;
}


function validate176(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.label === undefined) && (missing0 = "label")) || ((data.choice_type === undefined) && (missing0 = "choice_type"))){
validate176.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate176.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.choice_type !== undefined){
var data1 = data.choice_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate176.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice" !== data1){
validate176.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhance_asset !== undefined){
var _errs6 = errors;
if(!(validate177(data.enhance_asset, {instancePath:instancePath+"/enhance_asset",parentData:data,parentDataProperty:"enhance_asset",rootData:rootData}))){
vErrors = vErrors === null ? validate177.errors : vErrors.concat(validate177.errors);
errors = vErrors.length;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhance_moves !== undefined){
var data3 = data.enhance_moves;
var _errs7 = errors;
if(errors === _errs7){
if(Array.isArray(data3)){
var valid2 = true;
var len0 = data3.length;
for(var i0=0; i0<len0; i0++){
var _errs9 = errors;
if(!(validate184(data3[i0], {instancePath:instancePath+"/enhance_moves/" + i0,parentData:data3,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate184.errors : vErrors.concat(validate184.errors);
errors = vErrors.length;
}
var valid2 = _errs9 === errors;
if(!valid2){
break;
}
}
}
else {
validate176.errors = [{instancePath:instancePath+"/enhance_moves",schemaPath:"#/properties/enhance_moves/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate176.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate176.errors = vErrors;
return errors === 0;
}

var schema408 = {"type":"object","description":"Represents a grouping of options in a list of choices.","remarks":"Semantics are similar to the HTML `<optgroup>` element.","required":["name","choice_type","choices"],"properties":{"name":{"$ref":"#/definitions/Label","description":"A label for this option group."},"choice_type":{"type":"string","const":"choice_group"},"choices":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SelectEnhancementFieldChoice"}}}}};

function validate234(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.choices === undefined){
data.choices = {};
}
var missing0;
if((((data.name === undefined) && (missing0 = "name")) || ((data.choice_type === undefined) && (missing0 = "choice_type"))) || ((data.choices === undefined) && (missing0 = "choices"))){
validate234.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.name !== undefined){
var _errs1 = errors;
if(typeof data.name !== "string"){
validate234.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.choice_type !== undefined){
var data1 = data.choice_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate234.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/properties/choice_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("choice_group" !== data1){
validate234.errors = [{instancePath:instancePath+"/choice_type",schemaPath:"#/properties/choice_type/const",keyword:"const",params:{allowedValue: "choice_group"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.choices;
var _errs6 = errors;
if(errors === _errs6){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var valid2 = true;
for(var key0 in data2){
if(pattern3.test(key0)){
var _errs8 = errors;
if(!(validate176(data2[key0], {instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data2,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate176.errors : vErrors.concat(validate176.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
}
else {
validate234.errors = [{instancePath:instancePath+"/choices",schemaPath:"#/properties/choices/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
}
}
}
else {
validate234.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate234.errors = vErrors;
return errors === 0;
}


function validate175(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.choices === undefined){
data.choices = {};
}
if(data.value === undefined){
data.value = null;
}
var missing0;
if(((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.choices === undefined) && (missing0 = "choices"))) || ((data.value === undefined) && (missing0 = "value"))){
validate175.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate175.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate175.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("select_enhancement" !== data1){
validate175.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "select_enhancement"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.choices;
var _errs6 = errors;
if(errors === _errs6){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var valid2 = true;
for(var key0 in data2){
if(pattern3.test(key0)){
var data3 = data2[key0];
var _errs8 = errors;
var _errs10 = errors;
var _errs11 = errors;
var valid4 = true;
var _errs12 = errors;
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
if(data3.choice_type !== undefined){
var data4 = data3.choice_type;
if(typeof data4 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("choice" !== data4){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs12 === errors;
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs15 = errors;
if(!(validate176(data3, {instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data2,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate176.errors : vErrors.concat(validate176.errors);
errors = vErrors.length;
}
var _valid0 = _errs15 === errors;
valid4 = _valid0;
}
if(!valid4){
var err2 = {instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/choices/patternProperties/%5E%5Ba-z%5D%5Ba-z_%5D*%24/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate175.errors = vErrors;
return false;
}
var valid3 = _errs10 === errors;
if(valid3){
var _errs16 = errors;
var _errs17 = errors;
var valid6 = true;
var _errs18 = errors;
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
if(data3.choice_type !== undefined){
var data5 = data3.choice_type;
if(typeof data5 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("choice_group" !== data5){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs18 === errors;
errors = _errs17;
if(vErrors !== null){
if(_errs17){
vErrors.length = _errs17;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs21 = errors;
if(!(validate234(data3, {instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data2,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate234.errors : vErrors.concat(validate234.errors);
errors = vErrors.length;
}
var _valid1 = _errs21 === errors;
valid6 = _valid1;
}
if(!valid6){
var err5 = {instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/choices/patternProperties/%5E%5Ba-z%5D%5Ba-z_%5D*%24/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate175.errors = vErrors;
return false;
}
var valid3 = _errs16 === errors;
}
if(errors === _errs8){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
var missing1;
if((data3.choice_type === undefined) && (missing1 = "choice_type")){
validate175.errors = [{instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/choices/patternProperties/%5E%5Ba-z%5D%5Ba-z_%5D*%24/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data3.choice_type !== undefined){
var data6 = data3.choice_type;
if(!((data6 === "choice") || (data6 === "choice_group"))){
validate175.errors = [{instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/choice_type",schemaPath:"#/properties/choices/patternProperties/%5E%5Ba-z%5D%5Ba-z_%5D*%24/properties/choice_type/enum",keyword:"enum",params:{allowedValues: schema352.properties.choices.patternProperties["^[a-z][a-z_]*$"].properties.choice_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate175.errors = [{instancePath:instancePath+"/choices/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/choices/patternProperties/%5E%5Ba-z%5D%5Ba-z_%5D*%24/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
}
else {
validate175.errors = [{instancePath:instancePath+"/choices",schemaPath:"#/properties/choices/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs6 === errors;
if(valid0){
var data7 = data.value;
var _errs24 = errors;
var _errs25 = errors;
var valid9 = false;
var _errs26 = errors;
var _errs27 = errors;
if(errors === _errs27){
if(typeof data7 === "string"){
if(!pattern3.test(data7)){
var err6 = {instancePath:instancePath+"/value",schemaPath:"#/definitions/DictKey/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z_]*$"},message:"must match pattern \""+"^[a-z][a-z_]*$"+"\""};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
}
else {
var err7 = {instancePath:instancePath+"/value",schemaPath:"#/definitions/DictKey/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
var _valid2 = _errs26 === errors;
valid9 = valid9 || _valid2;
if(!valid9){
var _errs29 = errors;
if(data7 !== null){
var err8 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
var _valid2 = _errs29 === errors;
valid9 = valid9 || _valid2;
}
if(!valid9){
var err9 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
validate175.errors = vErrors;
return false;
}
else {
errors = _errs25;
if(vErrors !== null){
if(_errs25){
vErrors.length = _errs25;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs24 === errors;
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(errors === _errs32){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate175.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate175.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
else {
validate175.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate175.errors = vErrors;
return errors === 0;
}

var schema412 = {"title":"TextField","type":"object","description":"Represents an input that accepts plain text.","remarks":"Semantics are similar to the HTML `<input type=\"text\">` element.","required":["label","field_type","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"text"},"value":{"description":"The content of this text input, or `null` if it's empty","default":null,"anyOf":[{"type":"string"},{"type":"null"}]},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}};

function validate238(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value === undefined){
data.value = null;
}
var missing0;
if((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.value === undefined) && (missing0 = "value"))){
validate238.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate238.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate238.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("text" !== data1){
validate238.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "text"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.value;
var _errs6 = errors;
var _errs7 = errors;
var valid2 = false;
var _errs8 = errors;
if(typeof data2 !== "string"){
var err0 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs8 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
var _errs10 = errors;
if(data2 !== null){
var err1 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
var err2 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate238.errors = vErrors;
return false;
}
else {
errors = _errs7;
if(vErrors !== null){
if(_errs7){
vErrors.length = _errs7;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs6 === errors;
if(valid0){
if(data.icon !== undefined){
var data3 = data.icon;
var _errs12 = errors;
var _errs13 = errors;
if(errors === _errs13){
if(errors === _errs13){
if(typeof data3 === "string"){
if(!pattern15.test(data3)){
validate238.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate238.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate238.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate238.errors = vErrors;
return errors === 0;
}


function validate170(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data0 = data.field_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("select_value" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate171(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate171.errors : vErrors.concat(validate171.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate170.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data1 = data.field_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("select_enhancement" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate175(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate175.errors : vErrors.concat(validate175.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate170.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data2 = data.field_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("text" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate238(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate238.errors : vErrors.concat(validate238.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate170.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.field_type === undefined) && (missing0 = "field_type")){
validate170.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.field_type !== undefined){
var data3 = data.field_type;
if(!(((data3 === "select_value") || (data3 === "select_enhancement")) || (data3 === "text"))){
validate170.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/enum",keyword:"enum",params:{allowedValues: schema331.properties.field_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate170.errors = vErrors;
return errors === 0;
}

var schema416 = {"title":"AssetAbility","type":"object","description":"An asset ability: one of the purchasable features of an asset. Most assets have three.","required":["_id","enabled","text"],"properties":{"_id":{"$ref":"#/definitions/AssetAbilityId","description":"The unique Datasworn ID for this node."},"name":{"$ref":"#/definitions/Label","description":"A handful of asset abilities have a label/name, for instance classic Ironsworn companion assets. Most canonical assets omit this property."},"enabled":{"type":"boolean","description":"Is this asset ability enabled?","default":false},"options":{"type":"object","description":"Fields that are expected to be set once and remain the same through the life of the asset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetAbilityOptionField"}}},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of this asset ability."},"controls":{"type":"object","description":"Fields whose values are expected to change over the life of the asset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetAbilityControlField"}}},"oracles":{"title":"AssetAbilityOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"AssetAbilityOracleRollable"}}},"enhance_asset":{"$ref":"#/definitions/AssetEnhancement","description":"Changes made to the asset, when this ability is enabled."},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"enhance_moves":{"type":"array","description":"Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions.","items":{"$ref":"#/definitions/MoveEnhancement"}},"moves":{"title":"AssetAbilityMoves","type":"object","description":"Unique moves added by this asset ability.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedMove","title":"AssetAbilityMove"}}}}};
var schema417 = {"title":"AssetAbilityId","type":"string","description":"A unique ID representing an AssetAbility object.","pattern":"^asset\\.ability:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"};
var pattern192 = new RegExp("^asset\\.ability:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$", "u");
var schema419 = {"title":"AssetAbilityOptionField","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["text"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"text"}}},"then":{"$ref":"#/definitions/TextField"}}]};

function validate243(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data0 = data.field_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("text" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate238(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate238.errors : vErrors.concat(validate238.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate243.errors = vErrors;
return false;
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.field_type === undefined) && (missing0 = "field_type")){
validate243.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.field_type !== undefined){
if(!(data.field_type === "text")){
validate243.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/enum",keyword:"enum",params:{allowedValues: schema419.properties.field_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate243.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate243.errors = vErrors;
return errors === 0;
}

var schema421 = {"title":"AssetAbilityControlField","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["clock","counter","checkbox","text"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"clock"}}},"then":{"$ref":"#/definitions/ClockField"}},{"if":{"properties":{"field_type":{"type":"string","const":"counter"}}},"then":{"$ref":"#/definitions/CounterField"}},{"if":{"properties":{"field_type":{"type":"string","const":"checkbox"}}},"then":{"$ref":"#/definitions/AssetCheckboxField"}},{"if":{"properties":{"field_type":{"type":"string","const":"text"}}},"then":{"$ref":"#/definitions/TextField"}}]};
var schema422 = {"title":"ClockField","type":"object","description":"A clock with 4 or more segments.","remarks":"Semantics are similar to HTML `<input type=\"number\">`, but rendered as a clock (a circle with equally sized wedges).","required":["label","field_type","rollable","min","max","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"clock"},"rollable":{"type":"boolean","default":false,"const":false},"min":{"type":"integer","description":"The minimum number of filled clock segments. This is always 0.","default":0,"const":0},"max":{"title":"ClockSize","type":"integer","description":"The size of the clock -- in other words, the maximum number of filled clock segments. Standard clocks have 4, 6, 8, or 10 segments.","multipleOf":2,"minimum":2},"value":{"type":"integer","description":"The current value of this input.","default":0},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}};

function validate247(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.rollable === undefined){
data.rollable = false;
}
if(data.min === undefined){
data.min = 0;
}
if(data.value === undefined){
data.value = 0;
}
var missing0;
if(((((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.rollable === undefined) && (missing0 = "rollable"))) || ((data.min === undefined) && (missing0 = "min"))) || ((data.max === undefined) && (missing0 = "max"))) || ((data.value === undefined) && (missing0 = "value"))){
validate247.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate247.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate247.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("clock" !== data1){
validate247.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "clock"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.rollable;
var _errs6 = errors;
if(typeof data2 !== "boolean"){
validate247.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data2){
validate247.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs6 === errors;
if(valid0){
var data3 = data.min;
var _errs8 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
validate247.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
if(0 !== data3){
validate247.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/const",keyword:"const",params:{allowedValue: 0},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs8 === errors;
if(valid0){
if(data.max !== undefined){
var data4 = data.max;
var _errs10 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
validate247.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
if(errors === _errs10){
if(typeof data4 == "number"){
if(data4 < 2 || isNaN(data4)){
validate247.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/minimum",keyword:"minimum",params:{comparison: ">=", limit: 2},message:"must be >= 2"}];
return false;
}
else {
var res0;
if((2 === 0 || (res0 = data4/2, res0 !== parseInt(res0)))){
validate247.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/multipleOf",keyword:"multipleOf",params:{multipleOf: 2},message:"must be multiple of 2"}];
return false;
}
}
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data5 = data.value;
var _errs12 = errors;
if(!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))){
validate247.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs12 === errors;
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(errors === _errs15){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate247.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate247.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate247.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate247.errors = vErrors;
return errors === 0;
}

var schema425 = {"title":"CounterField","type":"object","description":"A basic counter representing a non-rollable integer value. They usually start at 0, and may or may not have a maximum.","remarks":"Semantics are similar to `<input type=\"number\" step=\"1\">`","required":["label","field_type","rollable","min","max","value"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"counter"},"rollable":{"type":"boolean","default":false,"const":false},"min":{"type":"integer","description":"The (inclusive) minimum value.","default":0},"max":{"description":"The (inclusive) maximum value, or `null` if there's no maximum.","default":null,"anyOf":[{"type":"integer"},{"type":"null"}]},"value":{"type":"integer","description":"The current value of this input.","default":0},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."}}};

function validate249(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.rollable === undefined){
data.rollable = false;
}
if(data.min === undefined){
data.min = 0;
}
if(data.max === undefined){
data.max = null;
}
if(data.value === undefined){
data.value = 0;
}
var missing0;
if(((((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.rollable === undefined) && (missing0 = "rollable"))) || ((data.min === undefined) && (missing0 = "min"))) || ((data.max === undefined) && (missing0 = "max"))) || ((data.value === undefined) && (missing0 = "value"))){
validate249.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate249.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate249.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("counter" !== data1){
validate249.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "counter"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.rollable;
var _errs6 = errors;
if(typeof data2 !== "boolean"){
validate249.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data2){
validate249.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs6 === errors;
if(valid0){
var data3 = data.min;
var _errs8 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
validate249.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs8 === errors;
if(valid0){
var data4 = data.max;
var _errs10 = errors;
var _errs11 = errors;
var valid2 = false;
var _errs12 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err0 = {instancePath:instancePath+"/max",schemaPath:"#/properties/max/anyOf/0/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
var _errs14 = errors;
if(data4 !== null){
var err1 = {instancePath:instancePath+"/max",schemaPath:"#/properties/max/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs14 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
var err2 = {instancePath:instancePath+"/max",schemaPath:"#/properties/max/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate249.errors = vErrors;
return false;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs10 === errors;
if(valid0){
var data5 = data.value;
var _errs16 = errors;
if(!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))){
validate249.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs16 === errors;
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs18 = errors;
var _errs19 = errors;
if(errors === _errs19){
if(errors === _errs19){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate249.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate249.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate249.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate249.errors = vErrors;
return errors === 0;
}

var schema428 = {"title":"AssetCheckboxField","type":"object","required":["label","field_type","value","is_impact","disables_asset"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"checkbox"},"value":{"type":"boolean","description":"Is the box checked?","default":false},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."},"is_impact":{"type":"boolean","description":"Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?","default":false},"disables_asset":{"type":"boolean","description":"Does this field disable the asset when its value is set to `true`?","default":false}}};

function validate251(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value === undefined){
data.value = false;
}
if(data.is_impact === undefined){
data.is_impact = false;
}
if(data.disables_asset === undefined){
data.disables_asset = false;
}
var missing0;
if((((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.value === undefined) && (missing0 = "value"))) || ((data.is_impact === undefined) && (missing0 = "is_impact"))) || ((data.disables_asset === undefined) && (missing0 = "disables_asset"))){
validate251.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate251.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate251.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("checkbox" !== data1){
validate251.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "checkbox"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs6 = errors;
if(typeof data.value !== "boolean"){
validate251.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs6 === errors;
if(valid0){
if(data.icon !== undefined){
var data3 = data.icon;
var _errs8 = errors;
var _errs9 = errors;
if(errors === _errs9){
if(errors === _errs9){
if(typeof data3 === "string"){
if(!pattern15.test(data3)){
validate251.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate251.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs11 = errors;
if(typeof data.is_impact !== "boolean"){
validate251.errors = [{instancePath:instancePath+"/is_impact",schemaPath:"#/properties/is_impact/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs11 === errors;
if(valid0){
var _errs13 = errors;
if(typeof data.disables_asset !== "boolean"){
validate251.errors = [{instancePath:instancePath+"/disables_asset",schemaPath:"#/properties/disables_asset/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs13 === errors;
}
}
}
}
}
}
}
else {
validate251.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate251.errors = vErrors;
return errors === 0;
}


function validate246(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data0 = data.field_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("clock" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate247(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate247.errors : vErrors.concat(validate247.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate246.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data1 = data.field_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("counter" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate249(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate249.errors : vErrors.concat(validate249.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate246.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data2 = data.field_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("checkbox" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate251(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate251.errors : vErrors.concat(validate251.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate246.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data3 = data.field_type;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("text" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate238(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate238.errors : vErrors.concat(validate238.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate246.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.field_type === undefined) && (missing0 = "field_type")){
validate246.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.field_type !== undefined){
var data4 = data.field_type;
if(!((((data4 === "clock") || (data4 === "counter")) || (data4 === "checkbox")) || (data4 === "text"))){
validate246.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/enum",keyword:"enum",params:{allowedValues: schema421.properties.field_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate246.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate246.errors = vErrors;
return errors === 0;
}

var schema431 = {"title":"EmbeddedOracleRollable","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `oracle_type` property as a discriminator.","required":["oracle_type"],"properties":{"oracle_type":{"enum":["table_text","table_text2","table_text3","column_text","column_text2","column_text3"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text"}}},"then":{"$ref":"#/definitions/EmbeddedOracleTableText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text2"}}},"then":{"$ref":"#/definitions/EmbeddedOracleTableText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"table_text3"}}},"then":{"$ref":"#/definitions/EmbeddedOracleTableText3"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text"}}},"then":{"$ref":"#/definitions/EmbeddedOracleColumnText"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text2"}}},"then":{"$ref":"#/definitions/EmbeddedOracleColumnText2"}},{"if":{"properties":{"oracle_type":{"type":"string","const":"column_text3"}}},"then":{"$ref":"#/definitions/EmbeddedOracleColumnText3"}}]};
var schema432 = {"title":"EmbeddedOracleTableText","type":"object","required":["_id","type","name","oracle_type","dice","column_labels","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"TextColumnLabels","type":"object","default":{"roll":"Roll","text":"Result"},"required":["roll","text"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}}}};
var schema433 = {"title":"EmbeddedOracleRollableId","anyOf":[{"$ref":"#/definitions/AssetAbilityOracleRollableId"},{"$ref":"#/definitions/TruthOptionOracleRollableId"},{"$ref":"#/definitions/MoveOracleRollableId"}]};
var schema434 = {"title":"AssetAbilityOracleRollableId","type":"string","description":"A unique ID representing an AssetAbilityOracleRollable object.","pattern":"^asset\\.ability\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"};
var schema435 = {"title":"TruthOptionOracleRollableId","type":"string","description":"A unique ID representing a TruthOptionOracleRollable object.","pattern":"^truth\\.option\\.oracle_rollable:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"};
var schema436 = {"title":"MoveOracleRollableId","type":"string","description":"A unique ID representing a MoveOracleRollable object.","pattern":"^move\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"};
var pattern199 = new RegExp("^asset\\.ability\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$", "u");
var pattern200 = new RegExp("^truth\\.option\\.oracle_rollable:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)$", "u");
var pattern201 = new RegExp("^move\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$", "u");

function validate257(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs0 = errors;
var valid0 = false;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data === "string"){
if(!pattern199.test(data)){
var err0 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableId/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath,schemaPath:"#/definitions/AssetAbilityOracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(typeof data === "string"){
if(!pattern200.test(data)){
var err2 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableId/pattern",keyword:"pattern",params:{pattern: "^truth\\.option\\.oracle_rollable:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^truth\\.option\\.oracle_rollable:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
var err3 = {instancePath:instancePath,schemaPath:"#/definitions/TruthOptionOracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(typeof data === "string"){
if(!pattern201.test(data)){
var err4 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableId/pattern",keyword:"pattern",params:{pattern: "^move\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^move\\.oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"+"\""};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
else {
var err5 = {instancePath:instancePath,schemaPath:"#/definitions/MoveOracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
var _valid0 = _errs7 === errors;
valid0 = valid0 || _valid0;
}
}
if(!valid0){
var err6 = {instancePath:instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
validate257.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate257.errors = vErrors;
return errors === 0;
}


function validate256(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
if(data.column_labels === undefined){
data.column_labels = {"roll":"Roll","text":"Result"};
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate256.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate257(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate257.errors : vErrors.concat(validate257.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs2 = errors;
if(typeof data1 !== "string"){
validate256.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate256.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate256.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs7 = errors;
if(typeof data.canonical_name !== "string"){
validate256.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs10 = errors;
if(typeof data4 !== "string"){
validate256.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_text" !== data4){
validate256.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_text"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs12 = errors;
if(typeof data.color !== "string"){
validate256.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(errors === _errs16){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate256.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate256.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs18 = errors;
if(errors === _errs18){
if(Array.isArray(data7)){
var valid5 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate256.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate256.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid5 = _errs20 === errors;
if(!valid5){
break;
}
}
}
else {
validate256.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data9 = data.dice;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern22.test(data9)){
validate256.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate256.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs23 === errors;
if(valid0){
if(data.match !== undefined){
var _errs26 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data11 = data.recommended_rolls;
var _errs27 = errors;
if(errors === _errs27){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
if(data11.min === undefined){
data11.min = 1;
}
if(data11.max === undefined){
data11.max = 1;
}
var missing1;
if(((data11.min === undefined) && (missing1 = "min")) || ((data11.max === undefined) && (missing1 = "max"))){
validate256.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data12 = data11.min;
var _errs29 = errors;
if(!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))){
validate256.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs29 === errors;
if(valid8){
var data13 = data11.max;
var _errs31 = errors;
if(!((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13)))){
validate256.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs31 === errors;
}
}
}
else {
validate256.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs33 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs35 = errors;
if(typeof data._comment !== "string"){
validate256.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data17 = data.column_labels;
var _errs37 = errors;
if(errors === _errs37){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
var missing2;
if(((data17.roll === undefined) && (missing2 = "roll")) || ((data17.text === undefined) && (missing2 = "text"))){
validate256.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data17.roll !== undefined){
var _errs39 = errors;
if(typeof data17.roll !== "string"){
validate256.errors = [{instancePath:instancePath+"/column_labels/roll",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs39 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data17.text !== undefined){
var _errs42 = errors;
if(typeof data17.text !== "string"){
validate256.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs42 === errors;
}
else {
var valid9 = true;
}
}
}
}
else {
validate256.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs37 === errors;
if(valid0){
if(data.rows !== undefined){
var data20 = data.rows;
var _errs45 = errors;
if(errors === _errs45){
if(Array.isArray(data20)){
var valid12 = true;
var len1 = data20.length;
for(var i1=0; i1<len1; i1++){
var _errs47 = errors;
if(!(validate71(data20[i1], {instancePath:instancePath+"/rows/" + i1,parentData:data20,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate71.errors : vErrors.concat(validate71.errors);
errors = vErrors.length;
}
var valid12 = _errs47 === errors;
if(!valid12){
break;
}
}
}
else {
validate256.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate256.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate256.errors = vErrors;
return errors === 0;
}

var schema445 = {"title":"EmbeddedOracleTableText2","type":"object","required":["_id","type","name","oracle_type","dice","column_labels","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text2"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text2ColumnLabels","type":"object","default":{"roll":"Roll","text":"Result","text2":"Details"},"required":["roll","text","text2"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}}}};

function validate264(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
if(data.column_labels === undefined){
data.column_labels = {"roll":"Roll","text":"Result","text2":"Details"};
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate264.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate257(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate257.errors : vErrors.concat(validate257.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs2 = errors;
if(typeof data1 !== "string"){
validate264.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate264.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate264.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs7 = errors;
if(typeof data.canonical_name !== "string"){
validate264.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs10 = errors;
if(typeof data4 !== "string"){
validate264.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_text2" !== data4){
validate264.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_text2"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs12 = errors;
if(typeof data.color !== "string"){
validate264.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(errors === _errs16){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate264.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate264.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs18 = errors;
if(errors === _errs18){
if(Array.isArray(data7)){
var valid5 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate264.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate264.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid5 = _errs20 === errors;
if(!valid5){
break;
}
}
}
else {
validate264.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data9 = data.dice;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern22.test(data9)){
validate264.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate264.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs23 === errors;
if(valid0){
if(data.match !== undefined){
var _errs26 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data11 = data.recommended_rolls;
var _errs27 = errors;
if(errors === _errs27){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
if(data11.min === undefined){
data11.min = 1;
}
if(data11.max === undefined){
data11.max = 1;
}
var missing1;
if(((data11.min === undefined) && (missing1 = "min")) || ((data11.max === undefined) && (missing1 = "max"))){
validate264.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data12 = data11.min;
var _errs29 = errors;
if(!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))){
validate264.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs29 === errors;
if(valid8){
var data13 = data11.max;
var _errs31 = errors;
if(!((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13)))){
validate264.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs31 === errors;
}
}
}
else {
validate264.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs33 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs35 = errors;
if(typeof data._comment !== "string"){
validate264.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data17 = data.column_labels;
var _errs37 = errors;
if(errors === _errs37){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
var missing2;
if((((data17.roll === undefined) && (missing2 = "roll")) || ((data17.text === undefined) && (missing2 = "text"))) || ((data17.text2 === undefined) && (missing2 = "text2"))){
validate264.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data17.roll !== undefined){
var _errs39 = errors;
if(typeof data17.roll !== "string"){
validate264.errors = [{instancePath:instancePath+"/column_labels/roll",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs39 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data17.text !== undefined){
var _errs42 = errors;
if(typeof data17.text !== "string"){
validate264.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs42 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data17.text2 !== undefined){
var _errs45 = errors;
if(typeof data17.text2 !== "string"){
validate264.errors = [{instancePath:instancePath+"/column_labels/text2",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs45 === errors;
}
else {
var valid9 = true;
}
}
}
}
}
else {
validate264.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs37 === errors;
if(valid0){
if(data.rows !== undefined){
var data21 = data.rows;
var _errs48 = errors;
if(errors === _errs48){
if(Array.isArray(data21)){
var valid13 = true;
var len1 = data21.length;
for(var i1=0; i1<len1; i1++){
var _errs50 = errors;
if(!(validate98(data21[i1], {instancePath:instancePath+"/rows/" + i1,parentData:data21,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate98.errors : vErrors.concat(validate98.errors);
errors = vErrors.length;
}
var valid13 = _errs50 === errors;
if(!valid13){
break;
}
}
}
else {
validate264.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs48 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate264.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate264.errors = vErrors;
return errors === 0;
}

var schema455 = {"title":"EmbeddedOracleTableText3","type":"object","required":["_id","type","name","oracle_type","dice","column_labels","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"table_text3"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"column_labels":{"title":"Text3ColumnLabels","type":"object","required":["roll","text","text2","text3"],"properties":{"roll":{"$ref":"#/definitions/Label"},"text":{"$ref":"#/definitions/Label"},"text2":{"$ref":"#/definitions/Label"},"text3":{"$ref":"#/definitions/Label"}}},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}}}};

function validate271(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.column_labels === undefined) && (missing0 = "column_labels"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate271.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate257(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate257.errors : vErrors.concat(validate257.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs2 = errors;
if(typeof data1 !== "string"){
validate271.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate271.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate271.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs7 = errors;
if(typeof data.canonical_name !== "string"){
validate271.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs10 = errors;
if(typeof data4 !== "string"){
validate271.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("table_text3" !== data4){
validate271.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "table_text3"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs12 = errors;
if(typeof data.color !== "string"){
validate271.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(errors === _errs16){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate271.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate271.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs18 = errors;
if(errors === _errs18){
if(Array.isArray(data7)){
var valid5 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate271.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate271.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid5 = _errs20 === errors;
if(!valid5){
break;
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data9 = data.dice;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern22.test(data9)){
validate271.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate271.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs23 === errors;
if(valid0){
if(data.match !== undefined){
var _errs26 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data11 = data.recommended_rolls;
var _errs27 = errors;
if(errors === _errs27){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
if(data11.min === undefined){
data11.min = 1;
}
if(data11.max === undefined){
data11.max = 1;
}
var missing1;
if(((data11.min === undefined) && (missing1 = "min")) || ((data11.max === undefined) && (missing1 = "max"))){
validate271.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data12 = data11.min;
var _errs29 = errors;
if(!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))){
validate271.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs29 === errors;
if(valid8){
var data13 = data11.max;
var _errs31 = errors;
if(!((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13)))){
validate271.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs31 === errors;
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs33 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs35 = errors;
if(typeof data._comment !== "string"){
validate271.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.column_labels !== undefined){
var data17 = data.column_labels;
var _errs37 = errors;
if(errors === _errs37){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
var missing2;
if(((((data17.roll === undefined) && (missing2 = "roll")) || ((data17.text === undefined) && (missing2 = "text"))) || ((data17.text2 === undefined) && (missing2 = "text2"))) || ((data17.text3 === undefined) && (missing2 = "text3"))){
validate271.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data17.roll !== undefined){
var _errs39 = errors;
if(typeof data17.roll !== "string"){
validate271.errors = [{instancePath:instancePath+"/column_labels/roll",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs39 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data17.text !== undefined){
var _errs42 = errors;
if(typeof data17.text !== "string"){
validate271.errors = [{instancePath:instancePath+"/column_labels/text",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs42 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data17.text2 !== undefined){
var _errs45 = errors;
if(typeof data17.text2 !== "string"){
validate271.errors = [{instancePath:instancePath+"/column_labels/text2",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs45 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data17.text3 !== undefined){
var _errs48 = errors;
if(typeof data17.text3 !== "string"){
validate271.errors = [{instancePath:instancePath+"/column_labels/text3",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs48 === errors;
}
else {
var valid9 = true;
}
}
}
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/column_labels",schemaPath:"#/properties/column_labels/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data22 = data.rows;
var _errs51 = errors;
if(errors === _errs51){
if(Array.isArray(data22)){
var valid14 = true;
var len1 = data22.length;
for(var i1=0; i1<len1; i1++){
var _errs53 = errors;
if(!(validate112(data22[i1], {instancePath:instancePath+"/rows/" + i1,parentData:data22,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate112.errors : vErrors.concat(validate112.errors);
errors = vErrors.length;
}
var valid14 = _errs53 === errors;
if(!valid14){
break;
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs51 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate271.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate271.errors = vErrors;
return errors === 0;
}

var schema466 = {"title":"EmbeddedOracleColumnText","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText"}}}};

function validate278(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate278.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate257(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate257.errors : vErrors.concat(validate257.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs2 = errors;
if(typeof data1 !== "string"){
validate278.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate278.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate278.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs7 = errors;
if(typeof data.canonical_name !== "string"){
validate278.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs10 = errors;
if(typeof data4 !== "string"){
validate278.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("column_text" !== data4){
validate278.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "column_text"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs12 = errors;
if(typeof data.color !== "string"){
validate278.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(errors === _errs16){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate278.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate278.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs18 = errors;
if(errors === _errs18){
if(Array.isArray(data7)){
var valid5 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate278.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate278.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid5 = _errs20 === errors;
if(!valid5){
break;
}
}
}
else {
validate278.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data9 = data.dice;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern22.test(data9)){
validate278.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate278.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs23 === errors;
if(valid0){
if(data.match !== undefined){
var _errs26 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data11 = data.recommended_rolls;
var _errs27 = errors;
if(errors === _errs27){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
if(data11.min === undefined){
data11.min = 1;
}
if(data11.max === undefined){
data11.max = 1;
}
var missing1;
if(((data11.min === undefined) && (missing1 = "min")) || ((data11.max === undefined) && (missing1 = "max"))){
validate278.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data12 = data11.min;
var _errs29 = errors;
if(!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))){
validate278.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs29 === errors;
if(valid8){
var data13 = data11.max;
var _errs31 = errors;
if(!((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13)))){
validate278.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs31 === errors;
}
}
}
else {
validate278.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs33 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs35 = errors;
if(typeof data._comment !== "string"){
validate278.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data17 = data.rows;
var _errs37 = errors;
if(errors === _errs37){
if(Array.isArray(data17)){
var valid9 = true;
var len1 = data17.length;
for(var i1=0; i1<len1; i1++){
var _errs39 = errors;
if(!(validate71(data17[i1], {instancePath:instancePath+"/rows/" + i1,parentData:data17,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate71.errors : vErrors.concat(validate71.errors);
errors = vErrors.length;
}
var valid9 = _errs39 === errors;
if(!valid9){
break;
}
}
}
else {
validate278.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate278.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate278.errors = vErrors;
return errors === 0;
}

var schema473 = {"title":"EmbeddedOracleColumnText2","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text2"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText2"}}}};

function validate285(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate285.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate257(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate257.errors : vErrors.concat(validate257.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs2 = errors;
if(typeof data1 !== "string"){
validate285.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate285.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate285.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs7 = errors;
if(typeof data.canonical_name !== "string"){
validate285.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs10 = errors;
if(typeof data4 !== "string"){
validate285.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("column_text2" !== data4){
validate285.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "column_text2"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs12 = errors;
if(typeof data.color !== "string"){
validate285.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(errors === _errs16){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate285.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate285.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs18 = errors;
if(errors === _errs18){
if(Array.isArray(data7)){
var valid5 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate285.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate285.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid5 = _errs20 === errors;
if(!valid5){
break;
}
}
}
else {
validate285.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data9 = data.dice;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern22.test(data9)){
validate285.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate285.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs23 === errors;
if(valid0){
if(data.match !== undefined){
var _errs26 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data11 = data.recommended_rolls;
var _errs27 = errors;
if(errors === _errs27){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
if(data11.min === undefined){
data11.min = 1;
}
if(data11.max === undefined){
data11.max = 1;
}
var missing1;
if(((data11.min === undefined) && (missing1 = "min")) || ((data11.max === undefined) && (missing1 = "max"))){
validate285.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data12 = data11.min;
var _errs29 = errors;
if(!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))){
validate285.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs29 === errors;
if(valid8){
var data13 = data11.max;
var _errs31 = errors;
if(!((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13)))){
validate285.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs31 === errors;
}
}
}
else {
validate285.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs33 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs35 = errors;
if(typeof data._comment !== "string"){
validate285.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data17 = data.rows;
var _errs37 = errors;
if(errors === _errs37){
if(Array.isArray(data17)){
var valid9 = true;
var len1 = data17.length;
for(var i1=0; i1<len1; i1++){
var _errs39 = errors;
if(!(validate98(data17[i1], {instancePath:instancePath+"/rows/" + i1,parentData:data17,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate98.errors : vErrors.concat(validate98.errors);
errors = vErrors.length;
}
var valid9 = _errs39 === errors;
if(!valid9){
break;
}
}
}
else {
validate285.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate285.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate285.errors = vErrors;
return errors === 0;
}

var schema480 = {"title":"EmbeddedOracleColumnText3","type":"object","required":["_id","type","name","oracle_type","dice","rows"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedOracleRollableId"},"type":{"type":"string","const":"oracle_rollable"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"oracle_type":{"type":"string","const":"column_text3"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","description":"The roll used to select a result on this oracle.","default":"1d100"},"match":{"$ref":"#/definitions/OracleMatchBehavior","description":"Most oracle tables are insensitive to matches, but a few define special match behavior."},"recommended_rolls":{"type":"object","required":["min","max"],"properties":{"min":{"type":"integer","default":1},"max":{"type":"integer","default":1}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"rows":{"type":"array","description":"An array of objects, each representing a single row of the table.","rollable":true,"items":{"$ref":"#/definitions/OracleRollableRowText3"}}}};

function validate292(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.oracle_type === undefined) && (missing0 = "oracle_type"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.rows === undefined) && (missing0 = "rows"))){
validate292.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var _errs1 = errors;
if(!(validate257(data._id, {instancePath:instancePath+"/_id",parentData:data,parentDataProperty:"_id",rootData:rootData}))){
vErrors = vErrors === null ? validate257.errors : vErrors.concat(validate257.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs2 = errors;
if(typeof data1 !== "string"){
validate292.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("oracle_rollable" !== data1){
validate292.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "oracle_rollable"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate292.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs7 = errors;
if(typeof data.canonical_name !== "string"){
validate292.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
var _errs10 = errors;
if(typeof data4 !== "string"){
validate292.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("column_text3" !== data4){
validate292.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/const",keyword:"const",params:{allowedValue: "column_text3"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs12 = errors;
if(typeof data.color !== "string"){
validate292.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(errors === _errs16){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate292.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate292.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs18 = errors;
if(errors === _errs18){
if(Array.isArray(data7)){
var valid5 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate292.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate292.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid5 = _errs20 === errors;
if(!valid5){
break;
}
}
}
else {
validate292.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data9 = data.dice;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern22.test(data9)){
validate292.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate292.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs23 === errors;
if(valid0){
if(data.match !== undefined){
var _errs26 = errors;
if(!(validate61(data.match, {instancePath:instancePath+"/match",parentData:data,parentDataProperty:"match",rootData:rootData}))){
vErrors = vErrors === null ? validate61.errors : vErrors.concat(validate61.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.recommended_rolls !== undefined){
var data11 = data.recommended_rolls;
var _errs27 = errors;
if(errors === _errs27){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
if(data11.min === undefined){
data11.min = 1;
}
if(data11.max === undefined){
data11.max = 1;
}
var missing1;
if(((data11.min === undefined) && (missing1 = "min")) || ((data11.max === undefined) && (missing1 = "max"))){
validate292.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var data12 = data11.min;
var _errs29 = errors;
if(!((typeof data12 == "number") && (!(data12 % 1) && !isNaN(data12)))){
validate292.errors = [{instancePath:instancePath+"/recommended_rolls/min",schemaPath:"#/properties/recommended_rolls/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs29 === errors;
if(valid8){
var data13 = data11.max;
var _errs31 = errors;
if(!((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13)))){
validate292.errors = [{instancePath:instancePath+"/recommended_rolls/max",schemaPath:"#/properties/recommended_rolls/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid8 = _errs31 === errors;
}
}
}
else {
validate292.errors = [{instancePath:instancePath+"/recommended_rolls",schemaPath:"#/properties/recommended_rolls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs33 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs35 = errors;
if(typeof data._comment !== "string"){
validate292.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rows !== undefined){
var data17 = data.rows;
var _errs37 = errors;
if(errors === _errs37){
if(Array.isArray(data17)){
var valid9 = true;
var len1 = data17.length;
for(var i1=0; i1<len1; i1++){
var _errs39 = errors;
if(!(validate112(data17[i1], {instancePath:instancePath+"/rows/" + i1,parentData:data17,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate112.errors : vErrors.concat(validate112.errors);
errors = vErrors.length;
}
var valid9 = _errs39 === errors;
if(!valid9){
break;
}
}
}
else {
validate292.errors = [{instancePath:instancePath+"/rows",schemaPath:"#/properties/rows/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate292.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate292.errors = vErrors;
return errors === 0;
}


function validate255(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data0 = data.oracle_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("table_text" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate256(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate256.errors : vErrors.concat(validate256.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate255.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data1 = data.oracle_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("table_text2" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate264(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate264.errors : vErrors.concat(validate264.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate255.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data2 = data.oracle_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("table_text3" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate271(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate271.errors : vErrors.concat(validate271.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate255.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data3 = data.oracle_type;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("column_text" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate278(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate278.errors : vErrors.concat(validate278.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate255.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
if(valid0){
var _errs25 = errors;
var _errs26 = errors;
var valid9 = true;
var _errs27 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data4 = data.oracle_type;
if(typeof data4 !== "string"){
var err12 = {};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if("column_text2" !== data4){
var err13 = {};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
}
}
var _valid4 = _errs27 === errors;
errors = _errs26;
if(vErrors !== null){
if(_errs26){
vErrors.length = _errs26;
}
else {
vErrors = null;
}
}
if(_valid4){
var _errs30 = errors;
if(!(validate285(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate285.errors : vErrors.concat(validate285.errors);
errors = vErrors.length;
}
var _valid4 = _errs30 === errors;
valid9 = _valid4;
}
if(!valid9){
var err14 = {instancePath:instancePath,schemaPath:"#/allOf/4/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
validate255.errors = vErrors;
return false;
}
var valid0 = _errs25 === errors;
if(valid0){
var _errs31 = errors;
var _errs32 = errors;
var valid11 = true;
var _errs33 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracle_type !== undefined){
var data5 = data.oracle_type;
if(typeof data5 !== "string"){
var err15 = {};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if("column_text3" !== data5){
var err16 = {};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
}
var _valid5 = _errs33 === errors;
errors = _errs32;
if(vErrors !== null){
if(_errs32){
vErrors.length = _errs32;
}
else {
vErrors = null;
}
}
if(_valid5){
var _errs36 = errors;
if(!(validate292(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate292.errors : vErrors.concat(validate292.errors);
errors = vErrors.length;
}
var _valid5 = _errs36 === errors;
valid11 = _valid5;
}
if(!valid11){
var err17 = {instancePath:instancePath,schemaPath:"#/allOf/5/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate255.errors = vErrors;
return false;
}
var valid0 = _errs31 === errors;
}
}
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.oracle_type === undefined) && (missing0 = "oracle_type")){
validate255.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.oracle_type !== undefined){
var data6 = data.oracle_type;
if(!((((((data6 === "table_text") || (data6 === "table_text2")) || (data6 === "table_text3")) || (data6 === "column_text")) || (data6 === "column_text2")) || (data6 === "column_text3"))){
validate255.errors = [{instancePath:instancePath+"/oracle_type",schemaPath:"#/properties/oracle_type/enum",keyword:"enum",params:{allowedValues: schema431.properties.oracle_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate255.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate255.errors = vErrors;
return errors === 0;
}

var schema487 = {"title":"EmbeddedMove","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.","required":["roll_type"],"properties":{"roll_type":{"enum":["action_roll","no_roll","progress_roll","special_track"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"roll_type":{"type":"string","const":"action_roll"}}},"then":{"$ref":"#/definitions/EmbeddedActionRollMove"}},{"if":{"properties":{"roll_type":{"type":"string","const":"no_roll"}}},"then":{"$ref":"#/definitions/EmbeddedNoRollMove"}},{"if":{"properties":{"roll_type":{"type":"string","const":"progress_roll"}}},"then":{"$ref":"#/definitions/EmbeddedProgressRollMove"}},{"if":{"properties":{"roll_type":{"type":"string","const":"special_track"}}},"then":{"$ref":"#/definitions/EmbeddedSpecialTrackMove"}}]};
var schema488 = {"title":"EmbeddedActionRollMove","type":"object","required":["_id","type","name","roll_type","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"action_roll"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerActionRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":true}}};
var schema489 = {"title":"AssetAbilityMoveId","type":"string","description":"A unique ID representing an AssetAbilityMove object.","pattern":"^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"};
var pattern221 = new RegExp("^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$", "u");
var schema495 = {"title":"TriggerActionRoll","type":"object","description":"Describes trigger conditions for a move that makes an action roll.","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","items":{"$ref":"#/definitions/TriggerActionRollCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}};
var schema496 = {"title":"TriggerActionRollCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"$ref":"#/definitions/ActionRollMethod"},"roll_options":{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/RollableValue"}},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}};

function validate306(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.method === undefined) && (missing0 = "method")) || ((data.roll_options === undefined) && (missing0 = "roll_options"))){
validate306.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.by !== undefined){
var data0 = data.by;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.ally === undefined){
data0.ally = false;
}
if(data0.player === undefined){
data0.player = true;
}
var missing1;
if(((data0.ally === undefined) && (missing1 = "ally")) || ((data0.player === undefined) && (missing1 = "player"))){
validate306.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var _errs4 = errors;
if(typeof data0.ally !== "boolean"){
validate306.errors = [{instancePath:instancePath+"/by/ally",schemaPath:"#/definitions/TriggerBy/properties/ally/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs4 === errors;
if(valid2){
var _errs6 = errors;
if(typeof data0.player !== "boolean"){
validate306.errors = [{instancePath:instancePath+"/by/player",schemaPath:"#/definitions/TriggerBy/properties/player/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs6 === errors;
}
}
}
else {
validate306.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.method !== undefined){
var data3 = data.method;
var _errs8 = errors;
if(!(((((((data3 === "miss") || (data3 === "weak_hit")) || (data3 === "strong_hit")) || (data3 === "player_choice")) || (data3 === "highest")) || (data3 === "lowest")) || (data3 === "all"))){
validate306.errors = [{instancePath:instancePath+"/method",schemaPath:"#/definitions/ActionRollMethod/enum",keyword:"enum",params:{allowedValues: schema369.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_options !== undefined){
var data4 = data.roll_options;
var _errs10 = errors;
if(errors === _errs10){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var _errs12 = errors;
if(!(validate190(data4[i0], {instancePath:instancePath+"/roll_options/" + i0,parentData:data4,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate190.errors : vErrors.concat(validate190.errors);
errors = vErrors.length;
}
var valid4 = _errs12 === errors;
if(!valid4){
break;
}
}
}
else {
validate306.errors = [{instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs13 = errors;
var _errs14 = errors;
if(errors === _errs14){
if(errors === _errs14){
if(!(typeof data.text === "string")){
validate306.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate306.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate306.errors = vErrors;
return errors === 0;
}

var pattern224 = new RegExp(".*\\.{3}", "u");

function validate305(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.conditions === undefined) && (missing0 = "conditions")) || ((data.text === undefined) && (missing0 = "text"))){
validate305.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.conditions !== undefined){
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate306(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate306.errors : vErrors.concat(validate306.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate305.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var data2 = data.text;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data2 === "string")){
validate305.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
if(errors === _errs4){
if(typeof data2 === "string"){
if(!pattern224.test(data2)){
validate305.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/pattern",keyword:"pattern",params:{pattern: ".*\\.{3}"},message:"must match pattern \""+".*\\.{3}"+"\""}];
return false;
}
}
else {
validate305.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate305.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate305.errors = vErrors;
return errors === 0;
}

var schema502 = {"title":"MoveOutcomes","type":"object","description":"A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated.","required":["strong_hit","weak_hit","miss"],"properties":{"strong_hit":{"$ref":"#/definitions/MoveOutcome"},"weak_hit":{"$ref":"#/definitions/MoveOutcome"},"miss":{"$ref":"#/definitions/MoveOutcome"}}};
var schema503 = {"title":"MoveOutcome","type":"object","required":["text"],"properties":{"text":{"$ref":"#/definitions/MarkdownString","type":"string","pattern":"On a __(strong hit|weak hit|miss)__"},"oracle_rolls":{"type":"array","items":{"$ref":"#/definitions/OracleRoll"}}}};
var pattern225 = new RegExp("On a __(strong hit|weak hit|miss)__", "u");

function validate311(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.text === undefined) && (missing0 = "text")){
validate311.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.text !== undefined){
var data0 = data.text;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(errors === _errs2){
if(!(typeof data0 === "string")){
validate311.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
if(errors === _errs1){
if(typeof data0 === "string"){
if(!pattern225.test(data0)){
validate311.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/pattern",keyword:"pattern",params:{pattern: "On a __(strong hit|weak hit|miss)__"},message:"must match pattern \""+"On a __(strong hit|weak hit|miss)__"+"\""}];
return false;
}
}
else {
validate311.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data1 = data.oracle_rolls;
var _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
var len0 = data1.length;
for(var i0=0; i0<len0; i0++){
var _errs7 = errors;
if(!(validate77(data1[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data1,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate311.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate311.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate311.errors = vErrors;
return errors === 0;
}


function validate310(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((((data.strong_hit === undefined) && (missing0 = "strong_hit")) || ((data.weak_hit === undefined) && (missing0 = "weak_hit"))) || ((data.miss === undefined) && (missing0 = "miss"))){
validate310.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.strong_hit !== undefined){
var _errs1 = errors;
if(!(validate311(data.strong_hit, {instancePath:instancePath+"/strong_hit",parentData:data,parentDataProperty:"strong_hit",rootData:rootData}))){
vErrors = vErrors === null ? validate311.errors : vErrors.concat(validate311.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.weak_hit !== undefined){
var _errs2 = errors;
if(!(validate311(data.weak_hit, {instancePath:instancePath+"/weak_hit",parentData:data,parentDataProperty:"weak_hit",rootData:rootData}))){
vErrors = vErrors === null ? validate311.errors : vErrors.concat(validate311.errors);
errors = vErrors.length;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.miss !== undefined){
var _errs3 = errors;
if(!(validate311(data.miss, {instancePath:instancePath+"/miss",parentData:data,parentDataProperty:"miss",rootData:rootData}))){
vErrors = vErrors === null ? validate311.errors : vErrors.concat(validate311.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate310.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate310.errors = vErrors;
return errors === 0;
}


function validate304(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = true;
}
var missing0;
if(((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate304.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern221.test(data0)){
validate304.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"+"\""}];
return false;
}
}
else {
validate304.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate304.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate304.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate304.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate304.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate304.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("action_roll" !== data4){
validate304.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "action_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs14 = errors;
if(typeof data.color !== "string"){
validate304.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(errors === _errs18){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate304.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate304.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs20 = errors;
if(errors === _errs20){
if(Array.isArray(data7)){
var valid6 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate304.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate304.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid6 = _errs22 === errors;
if(!valid6){
break;
}
}
}
else {
validate304.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs25 = errors;
if(!(validate305(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate305.errors : vErrors.concat(validate305.errors);
errors = vErrors.length;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs26 = errors;
var _errs27 = errors;
if(errors === _errs27){
if(errors === _errs27){
if(!(typeof data.text === "string")){
validate304.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.outcomes !== undefined){
var _errs29 = errors;
if(!(validate310(data.outcomes, {instancePath:instancePath+"/outcomes",parentData:data,parentDataProperty:"outcomes",rootData:rootData}))){
vErrors = vErrors === null ? validate310.errors : vErrors.concat(validate310.errors);
errors = vErrors.length;
}
var valid0 = _errs29 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs30 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs31 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs32 = errors;
if(typeof data._comment !== "string"){
validate304.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs34 = errors;
if(typeof data.allow_momentum_burn !== "boolean"){
validate304.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs34 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate304.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate304.errors = vErrors;
return errors === 0;
}

var schema505 = {"title":"EmbeddedNoRollMove","type":"object","required":["_id","type","name","roll_type","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"no_roll"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerNoRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"title":"MoveOutcomes","type":"null","default":null},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}};
var schema512 = {"title":"TriggerNoRoll","type":"object","description":"Describes trigger conditions for a move that makes no rolls.","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","default":[],"items":{"$ref":"#/definitions/TriggerNoRollCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}};

function validate321(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.conditions === undefined){
data.conditions = [];
}
var missing0;
if(((data.conditions === undefined) && (missing0 = "conditions")) || ((data.text === undefined) && (missing0 = "text"))){
validate321.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate212(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate212.errors : vErrors.concat(validate212.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate321.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs1 === errors;
if(valid0){
if(data.text !== undefined){
var data2 = data.text;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data2 === "string")){
validate321.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
if(errors === _errs4){
if(typeof data2 === "string"){
if(!pattern224.test(data2)){
validate321.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/pattern",keyword:"pattern",params:{pattern: ".*\\.{3}"},message:"must match pattern \""+".*\\.{3}"+"\""}];
return false;
}
}
else {
validate321.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate321.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate321.errors = vErrors;
return errors === 0;
}


function validate320(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.outcomes === undefined){
data.outcomes = null;
}
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = false;
}
var missing0;
if(((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate320.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern221.test(data0)){
validate320.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"+"\""}];
return false;
}
}
else {
validate320.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate320.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate320.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate320.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate320.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate320.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("no_roll" !== data4){
validate320.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "no_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs14 = errors;
if(typeof data.color !== "string"){
validate320.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(errors === _errs18){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate320.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate320.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs20 = errors;
if(errors === _errs20){
if(Array.isArray(data7)){
var valid6 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate320.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate320.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid6 = _errs22 === errors;
if(!valid6){
break;
}
}
}
else {
validate320.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs25 = errors;
if(!(validate321(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate321.errors : vErrors.concat(validate321.errors);
errors = vErrors.length;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs26 = errors;
var _errs27 = errors;
if(errors === _errs27){
if(errors === _errs27){
if(!(typeof data.text === "string")){
validate320.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs29 = errors;
if(data.outcomes !== null){
validate320.errors = [{instancePath:instancePath+"/outcomes",schemaPath:"#/properties/outcomes/type",keyword:"type",params:{type: "null"},message:"must be null"}];
return false;
}
var valid0 = _errs29 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs31 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs32 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs33 = errors;
if(typeof data._comment !== "string"){
validate320.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.allow_momentum_burn;
var _errs35 = errors;
if(typeof data15 !== "boolean"){
validate320.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data15){
validate320.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs35 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate320.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate320.errors = vErrors;
return errors === 0;
}

var schema515 = {"title":"EmbeddedProgressRollMove","type":"object","required":["_id","type","name","roll_type","tracks","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"progress_roll"},"tracks":{"$ref":"#/definitions/ProgressTrackTypeInfo","description":"Describes the common features of progress tracks associated with this move."},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerProgressRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}};
var schema519 = {"title":"ProgressTrackTypeInfo","type":"object","description":"Describes the features of a type of progress track.","required":["category"],"properties":{"category":{"$ref":"#/definitions/Label","description":"A category label for progress tracks of this type.","examples":["Vow","Journey","Combat","Scene Challenge","Expedition","Connection","Delve"]},"controls":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"type":"object","properties":{}}}}}};

function validate328(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.controls === undefined){
data.controls = {};
}
var missing0;
if((data.category === undefined) && (missing0 = "category")){
validate328.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.category !== undefined){
var _errs1 = errors;
if(typeof data.category !== "string"){
validate328.errors = [{instancePath:instancePath+"/category",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data1 = data.controls;
var _errs4 = errors;
if(errors === _errs4){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
var valid2 = true;
for(var key0 in data1){
if(pattern3.test(key0)){
var data2 = data1[key0];
var _errs6 = errors;
if(errors === _errs6){
if(!(data2 && typeof data2 == "object" && !Array.isArray(data2))){
validate328.errors = [{instancePath:instancePath+"/controls/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/properties/controls/patternProperties/%5E%5Ba-z%5D%5Ba-z_%5D*%24/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
}
else {
validate328.errors = [{instancePath:instancePath+"/controls",schemaPath:"#/properties/controls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
}
}
else {
validate328.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate328.errors = vErrors;
return errors === 0;
}

var schema524 = {"title":"TriggerProgressRoll","type":"object","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","items":{"$ref":"#/definitions/TriggerProgressRollCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}};
var schema525 = {"title":"TriggerProgressRollCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"$ref":"#/definitions/ProgressRollMethod","default":"progress_roll"},"roll_options":{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/ProgressRollOption"}},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}};

function validate331(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.method === undefined){
data.method = "progress_roll";
}
var missing0;
if(((data.method === undefined) && (missing0 = "method")) || ((data.roll_options === undefined) && (missing0 = "roll_options"))){
validate331.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.by !== undefined){
var data0 = data.by;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.ally === undefined){
data0.ally = false;
}
if(data0.player === undefined){
data0.player = true;
}
var missing1;
if(((data0.ally === undefined) && (missing1 = "ally")) || ((data0.player === undefined) && (missing1 = "player"))){
validate331.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var _errs4 = errors;
if(typeof data0.ally !== "boolean"){
validate331.errors = [{instancePath:instancePath+"/by/ally",schemaPath:"#/definitions/TriggerBy/properties/ally/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs4 === errors;
if(valid2){
var _errs6 = errors;
if(typeof data0.player !== "boolean"){
validate331.errors = [{instancePath:instancePath+"/by/player",schemaPath:"#/definitions/TriggerBy/properties/player/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs6 === errors;
}
}
}
else {
validate331.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data3 = data.method;
var _errs8 = errors;
if(!((((data3 === "miss") || (data3 === "weak_hit")) || (data3 === "strong_hit")) || (data3 === "progress_roll"))){
validate331.errors = [{instancePath:instancePath+"/method",schemaPath:"#/definitions/ProgressRollMethod/enum",keyword:"enum",params:{allowedValues: schema397.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs8 === errors;
if(valid0){
if(data.roll_options !== undefined){
var data4 = data.roll_options;
var _errs10 = errors;
if(errors === _errs10){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs12 = errors;
var _errs13 = errors;
if(errors === _errs13){
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
var missing2;
if((data5.using === undefined) && (missing2 = "using")){
validate331.errors = [{instancePath:instancePath+"/roll_options/" + i0,schemaPath:"#/definitions/ProgressRollOption/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data5.using !== undefined){
var data6 = data5.using;
if(typeof data6 !== "string"){
validate331.errors = [{instancePath:instancePath+"/roll_options/" + i0+"/using",schemaPath:"#/definitions/ProgressRollOption/properties/using/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("progress_track" !== data6){
validate331.errors = [{instancePath:instancePath+"/roll_options/" + i0+"/using",schemaPath:"#/definitions/ProgressRollOption/properties/using/const",keyword:"const",params:{allowedValue: "progress_track"},message:"must be equal to constant"}];
return false;
}
}
}
}
else {
validate331.errors = [{instancePath:instancePath+"/roll_options/" + i0,schemaPath:"#/definitions/ProgressRollOption/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid4 = _errs12 === errors;
if(!valid4){
break;
}
}
}
else {
validate331.errors = [{instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(errors === _errs18){
if(!(typeof data.text === "string")){
validate331.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate331.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate331.errors = vErrors;
return errors === 0;
}


function validate330(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.conditions === undefined) && (missing0 = "conditions")) || ((data.text === undefined) && (missing0 = "text"))){
validate330.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.conditions !== undefined){
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate331(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate331.errors : vErrors.concat(validate331.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate330.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var data2 = data.text;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data2 === "string")){
validate330.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
if(errors === _errs4){
if(typeof data2 === "string"){
if(!pattern224.test(data2)){
validate330.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/pattern",keyword:"pattern",params:{pattern: ".*\\.{3}"},message:"must match pattern \""+".*\\.{3}"+"\""}];
return false;
}
}
else {
validate330.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate330.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate330.errors = vErrors;
return errors === 0;
}


function validate327(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = false;
}
var missing0;
if((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.tracks === undefined) && (missing0 = "tracks"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate327.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern221.test(data0)){
validate327.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"+"\""}];
return false;
}
}
else {
validate327.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate327.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate327.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate327.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate327.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate327.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("progress_roll" !== data4){
validate327.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "progress_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tracks !== undefined){
var _errs14 = errors;
if(!(validate328(data.tracks, {instancePath:instancePath+"/tracks",parentData:data,parentDataProperty:"tracks",rootData:rootData}))){
vErrors = vErrors === null ? validate328.errors : vErrors.concat(validate328.errors);
errors = vErrors.length;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs15 = errors;
if(typeof data.color !== "string"){
validate327.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data7 = data.icon;
var _errs18 = errors;
var _errs19 = errors;
if(errors === _errs19){
if(errors === _errs19){
if(typeof data7 === "string"){
if(!pattern15.test(data7)){
validate327.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate327.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data8 = data.images;
var _errs21 = errors;
if(errors === _errs21){
if(Array.isArray(data8)){
var valid6 = true;
var len0 = data8.length;
for(var i0=0; i0<len0; i0++){
var data9 = data8[i0];
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern16.test(data9)){
validate327.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate327.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid6 = _errs23 === errors;
if(!valid6){
break;
}
}
}
else {
validate327.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs26 = errors;
if(!(validate330(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate330.errors : vErrors.concat(validate330.errors);
errors = vErrors.length;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(!(typeof data.text === "string")){
validate327.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.outcomes !== undefined){
var _errs30 = errors;
if(!(validate310(data.outcomes, {instancePath:instancePath+"/outcomes",parentData:data,parentDataProperty:"outcomes",rootData:rootData}))){
vErrors = vErrors === null ? validate310.errors : vErrors.concat(validate310.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs31 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs32 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs33 = errors;
if(typeof data._comment !== "string"){
validate327.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data16 = data.allow_momentum_burn;
var _errs35 = errors;
if(typeof data16 !== "boolean"){
validate327.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data16){
validate327.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs35 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate327.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate327.errors = vErrors;
return errors === 0;
}

var schema532 = {"title":"EmbeddedSpecialTrackMove","type":"object","required":["_id","type","name","roll_type","trigger","text","outcomes","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/EmbeddedMoveId"},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"special_track"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerSpecialTrack","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}};
var schema539 = {"title":"TriggerSpecialTrack","type":"object","required":["conditions","text"],"properties":{"conditions":{"type":"array","description":"Specific conditions that qualify for this trigger.","items":{"$ref":"#/definitions/TriggerSpecialTrackCondition"}},"text":{"$ref":"#/definitions/MarkdownString","type":"string","description":"A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions.","pattern":".*\\.{3}"}}};
var schema540 = {"title":"TriggerSpecialTrackCondition","type":"object","required":["method","roll_options"],"properties":{"by":{"$ref":"#/definitions/TriggerBy"},"method":{"$ref":"#/definitions/SpecialTrackRollMethod"},"roll_options":{"type":"array","description":"The options available when rolling with this trigger condition.","items":{"$ref":"#/definitions/TriggerSpecialTrackConditionOption"}},"text":{"$ref":"#/definitions/MarkdownString","description":"A markdown string of any trigger text specific to this trigger condition."}}};

function validate340(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.method === undefined) && (missing0 = "method")) || ((data.roll_options === undefined) && (missing0 = "roll_options"))){
validate340.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.by !== undefined){
var data0 = data.by;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
if(data0.ally === undefined){
data0.ally = false;
}
if(data0.player === undefined){
data0.player = true;
}
var missing1;
if(((data0.ally === undefined) && (missing1 = "ally")) || ((data0.player === undefined) && (missing1 = "player"))){
validate340.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
var _errs4 = errors;
if(typeof data0.ally !== "boolean"){
validate340.errors = [{instancePath:instancePath+"/by/ally",schemaPath:"#/definitions/TriggerBy/properties/ally/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs4 === errors;
if(valid2){
var _errs6 = errors;
if(typeof data0.player !== "boolean"){
validate340.errors = [{instancePath:instancePath+"/by/player",schemaPath:"#/definitions/TriggerBy/properties/player/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid2 = _errs6 === errors;
}
}
}
else {
validate340.errors = [{instancePath:instancePath+"/by",schemaPath:"#/definitions/TriggerBy/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.method !== undefined){
var data3 = data.method;
var _errs8 = errors;
if(!(((((((data3 === "miss") || (data3 === "weak_hit")) || (data3 === "strong_hit")) || (data3 === "player_choice")) || (data3 === "highest")) || (data3 === "lowest")) || (data3 === "all"))){
validate340.errors = [{instancePath:instancePath+"/method",schemaPath:"#/definitions/SpecialTrackRollMethod/enum",keyword:"enum",params:{allowedValues: schema404.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_options !== undefined){
var data4 = data.roll_options;
var _errs10 = errors;
if(errors === _errs10){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var _errs12 = errors;
if(!(validate227(data4[i0], {instancePath:instancePath+"/roll_options/" + i0,parentData:data4,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate227.errors : vErrors.concat(validate227.errors);
errors = vErrors.length;
}
var valid4 = _errs12 === errors;
if(!valid4){
break;
}
}
}
else {
validate340.errors = [{instancePath:instancePath+"/roll_options",schemaPath:"#/properties/roll_options/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs13 = errors;
var _errs14 = errors;
if(errors === _errs14){
if(errors === _errs14){
if(!(typeof data.text === "string")){
validate340.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate340.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate340.errors = vErrors;
return errors === 0;
}


function validate339(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.conditions === undefined) && (missing0 = "conditions")) || ((data.text === undefined) && (missing0 = "text"))){
validate339.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.conditions !== undefined){
var data0 = data.conditions;
var _errs1 = errors;
if(errors === _errs1){
if(Array.isArray(data0)){
var valid1 = true;
var len0 = data0.length;
for(var i0=0; i0<len0; i0++){
var _errs3 = errors;
if(!(validate340(data0[i0], {instancePath:instancePath+"/conditions/" + i0,parentData:data0,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate340.errors : vErrors.concat(validate340.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
else {
validate339.errors = [{instancePath:instancePath+"/conditions",schemaPath:"#/properties/conditions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var data2 = data.text;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(!(typeof data2 === "string")){
validate339.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
if(errors === _errs4){
if(typeof data2 === "string"){
if(!pattern224.test(data2)){
validate339.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/pattern",keyword:"pattern",params:{pattern: ".*\\.{3}"},message:"must match pattern \""+".*\\.{3}"+"\""}];
return false;
}
}
else {
validate339.errors = [{instancePath:instancePath+"/text",schemaPath:"#/properties/text/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate339.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate339.errors = vErrors;
return errors === 0;
}


function validate338(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = false;
}
var missing0;
if(((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate338.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern221.test(data0)){
validate338.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^asset\\.ability\\.move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)\\.([a-z][a-z_]*|\\*)$"+"\""}];
return false;
}
}
else {
validate338.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/EmbeddedMoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate338.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate338.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate338.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate338.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate338.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("special_track" !== data4){
validate338.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "special_track"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs14 = errors;
if(typeof data.color !== "string"){
validate338.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(errors === _errs18){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate338.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate338.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data7 = data.images;
var _errs20 = errors;
if(errors === _errs20){
if(Array.isArray(data7)){
var valid6 = true;
var len0 = data7.length;
for(var i0=0; i0<len0; i0++){
var data8 = data7[i0];
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern16.test(data8)){
validate338.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate338.errors = [{instancePath:instancePath+"/images/" + i0,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid6 = _errs22 === errors;
if(!valid6){
break;
}
}
}
else {
validate338.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs25 = errors;
if(!(validate339(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate339.errors : vErrors.concat(validate339.errors);
errors = vErrors.length;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs26 = errors;
var _errs27 = errors;
if(errors === _errs27){
if(errors === _errs27){
if(!(typeof data.text === "string")){
validate338.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.outcomes !== undefined){
var _errs29 = errors;
if(!(validate310(data.outcomes, {instancePath:instancePath+"/outcomes",parentData:data,parentDataProperty:"outcomes",rootData:rootData}))){
vErrors = vErrors === null ? validate310.errors : vErrors.concat(validate310.errors);
errors = vErrors.length;
}
var valid0 = _errs29 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs30 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs31 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs32 = errors;
if(typeof data._comment !== "string"){
validate338.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.allow_momentum_burn;
var _errs34 = errors;
if(typeof data15 !== "boolean"){
validate338.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data15){
validate338.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs34 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate338.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate338.errors = vErrors;
return errors === 0;
}


function validate303(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data0 = data.roll_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("action_roll" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate304(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate304.errors : vErrors.concat(validate304.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate303.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data1 = data.roll_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("no_roll" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate320(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate320.errors : vErrors.concat(validate320.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate303.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data2 = data.roll_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("progress_roll" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate327(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate327.errors : vErrors.concat(validate327.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate303.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data3 = data.roll_type;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("special_track" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate338(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate338.errors : vErrors.concat(validate338.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate303.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.roll_type === undefined) && (missing0 = "roll_type")){
validate303.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.roll_type !== undefined){
var data4 = data.roll_type;
if(!((((data4 === "action_roll") || (data4 === "no_roll")) || (data4 === "progress_roll")) || (data4 === "special_track"))){
validate303.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/enum",keyword:"enum",params:{allowedValues: schema487.properties.roll_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate303.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate303.errors = vErrors;
return errors === 0;
}


function validate242(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.enabled === undefined){
data.enabled = false;
}
if(data.options === undefined){
data.options = {};
}
if(data.controls === undefined){
data.controls = {};
}
if(data.oracles === undefined){
data.oracles = {};
}
if(data.moves === undefined){
data.moves = {};
}
var missing0;
if((((data._id === undefined) && (missing0 = "_id")) || ((data.enabled === undefined) && (missing0 = "enabled"))) || ((data.text === undefined) && (missing0 = "text"))){
validate242.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern192.test(data0)){
validate242.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AssetAbilityId/pattern",keyword:"pattern",params:{pattern: "^asset\\.ability:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"},message:"must match pattern \""+"^asset\\.ability:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.(\\d+)$"+"\""}];
return false;
}
}
else {
validate242.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AssetAbilityId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate242.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs7 = errors;
if(typeof data.enabled !== "boolean"){
validate242.errors = [{instancePath:instancePath+"/enabled",schemaPath:"#/properties/enabled/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var data3 = data.options;
var _errs9 = errors;
if(errors === _errs9){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
var valid3 = true;
for(var key0 in data3){
if(pattern3.test(key0)){
var _errs11 = errors;
if(!(validate243(data3[key0], {instancePath:instancePath+"/options/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data3,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate243.errors : vErrors.concat(validate243.errors);
errors = vErrors.length;
}
var valid3 = _errs11 === errors;
if(!valid3){
break;
}
}
}
}
else {
validate242.errors = [{instancePath:instancePath+"/options",schemaPath:"#/properties/options/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs9 === errors;
if(valid0){
if(data.text !== undefined){
var _errs12 = errors;
var _errs13 = errors;
if(errors === _errs13){
if(errors === _errs13){
if(!(typeof data.text === "string")){
validate242.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data6 = data.controls;
var _errs15 = errors;
if(errors === _errs15){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
var valid5 = true;
for(var key1 in data6){
if(pattern3.test(key1)){
var _errs17 = errors;
if(!(validate246(data6[key1], {instancePath:instancePath+"/controls/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data6,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate246.errors : vErrors.concat(validate246.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
}
else {
validate242.errors = [{instancePath:instancePath+"/controls",schemaPath:"#/properties/controls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs15 === errors;
if(valid0){
var data8 = data.oracles;
var _errs18 = errors;
if(errors === _errs18){
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
var valid6 = true;
for(var key2 in data8){
if(pattern3.test(key2)){
var _errs20 = errors;
if(!(validate255(data8[key2], {instancePath:instancePath+"/oracles/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data8,parentDataProperty:key2,rootData:rootData}))){
vErrors = vErrors === null ? validate255.errors : vErrors.concat(validate255.errors);
errors = vErrors.length;
}
var valid6 = _errs20 === errors;
if(!valid6){
break;
}
}
}
}
else {
validate242.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs18 === errors;
if(valid0){
if(data.enhance_asset !== undefined){
var _errs21 = errors;
if(!(validate177(data.enhance_asset, {instancePath:instancePath+"/enhance_asset",parentData:data,parentDataProperty:"enhance_asset",rootData:rootData}))){
vErrors = vErrors === null ? validate177.errors : vErrors.concat(validate177.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs22 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs23 = errors;
if(typeof data._comment !== "string"){
validate242.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhance_moves !== undefined){
var data13 = data.enhance_moves;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data13)){
var valid7 = true;
var len0 = data13.length;
for(var i0=0; i0<len0; i0++){
var _errs27 = errors;
if(!(validate184(data13[i0], {instancePath:instancePath+"/enhance_moves/" + i0,parentData:data13,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate184.errors : vErrors.concat(validate184.errors);
errors = vErrors.length;
}
var valid7 = _errs27 === errors;
if(!valid7){
break;
}
}
}
else {
validate242.errors = [{instancePath:instancePath+"/enhance_moves",schemaPath:"#/properties/enhance_moves/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.moves;
var _errs28 = errors;
if(errors === _errs28){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid8 = true;
for(var key3 in data15){
if(pattern3.test(key3)){
var _errs30 = errors;
if(!(validate303(data15[key3], {instancePath:instancePath+"/moves/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key3,rootData:rootData}))){
vErrors = vErrors === null ? validate303.errors : vErrors.concat(validate303.errors);
errors = vErrors.length;
}
var valid8 = _errs30 === errors;
if(!valid8){
break;
}
}
}
}
else {
validate242.errors = [{instancePath:instancePath+"/moves",schemaPath:"#/properties/moves/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs28 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate242.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate242.errors = vErrors;
return errors === 0;
}

var schema546 = {"title":"AssetControlField","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["condition_meter","select_enhancement","checkbox","card_flip"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"condition_meter"}}},"then":{"$ref":"#/definitions/AssetConditionMeter"}},{"if":{"properties":{"field_type":{"type":"string","const":"select_enhancement"}}},"then":{"$ref":"#/definitions/SelectEnhancementField"}},{"if":{"properties":{"field_type":{"type":"string","const":"checkbox"}}},"then":{"$ref":"#/definitions/AssetCheckboxField"}},{"if":{"properties":{"field_type":{"type":"string","const":"card_flip"}}},"then":{"$ref":"#/definitions/AssetCardFlipField"}}]};
var schema547 = {"title":"AssetConditionMeter","type":"object","description":"Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\".","required":["label","field_type","rollable","min","max","value","controls"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"condition_meter"},"rollable":{"type":"boolean","description":"Is this meter's `value` usable as a stat in an action roll?","default":true,"const":true},"min":{"type":"integer","description":"The minimum value of this meter.","default":0},"max":{"type":"integer","description":"The maximum value of this meter."},"value":{"type":"integer","description":"The current value of this meter.","default":0},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."},"controls":{"type":"object","description":"Checkbox controls rendered as part of the condition meter.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetConditionMeterControlField"}}},"moves":{"type":"object","description":"Provides hints for moves that interact with this condition meter, such as suffer and recovery moves.","releaseStage":"experimental","properties":{"recover":{"type":"array","description":"The ID(s) of recovery moves associated with this meter.","items":{"$ref":"#/definitions/AnyMoveIdWildcard","examples":["move:classic/adventure/heal","move:classic/adventure/make_camp","move:classic/relationship/sojourn","move:starforged/recover/heal","move:starforged/recover/repair"]}},"suffer":{"type":"array","description":"The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option.","items":{"$ref":"#/definitions/AnyMoveIdWildcard","examples":["move:classic/suffer/companion_endure_harm","move:starforged/suffer/companion_takes_a_hit","move:starforged/suffer/withstand_damage"]}}}}}};
var schema550 = {"title":"AssetConditionMeterControlField","type":"object","description":"A checkbox control field, rendered as part of an asset condition meter.","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `field_type` property as a discriminator.","required":["field_type"],"properties":{"field_type":{"enum":["checkbox","card_flip"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"field_type":{"type":"string","const":"checkbox"}}},"then":{"$ref":"#/definitions/AssetCheckboxField"}},{"if":{"properties":{"field_type":{"type":"string","const":"card_flip"}}},"then":{"$ref":"#/definitions/AssetCardFlipField"}}]};
var schema551 = {"title":"AssetCardFlipField","type":"object","required":["label","field_type","value","is_impact","disables_asset"],"properties":{"label":{"$ref":"#/definitions/Label"},"field_type":{"type":"string","const":"card_flip"},"value":{"type":"boolean","description":"Is the card flipped over?","default":false},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An icon associated with this input."},"is_impact":{"type":"boolean","description":"Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?","default":false},"disables_asset":{"type":"boolean","description":"Does this field disable the asset when its value is set to `true`?","default":false}}};

function validate354(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.value === undefined){
data.value = false;
}
if(data.is_impact === undefined){
data.is_impact = false;
}
if(data.disables_asset === undefined){
data.disables_asset = false;
}
var missing0;
if((((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.value === undefined) && (missing0 = "value"))) || ((data.is_impact === undefined) && (missing0 = "is_impact"))) || ((data.disables_asset === undefined) && (missing0 = "disables_asset"))){
validate354.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate354.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate354.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("card_flip" !== data1){
validate354.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "card_flip"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs6 = errors;
if(typeof data.value !== "boolean"){
validate354.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs6 === errors;
if(valid0){
if(data.icon !== undefined){
var data3 = data.icon;
var _errs8 = errors;
var _errs9 = errors;
if(errors === _errs9){
if(errors === _errs9){
if(typeof data3 === "string"){
if(!pattern15.test(data3)){
validate354.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate354.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs11 = errors;
if(typeof data.is_impact !== "boolean"){
validate354.errors = [{instancePath:instancePath+"/is_impact",schemaPath:"#/properties/is_impact/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs11 === errors;
if(valid0){
var _errs13 = errors;
if(typeof data.disables_asset !== "boolean"){
validate354.errors = [{instancePath:instancePath+"/disables_asset",schemaPath:"#/properties/disables_asset/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs13 === errors;
}
}
}
}
}
}
}
else {
validate354.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate354.errors = vErrors;
return errors === 0;
}


function validate352(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data0 = data.field_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("checkbox" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate251(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate251.errors : vErrors.concat(validate251.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate352.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data1 = data.field_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("card_flip" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate354(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate354.errors : vErrors.concat(validate354.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate352.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.field_type === undefined) && (missing0 = "field_type")){
validate352.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.field_type !== undefined){
var data2 = data.field_type;
if(!((data2 === "checkbox") || (data2 === "card_flip"))){
validate352.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/enum",keyword:"enum",params:{allowedValues: schema550.properties.field_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate352.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate352.errors = vErrors;
return errors === 0;
}


function validate351(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.rollable === undefined){
data.rollable = true;
}
if(data.min === undefined){
data.min = 0;
}
if(data.value === undefined){
data.value = 0;
}
if(data.controls === undefined){
data.controls = {};
}
var missing0;
if((((((((data.label === undefined) && (missing0 = "label")) || ((data.field_type === undefined) && (missing0 = "field_type"))) || ((data.rollable === undefined) && (missing0 = "rollable"))) || ((data.min === undefined) && (missing0 = "min"))) || ((data.max === undefined) && (missing0 = "max"))) || ((data.value === undefined) && (missing0 = "value"))) || ((data.controls === undefined) && (missing0 = "controls"))){
validate351.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.label !== undefined){
var _errs1 = errors;
if(typeof data.label !== "string"){
validate351.errors = [{instancePath:instancePath+"/label",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.field_type !== undefined){
var data1 = data.field_type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate351.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("condition_meter" !== data1){
validate351.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/const",keyword:"const",params:{allowedValue: "condition_meter"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.rollable;
var _errs6 = errors;
if(typeof data2 !== "boolean"){
validate351.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(true !== data2){
validate351.errors = [{instancePath:instancePath+"/rollable",schemaPath:"#/properties/rollable/const",keyword:"const",params:{allowedValue: true},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs6 === errors;
if(valid0){
var data3 = data.min;
var _errs8 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
validate351.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs8 === errors;
if(valid0){
if(data.max !== undefined){
var data4 = data.max;
var _errs10 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
validate351.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data5 = data.value;
var _errs12 = errors;
if(!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))){
validate351.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid0 = _errs12 === errors;
if(valid0){
if(data.icon !== undefined){
var data6 = data.icon;
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(errors === _errs15){
if(typeof data6 === "string"){
if(!pattern15.test(data6)){
validate351.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate351.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data7 = data.controls;
var _errs17 = errors;
if(errors === _errs17){
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
var valid3 = true;
for(var key0 in data7){
if(pattern3.test(key0)){
var _errs19 = errors;
if(!(validate352(data7[key0], {instancePath:instancePath+"/controls/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data7,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate352.errors : vErrors.concat(validate352.errors);
errors = vErrors.length;
}
var valid3 = _errs19 === errors;
if(!valid3){
break;
}
}
}
}
else {
validate351.errors = [{instancePath:instancePath+"/controls",schemaPath:"#/properties/controls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs17 === errors;
if(valid0){
if(data.moves !== undefined){
var data9 = data.moves;
var _errs20 = errors;
if(errors === _errs20){
if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
if(data9.recover !== undefined){
var data10 = data9.recover;
var _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data10)){
var valid5 = true;
var len0 = data10.length;
for(var i0=0; i0<len0; i0++){
var _errs24 = errors;
if(!(validate186(data10[i0], {instancePath:instancePath+"/moves/recover/" + i0,parentData:data10,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid5 = _errs24 === errors;
if(!valid5){
break;
}
}
}
else {
validate351.errors = [{instancePath:instancePath+"/moves/recover",schemaPath:"#/properties/moves/properties/recover/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs22 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data9.suffer !== undefined){
var data12 = data9.suffer;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data12)){
var valid6 = true;
var len1 = data12.length;
for(var i1=0; i1<len1; i1++){
var _errs27 = errors;
if(!(validate186(data12[i1], {instancePath:instancePath+"/moves/suffer/" + i1,parentData:data12,parentDataProperty:i1,rootData:rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid6 = _errs27 === errors;
if(!valid6){
break;
}
}
}
else {
validate351.errors = [{instancePath:instancePath+"/moves/suffer",schemaPath:"#/properties/moves/properties/suffer/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs25 === errors;
}
else {
var valid4 = true;
}
}
}
else {
validate351.errors = [{instancePath:instancePath+"/moves",schemaPath:"#/properties/moves/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate351.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate351.errors = vErrors;
return errors === 0;
}


function validate350(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data0 = data.field_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("condition_meter" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate351(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate351.errors : vErrors.concat(validate351.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate350.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data1 = data.field_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("select_enhancement" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate175(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate175.errors : vErrors.concat(validate175.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate350.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data2 = data.field_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("checkbox" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate251(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate251.errors : vErrors.concat(validate251.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate350.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.field_type !== undefined){
var data3 = data.field_type;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("card_flip" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate354(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate354.errors : vErrors.concat(validate354.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate350.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.field_type === undefined) && (missing0 = "field_type")){
validate350.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.field_type !== undefined){
var data4 = data.field_type;
if(!((((data4 === "condition_meter") || (data4 === "select_enhancement")) || (data4 === "checkbox")) || (data4 === "card_flip"))){
validate350.errors = [{instancePath:instancePath+"/field_type",schemaPath:"#/properties/field_type/enum",keyword:"enum",params:{allowedValues: schema546.properties.field_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate350.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate350.errors = vErrors;
return errors === 0;
}


function validate169(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.options === undefined){
data.options = {};
}
if(data.count_as_impact === undefined){
data.count_as_impact = false;
}
if(data.shared === undefined){
data.shared = false;
}
if(data.controls === undefined){
data.controls = {};
}
var missing0;
if((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.category === undefined) && (missing0 = "category"))) || ((data.options === undefined) && (missing0 = "options"))) || ((data.count_as_impact === undefined) && (missing0 = "count_as_impact"))) || ((data.shared === undefined) && (missing0 = "shared"))) || ((data.abilities === undefined) && (missing0 = "abilities"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate169.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern61.test(data0)){
validate169.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AssetId/pattern",keyword:"pattern",params:{pattern: "^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate169.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AssetId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate169.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset" !== data1){
validate169.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "asset"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate169.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate169.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.category !== undefined){
var _errs12 = errors;
if(typeof data.category !== "string"){
validate169.errors = [{instancePath:instancePath+"/category",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data5)){
var valid5 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(typeof data6 === "string"){
if(!pattern34.test(data6)){
validate169.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AssetIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^asset:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate169.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AssetIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate169.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs20 = errors;
if(typeof data.color !== "string"){
validate169.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(errors === _errs24){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate169.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate169.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs26 = errors;
if(errors === _errs26){
if(Array.isArray(data9)){
var valid9 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(errors === _errs29){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate169.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate169.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid9 = _errs28 === errors;
if(!valid9){
break;
}
}
}
else {
validate169.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.options;
var _errs31 = errors;
if(errors === _errs31){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
var valid11 = true;
for(var key0 in data11){
if(pattern3.test(key0)){
var _errs33 = errors;
if(!(validate170(data11[key0], {instancePath:instancePath+"/options/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data11,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate170.errors : vErrors.concat(validate170.errors);
errors = vErrors.length;
}
var valid11 = _errs33 === errors;
if(!valid11){
break;
}
}
}
}
else {
validate169.errors = [{instancePath:instancePath+"/options",schemaPath:"#/properties/options/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs31 === errors;
if(valid0){
var _errs34 = errors;
if(typeof data.count_as_impact !== "boolean"){
validate169.errors = [{instancePath:instancePath+"/count_as_impact",schemaPath:"#/properties/count_as_impact/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs34 === errors;
if(valid0){
var _errs36 = errors;
if(typeof data.shared !== "boolean"){
validate169.errors = [{instancePath:instancePath+"/shared",schemaPath:"#/properties/shared/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs36 === errors;
if(valid0){
if(data.attachments !== undefined){
var _errs38 = errors;
if(!(validate178(data.attachments, {instancePath:instancePath+"/attachments",parentData:data,parentDataProperty:"attachments",rootData:rootData}))){
vErrors = vErrors === null ? validate178.errors : vErrors.concat(validate178.errors);
errors = vErrors.length;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.requirement !== undefined){
var _errs39 = errors;
var _errs40 = errors;
if(errors === _errs40){
if(errors === _errs40){
if(!(typeof data.requirement === "string")){
validate169.errors = [{instancePath:instancePath+"/requirement",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.abilities !== undefined){
var data17 = data.abilities;
var _errs42 = errors;
if(errors === _errs42){
if(Array.isArray(data17)){
var valid13 = true;
var len2 = data17.length;
for(var i2=0; i2<len2; i2++){
var _errs44 = errors;
if(!(validate242(data17[i2], {instancePath:instancePath+"/abilities/" + i2,parentData:data17,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate242.errors : vErrors.concat(validate242.errors);
errors = vErrors.length;
}
var valid13 = _errs44 === errors;
if(!valid13){
break;
}
}
}
else {
validate169.errors = [{instancePath:instancePath+"/abilities",schemaPath:"#/properties/abilities/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data19 = data.controls;
var _errs45 = errors;
if(errors === _errs45){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
var valid14 = true;
for(var key1 in data19){
if(pattern3.test(key1)){
var _errs47 = errors;
if(!(validate350(data19[key1], {instancePath:instancePath+"/controls/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data19,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate350.errors : vErrors.concat(validate350.errors);
errors = vErrors.length;
}
var valid14 = _errs47 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate169.errors = [{instancePath:instancePath+"/controls",schemaPath:"#/properties/controls/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs45 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs48 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs48 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs49 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs50 = errors;
if(typeof data._comment !== "string"){
validate169.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs52 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs52 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate169.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate169.errors = vErrors;
return errors === 0;
}

var wrapper1 = {validate: validate168};

function validate168(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.collections === undefined){
data.collections = {};
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.collections === undefined) && (missing0 = "collections"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate168.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern66.test(data0)){
validate168.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AssetCollectionId/pattern",keyword:"pattern",params:{pattern: "^asset_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^asset_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate168.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AssetCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate168.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("asset_collection" !== data1){
validate168.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "asset_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate168.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate168.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern41.test(data5)){
validate168.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AssetCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate168.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AssetCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate168.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data6 = data.enhances;
var _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data6)){
var valid6 = true;
var len1 = data6.length;
for(var i1=0; i1<len1; i1++){
var data7 = data6[i1];
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(typeof data7 === "string"){
if(!pattern41.test(data7)){
validate168.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/AssetCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^asset_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate168.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/AssetCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs19 === errors;
if(!valid6){
break;
}
}
}
else {
validate168.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs22 = errors;
if(typeof data.color !== "string"){
validate168.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data9 = data.icon;
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern15.test(data9)){
validate168.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate168.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data10 = data.images;
var _errs28 = errors;
if(errors === _errs28){
if(Array.isArray(data10)){
var valid10 = true;
var len2 = data10.length;
for(var i2=0; i2<len2; i2++){
var data11 = data10[i2];
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern16.test(data11)){
validate168.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate168.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs30 === errors;
if(!valid10){
break;
}
}
}
else {
validate168.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs33 = errors;
var _errs34 = errors;
if(errors === _errs34){
if(errors === _errs34){
if(!(typeof data.summary === "string")){
validate168.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs36 = errors;
var _errs37 = errors;
if(errors === _errs37){
if(errors === _errs37){
if(!(typeof data.description === "string")){
validate168.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data14 = data.contents;
var _errs39 = errors;
if(errors === _errs39){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid14 = true;
for(var key0 in data14){
if(pattern3.test(key0)){
var _errs41 = errors;
if(!(validate169(data14[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate169.errors : vErrors.concat(validate169.errors);
errors = vErrors.length;
}
var valid14 = _errs41 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate168.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs39 === errors;
if(valid0){
var data16 = data.collections;
var _errs42 = errors;
if(errors === _errs42){
if(data16 && typeof data16 == "object" && !Array.isArray(data16)){
var valid15 = true;
for(var key1 in data16){
if(pattern3.test(key1)){
var _errs44 = errors;
if(!(wrapper1.validate(data16[key1], {instancePath:instancePath+"/collections/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data16,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? wrapper1.validate.errors : vErrors.concat(wrapper1.validate.errors);
errors = vErrors.length;
}
var valid15 = _errs44 === errors;
if(!valid15){
break;
}
}
}
}
else {
validate168.errors = [{instancePath:instancePath+"/collections",schemaPath:"#/properties/collections/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs45 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs46 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs47 = errors;
if(typeof data._comment !== "string"){
validate168.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs49 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate168.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate168.errors = vErrors;
return errors === 0;
}

var schema554 = {"title":"AtlasCollection","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/AtlasCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"atlas_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AtlasCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/AtlasCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasEntry"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema565 = {"title":"AtlasEntry","type":"object","description":"An atlas entry, like the Ironlands region entries found in classic Ironsworn.","required":["_id","type","name","features","description","_source"],"properties":{"_id":{"$ref":"#/definitions/AtlasEntryId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"atlas_entry"},"name":{"$ref":"#/definitions/Label"},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/AtlasEntryIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString"},"features":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"description":{"$ref":"#/definitions/MarkdownString"},"quest_starter":{"$ref":"#/definitions/MarkdownString"},"your_truth":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};

function validate373(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.features === undefined) && (missing0 = "features"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate373.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern58.test(data0)){
validate373.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AtlasEntryId/pattern",keyword:"pattern",params:{pattern: "^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate373.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AtlasEntryId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate373.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("atlas_entry" !== data1){
validate373.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "atlas_entry"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate373.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate373.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern23.test(data5)){
validate373.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AtlasEntryIdWildcard/pattern",keyword:"pattern",params:{pattern: "^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^atlas_entry:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate373.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AtlasEntryIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate373.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs17 = errors;
if(typeof data.color !== "string"){
validate373.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data7 = data.icon;
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data7 === "string"){
if(!pattern15.test(data7)){
validate373.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate373.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data8 = data.images;
var _errs23 = errors;
if(errors === _errs23){
if(Array.isArray(data8)){
var valid8 = true;
var len1 = data8.length;
for(var i1=0; i1<len1; i1++){
var data9 = data8[i1];
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern16.test(data9)){
validate373.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate373.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs25 === errors;
if(!valid8){
break;
}
}
}
else {
validate373.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(errors === _errs29){
if(!(typeof data.summary === "string")){
validate373.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.features !== undefined){
var data11 = data.features;
var _errs31 = errors;
if(errors === _errs31){
if(Array.isArray(data11)){
var valid11 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var _errs33 = errors;
var _errs34 = errors;
if(errors === _errs34){
if(errors === _errs34){
if(!(typeof data11[i2] === "string")){
validate373.errors = [{instancePath:instancePath+"/features/" + i2,schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid11 = _errs33 === errors;
if(!valid11){
break;
}
}
}
else {
validate373.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs36 = errors;
var _errs37 = errors;
if(errors === _errs37){
if(errors === _errs37){
if(!(typeof data.description === "string")){
validate373.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.quest_starter !== undefined){
var _errs39 = errors;
var _errs40 = errors;
if(errors === _errs40){
if(errors === _errs40){
if(!(typeof data.quest_starter === "string")){
validate373.errors = [{instancePath:instancePath+"/quest_starter",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.your_truth !== undefined){
var _errs42 = errors;
var _errs43 = errors;
if(errors === _errs43){
if(errors === _errs43){
if(!(typeof data.your_truth === "string")){
validate373.errors = [{instancePath:instancePath+"/your_truth",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs45 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs46 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs47 = errors;
if(typeof data._comment !== "string"){
validate373.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs49 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate373.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate373.errors = vErrors;
return errors === 0;
}

var wrapper2 = {validate: validate372};

function validate372(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.collections === undefined){
data.collections = {};
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.collections === undefined) && (missing0 = "collections"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate372.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern63.test(data0)){
validate372.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AtlasCollectionId/pattern",keyword:"pattern",params:{pattern: "^atlas_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^atlas_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate372.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/AtlasCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate372.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("atlas_collection" !== data1){
validate372.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "atlas_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate372.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate372.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern38.test(data5)){
validate372.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AtlasCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate372.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/AtlasCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate372.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data6 = data.enhances;
var _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data6)){
var valid6 = true;
var len1 = data6.length;
for(var i1=0; i1<len1; i1++){
var data7 = data6[i1];
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(typeof data7 === "string"){
if(!pattern38.test(data7)){
validate372.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/AtlasCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^atlas_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate372.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/AtlasCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs19 === errors;
if(!valid6){
break;
}
}
}
else {
validate372.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs22 = errors;
if(typeof data.color !== "string"){
validate372.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data9 = data.icon;
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern15.test(data9)){
validate372.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate372.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data10 = data.images;
var _errs28 = errors;
if(errors === _errs28){
if(Array.isArray(data10)){
var valid10 = true;
var len2 = data10.length;
for(var i2=0; i2<len2; i2++){
var data11 = data10[i2];
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern16.test(data11)){
validate372.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate372.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs30 === errors;
if(!valid10){
break;
}
}
}
else {
validate372.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs33 = errors;
var _errs34 = errors;
if(errors === _errs34){
if(errors === _errs34){
if(!(typeof data.summary === "string")){
validate372.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs36 = errors;
var _errs37 = errors;
if(errors === _errs37){
if(errors === _errs37){
if(!(typeof data.description === "string")){
validate372.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data14 = data.contents;
var _errs39 = errors;
if(errors === _errs39){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid14 = true;
for(var key0 in data14){
if(pattern3.test(key0)){
var _errs41 = errors;
if(!(validate373(data14[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate373.errors : vErrors.concat(validate373.errors);
errors = vErrors.length;
}
var valid14 = _errs41 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate372.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs39 === errors;
if(valid0){
var data16 = data.collections;
var _errs42 = errors;
if(errors === _errs42){
if(data16 && typeof data16 == "object" && !Array.isArray(data16)){
var valid15 = true;
for(var key1 in data16){
if(pattern3.test(key1)){
var _errs44 = errors;
if(!(wrapper2.validate(data16[key1], {instancePath:instancePath+"/collections/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data16,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? wrapper2.validate.errors : vErrors.concat(wrapper2.validate.errors);
errors = vErrors.length;
}
var valid15 = _errs44 === errors;
if(!valid15){
break;
}
}
}
}
else {
validate372.errors = [{instancePath:instancePath+"/collections",schemaPath:"#/properties/collections/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs45 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs46 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs47 = errors;
if(typeof data._comment !== "string"){
validate372.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs49 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate372.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate372.errors = vErrors;
return errors === 0;
}

var schema578 = {"title":"MoveCategory","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/MoveCategoryId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move_category"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/MoveCategoryIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/MoveCategoryIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Move"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/MoveCategory"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema589 = {"title":"Move","type":"object","remarks":"Deserialize as a discriminated union/polymorphic object type, using the `roll_type` property as a discriminator.","required":["roll_type"],"properties":{"roll_type":{"enum":["action_roll","no_roll","progress_roll","special_track"]}},"additionalProperties":{},"allOf":[{"if":{"properties":{"roll_type":{"type":"string","const":"action_roll"}}},"then":{"$ref":"#/definitions/MoveActionRoll"}},{"if":{"properties":{"roll_type":{"type":"string","const":"no_roll"}}},"then":{"$ref":"#/definitions/MoveNoRoll"}},{"if":{"properties":{"roll_type":{"type":"string","const":"progress_roll"}}},"then":{"$ref":"#/definitions/MoveProgressRoll"}},{"if":{"properties":{"roll_type":{"type":"string","const":"special_track"}}},"then":{"$ref":"#/definitions/MoveSpecialTrack"}}]};
var schema590 = {"title":"Move (action roll)","type":"object","description":"A move that makes an action roll.","required":["_id","type","name","roll_type","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"action_roll"},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerActionRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":true}}};

function validate384(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracles === undefined){
data.oracles = {};
}
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = true;
}
var missing0;
if((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data._source === undefined) && (missing0 = "_source"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate384.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern62.test(data0)){
validate384.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/pattern",keyword:"pattern",params:{pattern: "^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate384.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate384.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate384.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate384.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate384.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate384.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("action_roll" !== data4){
validate384.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "action_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern37.test(data6)){
validate384.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate384.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate384.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate384.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate384.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate384.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate384.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate384.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate384.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs30 = errors;
if(!(validate305(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate305.errors : vErrors.concat(validate305.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(errors === _errs32){
if(!(typeof data.text === "string")){
validate384.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.outcomes !== undefined){
var _errs34 = errors;
if(!(validate310(data.outcomes, {instancePath:instancePath+"/outcomes",parentData:data,parentDataProperty:"outcomes",rootData:rootData}))){
vErrors = vErrors === null ? validate310.errors : vErrors.concat(validate310.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data14 = data.oracles;
var _errs35 = errors;
if(errors === _errs35){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid11 = true;
for(var key0 in data14){
if(pattern3.test(key0)){
var _errs37 = errors;
if(!(validate255(data14[key0], {instancePath:instancePath+"/oracles/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate255.errors : vErrors.concat(validate255.errors);
errors = vErrors.length;
}
var valid11 = _errs37 === errors;
if(!valid11){
break;
}
}
}
}
else {
validate384.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs35 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs38 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs39 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs40 = errors;
if(typeof data._comment !== "string"){
validate384.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs42 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs43 = errors;
if(typeof data.allow_momentum_burn !== "boolean"){
validate384.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs43 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate384.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate384.errors = vErrors;
return errors === 0;
}

var schema599 = {"title":"MoveNoRoll","type":"object","description":"A move that makes no progress rolls or action rolls.","required":["_id","type","name","roll_type","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"no_roll"},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerNoRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"title":"MoveOutcomes","type":"null","default":null},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}};

function validate392(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.outcomes === undefined){
data.outcomes = null;
}
if(data.oracles === undefined){
data.oracles = {};
}
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = false;
}
var missing0;
if((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data._source === undefined) && (missing0 = "_source"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate392.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern62.test(data0)){
validate392.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/pattern",keyword:"pattern",params:{pattern: "^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate392.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate392.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate392.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate392.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate392.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate392.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("no_roll" !== data4){
validate392.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "no_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern37.test(data6)){
validate392.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate392.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate392.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate392.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate392.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate392.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate392.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate392.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate392.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs30 = errors;
if(!(validate321(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate321.errors : vErrors.concat(validate321.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(errors === _errs32){
if(!(typeof data.text === "string")){
validate392.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var _errs34 = errors;
if(data.outcomes !== null){
validate392.errors = [{instancePath:instancePath+"/outcomes",schemaPath:"#/properties/outcomes/type",keyword:"type",params:{type: "null"},message:"must be null"}];
return false;
}
var valid0 = _errs34 === errors;
if(valid0){
var data14 = data.oracles;
var _errs36 = errors;
if(errors === _errs36){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid11 = true;
for(var key0 in data14){
if(pattern3.test(key0)){
var _errs38 = errors;
if(!(validate255(data14[key0], {instancePath:instancePath+"/oracles/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate255.errors : vErrors.concat(validate255.errors);
errors = vErrors.length;
}
var valid11 = _errs38 === errors;
if(!valid11){
break;
}
}
}
}
else {
validate392.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs36 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs39 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs40 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs41 = errors;
if(typeof data._comment !== "string"){
validate392.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs43 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data20 = data.allow_momentum_burn;
var _errs44 = errors;
if(typeof data20 !== "boolean"){
validate392.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data20){
validate392.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs44 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate392.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate392.errors = vErrors;
return errors === 0;
}

var schema608 = {"title":"Progress Move","type":"object","description":"A progress move that rolls on a standard progress track type (whose features are defined by this move object). For progress rolls that use special tracks, see MoveSpecialTrack.","required":["_id","type","name","roll_type","tracks","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"progress_roll"},"tracks":{"$ref":"#/definitions/ProgressTrackTypeInfo","description":"Describes the common features of progress tracks associated with this move."},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerProgressRoll","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}};

function validate399(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracles === undefined){
data.oracles = {};
}
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = false;
}
var missing0;
if(((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.tracks === undefined) && (missing0 = "tracks"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data._source === undefined) && (missing0 = "_source"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate399.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern62.test(data0)){
validate399.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/pattern",keyword:"pattern",params:{pattern: "^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate399.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate399.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate399.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate399.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate399.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate399.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("progress_roll" !== data4){
validate399.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "progress_roll"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tracks !== undefined){
var _errs14 = errors;
if(!(validate328(data.tracks, {instancePath:instancePath+"/tracks",parentData:data,parentDataProperty:"tracks",rootData:rootData}))){
vErrors = vErrors === null ? validate328.errors : vErrors.concat(validate328.errors);
errors = vErrors.length;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data6 = data.replaces;
var _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data6)){
var valid4 = true;
var len0 = data6.length;
for(var i0=0; i0<len0; i0++){
var data7 = data6[i0];
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(typeof data7 === "string"){
if(!pattern37.test(data7)){
validate399.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate399.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs17 === errors;
if(!valid4){
break;
}
}
}
else {
validate399.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs20 = errors;
if(typeof data.color !== "string"){
validate399.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data9 = data.icon;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(errors === _errs24){
if(typeof data9 === "string"){
if(!pattern15.test(data9)){
validate399.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate399.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data10 = data.images;
var _errs26 = errors;
if(errors === _errs26){
if(Array.isArray(data10)){
var valid8 = true;
var len1 = data10.length;
for(var i1=0; i1<len1; i1++){
var data11 = data10[i1];
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(errors === _errs29){
if(typeof data11 === "string"){
if(!pattern16.test(data11)){
validate399.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate399.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs28 === errors;
if(!valid8){
break;
}
}
}
else {
validate399.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs31 = errors;
if(!(validate330(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate330.errors : vErrors.concat(validate330.errors);
errors = vErrors.length;
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs32 = errors;
var _errs33 = errors;
if(errors === _errs33){
if(errors === _errs33){
if(!(typeof data.text === "string")){
validate399.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.outcomes !== undefined){
var _errs35 = errors;
if(!(validate310(data.outcomes, {instancePath:instancePath+"/outcomes",parentData:data,parentDataProperty:"outcomes",rootData:rootData}))){
vErrors = vErrors === null ? validate310.errors : vErrors.concat(validate310.errors);
errors = vErrors.length;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data15 = data.oracles;
var _errs36 = errors;
if(errors === _errs36){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid11 = true;
for(var key0 in data15){
if(pattern3.test(key0)){
var _errs38 = errors;
if(!(validate255(data15[key0], {instancePath:instancePath+"/oracles/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate255.errors : vErrors.concat(validate255.errors);
errors = vErrors.length;
}
var valid11 = _errs38 === errors;
if(!valid11){
break;
}
}
}
}
else {
validate399.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs36 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs39 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs40 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs41 = errors;
if(typeof data._comment !== "string"){
validate399.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs43 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data21 = data.allow_momentum_burn;
var _errs44 = errors;
if(typeof data21 !== "boolean"){
validate399.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data21){
validate399.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs44 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate399.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate399.errors = vErrors;
return errors === 0;
}

var schema617 = {"title":"Progress Move (special track roll)","type":"object","description":"A progress move that rolls on a special track, such as Legacies (Starforged) or Bonds (classic Ironsworn). For progress moves that use standard progress tracks, see MoveProgressRoll instead.","required":["_id","type","name","roll_type","trigger","text","outcomes","_source","allow_momentum_burn"],"properties":{"_id":{"$ref":"#/definitions/MoveId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"move"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"roll_type":{"type":"string","const":"special_track"},"replaces":{"type":"array","description":"Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move.","items":{"$ref":"#/definitions/MoveIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"trigger":{"$ref":"#/definitions/TriggerSpecialTrack","title":"Trigger","description":"Trigger conditions for this move."},"text":{"$ref":"#/definitions/MarkdownString","description":"The complete rules text of the move."},"outcomes":{"$ref":"#/definitions/MoveOutcomes","title":"MoveOutcomes"},"oracles":{"title":"MoveOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"MoveOracleRollable"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"allow_momentum_burn":{"type":"boolean","description":"Is burning momentum allowed for this move?","default":false,"const":false}}};

function validate408(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracles === undefined){
data.oracles = {};
}
if(data.allow_momentum_burn === undefined){
data.allow_momentum_burn = false;
}
var missing0;
if((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.roll_type === undefined) && (missing0 = "roll_type"))) || ((data.trigger === undefined) && (missing0 = "trigger"))) || ((data.text === undefined) && (missing0 = "text"))) || ((data.outcomes === undefined) && (missing0 = "outcomes"))) || ((data._source === undefined) && (missing0 = "_source"))) || ((data.allow_momentum_burn === undefined) && (missing0 = "allow_momentum_burn"))){
validate408.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern62.test(data0)){
validate408.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/pattern",keyword:"pattern",params:{pattern: "^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^move:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate408.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate408.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move" !== data1){
validate408.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate408.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate408.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll_type !== undefined){
var data4 = data.roll_type;
var _errs12 = errors;
if(typeof data4 !== "string"){
validate408.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("special_track" !== data4){
validate408.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/const",keyword:"const",params:{allowedValue: "special_track"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern37.test(data6)){
validate408.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^move:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate408.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate408.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs19 = errors;
if(typeof data.color !== "string"){
validate408.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate408.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate408.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data9)){
var valid8 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate408.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate408.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs27 === errors;
if(!valid8){
break;
}
}
}
else {
validate408.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.trigger !== undefined){
var _errs30 = errors;
if(!(validate339(data.trigger, {instancePath:instancePath+"/trigger",parentData:data,parentDataProperty:"trigger",rootData:rootData}))){
vErrors = vErrors === null ? validate339.errors : vErrors.concat(validate339.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.text !== undefined){
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(errors === _errs32){
if(!(typeof data.text === "string")){
validate408.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.outcomes !== undefined){
var _errs34 = errors;
if(!(validate310(data.outcomes, {instancePath:instancePath+"/outcomes",parentData:data,parentDataProperty:"outcomes",rootData:rootData}))){
vErrors = vErrors === null ? validate310.errors : vErrors.concat(validate310.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data14 = data.oracles;
var _errs35 = errors;
if(errors === _errs35){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid11 = true;
for(var key0 in data14){
if(pattern3.test(key0)){
var _errs37 = errors;
if(!(validate255(data14[key0], {instancePath:instancePath+"/oracles/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate255.errors : vErrors.concat(validate255.errors);
errors = vErrors.length;
}
var valid11 = _errs37 === errors;
if(!valid11){
break;
}
}
}
}
else {
validate408.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs35 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs38 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs39 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs40 = errors;
if(typeof data._comment !== "string"){
validate408.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs42 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data20 = data.allow_momentum_burn;
var _errs43 = errors;
if(typeof data20 !== "boolean"){
validate408.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(false !== data20){
validate408.errors = [{instancePath:instancePath+"/allow_momentum_burn",schemaPath:"#/properties/allow_momentum_burn/const",keyword:"const",params:{allowedValue: false},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs43 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate408.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate408.errors = vErrors;
return errors === 0;
}


function validate383(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data0 = data.roll_type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("action_roll" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate384(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate384.errors : vErrors.concat(validate384.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate383.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data1 = data.roll_type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("no_roll" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate392(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate392.errors : vErrors.concat(validate392.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate383.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
if(valid0){
var _errs13 = errors;
var _errs14 = errors;
var valid5 = true;
var _errs15 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data2 = data.roll_type;
if(typeof data2 !== "string"){
var err6 = {};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("progress_roll" !== data2){
var err7 = {};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
}
}
var _valid2 = _errs15 === errors;
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
if(_valid2){
var _errs18 = errors;
if(!(validate399(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate399.errors : vErrors.concat(validate399.errors);
errors = vErrors.length;
}
var _valid2 = _errs18 === errors;
valid5 = _valid2;
}
if(!valid5){
var err8 = {instancePath:instancePath,schemaPath:"#/allOf/2/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate383.errors = vErrors;
return false;
}
var valid0 = _errs13 === errors;
if(valid0){
var _errs19 = errors;
var _errs20 = errors;
var valid7 = true;
var _errs21 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll_type !== undefined){
var data3 = data.roll_type;
if(typeof data3 !== "string"){
var err9 = {};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if("special_track" !== data3){
var err10 = {};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
}
var _valid3 = _errs21 === errors;
errors = _errs20;
if(vErrors !== null){
if(_errs20){
vErrors.length = _errs20;
}
else {
vErrors = null;
}
}
if(_valid3){
var _errs24 = errors;
if(!(validate408(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate408.errors : vErrors.concat(validate408.errors);
errors = vErrors.length;
}
var _valid3 = _errs24 === errors;
valid7 = _valid3;
}
if(!valid7){
var err11 = {instancePath:instancePath,schemaPath:"#/allOf/3/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate383.errors = vErrors;
return false;
}
var valid0 = _errs19 === errors;
}
}
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.roll_type === undefined) && (missing0 = "roll_type")){
validate383.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.roll_type !== undefined){
var data4 = data.roll_type;
if(!((((data4 === "action_roll") || (data4 === "no_roll")) || (data4 === "progress_roll")) || (data4 === "special_track"))){
validate383.errors = [{instancePath:instancePath+"/roll_type",schemaPath:"#/properties/roll_type/enum",keyword:"enum",params:{allowedValues: schema589.properties.roll_type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate383.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate383.errors = vErrors;
return errors === 0;
}

var wrapper3 = {validate: validate382};

function validate382(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.collections === undefined){
data.collections = {};
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.collections === undefined) && (missing0 = "collections"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate382.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern67.test(data0)){
validate382.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveCategoryId/pattern",keyword:"pattern",params:{pattern: "^move_category:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^move_category:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate382.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/MoveCategoryId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate382.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("move_category" !== data1){
validate382.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "move_category"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate382.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate382.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern42.test(data5)){
validate382.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveCategoryIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate382.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/MoveCategoryIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate382.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data6 = data.enhances;
var _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data6)){
var valid6 = true;
var len1 = data6.length;
for(var i1=0; i1<len1; i1++){
var data7 = data6[i1];
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(typeof data7 === "string"){
if(!pattern42.test(data7)){
validate382.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/MoveCategoryIdWildcard/pattern",keyword:"pattern",params:{pattern: "^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^move_category:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate382.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/MoveCategoryIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs19 === errors;
if(!valid6){
break;
}
}
}
else {
validate382.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs22 = errors;
if(typeof data.color !== "string"){
validate382.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data9 = data.icon;
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern15.test(data9)){
validate382.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate382.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data10 = data.images;
var _errs28 = errors;
if(errors === _errs28){
if(Array.isArray(data10)){
var valid10 = true;
var len2 = data10.length;
for(var i2=0; i2<len2; i2++){
var data11 = data10[i2];
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern16.test(data11)){
validate382.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate382.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs30 === errors;
if(!valid10){
break;
}
}
}
else {
validate382.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs33 = errors;
var _errs34 = errors;
if(errors === _errs34){
if(errors === _errs34){
if(!(typeof data.summary === "string")){
validate382.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs36 = errors;
var _errs37 = errors;
if(errors === _errs37){
if(errors === _errs37){
if(!(typeof data.description === "string")){
validate382.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data14 = data.contents;
var _errs39 = errors;
if(errors === _errs39){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid14 = true;
for(var key0 in data14){
if(pattern3.test(key0)){
var _errs41 = errors;
if(!(validate383(data14[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate383.errors : vErrors.concat(validate383.errors);
errors = vErrors.length;
}
var valid14 = _errs41 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate382.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs39 === errors;
if(valid0){
var data16 = data.collections;
var _errs42 = errors;
if(errors === _errs42){
if(data16 && typeof data16 == "object" && !Array.isArray(data16)){
var valid15 = true;
for(var key1 in data16){
if(pattern3.test(key1)){
var _errs44 = errors;
if(!(wrapper3.validate(data16[key1], {instancePath:instancePath+"/collections/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data16,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? wrapper3.validate.errors : vErrors.concat(wrapper3.validate.errors);
errors = vErrors.length;
}
var valid15 = _errs44 === errors;
if(!valid15){
break;
}
}
}
}
else {
validate382.errors = [{instancePath:instancePath+"/collections",schemaPath:"#/properties/collections/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs45 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs46 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs47 = errors;
if(typeof data._comment !== "string"){
validate382.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs49 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate382.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate382.errors = vErrors;
return errors === 0;
}

var schema626 = {"title":"NpcCollection","type":"object","required":["_id","type","name","contents","collections","_source"],"properties":{"_id":{"$ref":"#/definitions/NpcCollectionId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"npc_collection"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/NpcCollectionIdWildcard"}},"enhances":{"type":"array","description":"This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own.","items":{"$ref":"#/definitions/NpcCollectionIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString","description":"A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."},"description":{"$ref":"#/definitions/MarkdownString","description":"A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."},"contents":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Npc"}}},"collections":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcCollection"}}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema637 = {"title":"Npc","type":"object","description":"A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged.","required":["_id","type","name","rank","nature","features","drives","tactics","variants","description","_source"],"properties":{"_id":{"$ref":"#/definitions/NpcId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"npc"},"name":{"$ref":"#/definitions/Label"},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/NpcIdWildcard"}},"rank":{"$ref":"#/definitions/ChallengeRank","description":"The suggested challenge rank for this NPC."},"nature":{"$ref":"#/definitions/NpcNature"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"summary":{"$ref":"#/definitions/MarkdownString"},"features":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"drives":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"tactics":{"type":"array","items":{"$ref":"#/definitions/MarkdownString"}},"variants":{"type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcVariant"}}},"description":{"$ref":"#/definitions/MarkdownString"},"quest_starter":{"$ref":"#/definitions/MarkdownString"},"your_truth":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema642 = {"title":"ChallengeRank","description":"Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).\n\n  - `1`: Troublesome\n  - `2`: Dangerous\n  - `3`: Formidable\n  - `4`: Extreme\n  - `5`: Epic","enum":[1,2,3,4,5]};
var schema651 = {"title":"NpcVariant","type":"object","required":["_id","name","rank","nature","description"],"properties":{"_id":{"$ref":"#/definitions/NpcVariantId","description":"The unique Datasworn ID for this node."},"name":{"$ref":"#/definitions/Label"},"rank":{"$ref":"#/definitions/ChallengeRank","description":"The suggested challenge rank for this NPC."},"nature":{"$ref":"#/definitions/NpcNature"},"summary":{"$ref":"#/definitions/MarkdownString"},"description":{"$ref":"#/definitions/MarkdownString"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."}}};
var schema652 = {"title":"NpcVariantId","type":"string","description":"A unique ID representing a NpcVariant object.","pattern":"^npc\\.variant:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"};
var pattern296 = new RegExp("^npc\\.variant:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$", "u");

function validate423(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((((((data._id === undefined) && (missing0 = "_id")) || ((data.name === undefined) && (missing0 = "name"))) || ((data.rank === undefined) && (missing0 = "rank"))) || ((data.nature === undefined) && (missing0 = "nature"))) || ((data.description === undefined) && (missing0 = "description"))){
validate423.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern296.test(data0)){
validate423.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/NpcVariantId/pattern",keyword:"pattern",params:{pattern: "^npc\\.variant:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"},message:"must match pattern \""+"^npc\\.variant:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})\\.([a-z][a-z_]*|\\*)$"+"\""}];
return false;
}
}
else {
validate423.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/NpcVariantId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate423.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rank !== undefined){
var data2 = data.rank;
var _errs7 = errors;
if(!(((((data2 === 1) || (data2 === 2)) || (data2 === 3)) || (data2 === 4)) || (data2 === 5))){
validate423.errors = [{instancePath:instancePath+"/rank",schemaPath:"#/definitions/ChallengeRank/enum",keyword:"enum",params:{allowedValues: schema642.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nature !== undefined){
var _errs9 = errors;
if(typeof data.nature !== "string"){
validate423.errors = [{instancePath:instancePath+"/nature",schemaPath:"#/definitions/NpcNature/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs12 = errors;
var _errs13 = errors;
if(errors === _errs13){
if(errors === _errs13){
if(!(typeof data.summary === "string")){
validate423.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs15 = errors;
var _errs16 = errors;
if(errors === _errs16){
if(errors === _errs16){
if(!(typeof data.description === "string")){
validate423.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs18 = errors;
if(typeof data._comment !== "string"){
validate423.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate423.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate423.errors = vErrors;
return errors === 0;
}


function validate422(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.variants === undefined){
data.variants = {};
}
var missing0;
if((((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.rank === undefined) && (missing0 = "rank"))) || ((data.nature === undefined) && (missing0 = "nature"))) || ((data.features === undefined) && (missing0 = "features"))) || ((data.drives === undefined) && (missing0 = "drives"))) || ((data.tactics === undefined) && (missing0 = "tactics"))) || ((data.variants === undefined) && (missing0 = "variants"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate422.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern59.test(data0)){
validate422.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/NpcId/pattern",keyword:"pattern",params:{pattern: "^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate422.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/NpcId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate422.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("npc" !== data1){
validate422.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "npc"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate422.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate422.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern24.test(data5)){
validate422.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/NpcIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"},message:"must match pattern \""+"^npc:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){2,5})$"+"\""}];
return false;
}
}
else {
validate422.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/NpcIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate422.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rank !== undefined){
var data6 = data.rank;
var _errs17 = errors;
if(!(((((data6 === 1) || (data6 === 2)) || (data6 === 3)) || (data6 === 4)) || (data6 === 5))){
validate422.errors = [{instancePath:instancePath+"/rank",schemaPath:"#/definitions/ChallengeRank/enum",keyword:"enum",params:{allowedValues: schema642.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nature !== undefined){
var _errs19 = errors;
if(typeof data.nature !== "string"){
validate422.errors = [{instancePath:instancePath+"/nature",schemaPath:"#/definitions/NpcNature/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs22 = errors;
if(typeof data.color !== "string"){
validate422.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data9 = data.icon;
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern15.test(data9)){
validate422.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate422.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data10 = data.images;
var _errs28 = errors;
if(errors === _errs28){
if(Array.isArray(data10)){
var valid10 = true;
var len1 = data10.length;
for(var i1=0; i1<len1; i1++){
var data11 = data10[i1];
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern16.test(data11)){
validate422.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate422.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs30 === errors;
if(!valid10){
break;
}
}
}
else {
validate422.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs33 = errors;
var _errs34 = errors;
if(errors === _errs34){
if(errors === _errs34){
if(!(typeof data.summary === "string")){
validate422.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.features !== undefined){
var data13 = data.features;
var _errs36 = errors;
if(errors === _errs36){
if(Array.isArray(data13)){
var valid13 = true;
var len2 = data13.length;
for(var i2=0; i2<len2; i2++){
var _errs38 = errors;
var _errs39 = errors;
if(errors === _errs39){
if(errors === _errs39){
if(!(typeof data13[i2] === "string")){
validate422.errors = [{instancePath:instancePath+"/features/" + i2,schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid13 = _errs38 === errors;
if(!valid13){
break;
}
}
}
else {
validate422.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.drives !== undefined){
var data15 = data.drives;
var _errs41 = errors;
if(errors === _errs41){
if(Array.isArray(data15)){
var valid15 = true;
var len3 = data15.length;
for(var i3=0; i3<len3; i3++){
var _errs43 = errors;
var _errs44 = errors;
if(errors === _errs44){
if(errors === _errs44){
if(!(typeof data15[i3] === "string")){
validate422.errors = [{instancePath:instancePath+"/drives/" + i3,schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid15 = _errs43 === errors;
if(!valid15){
break;
}
}
}
else {
validate422.errors = [{instancePath:instancePath+"/drives",schemaPath:"#/properties/drives/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tactics !== undefined){
var data17 = data.tactics;
var _errs46 = errors;
if(errors === _errs46){
if(Array.isArray(data17)){
var valid17 = true;
var len4 = data17.length;
for(var i4=0; i4<len4; i4++){
var _errs48 = errors;
var _errs49 = errors;
if(errors === _errs49){
if(errors === _errs49){
if(!(typeof data17[i4] === "string")){
validate422.errors = [{instancePath:instancePath+"/tactics/" + i4,schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid17 = _errs48 === errors;
if(!valid17){
break;
}
}
}
else {
validate422.errors = [{instancePath:instancePath+"/tactics",schemaPath:"#/properties/tactics/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data19 = data.variants;
var _errs51 = errors;
if(errors === _errs51){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
var valid19 = true;
for(var key0 in data19){
if(pattern3.test(key0)){
var _errs53 = errors;
if(!(validate423(data19[key0], {instancePath:instancePath+"/variants/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data19,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate423.errors : vErrors.concat(validate423.errors);
errors = vErrors.length;
}
var valid19 = _errs53 === errors;
if(!valid19){
break;
}
}
}
}
else {
validate422.errors = [{instancePath:instancePath+"/variants",schemaPath:"#/properties/variants/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs51 === errors;
if(valid0){
if(data.description !== undefined){
var _errs54 = errors;
var _errs55 = errors;
if(errors === _errs55){
if(errors === _errs55){
if(!(typeof data.description === "string")){
validate422.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs54 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.quest_starter !== undefined){
var _errs57 = errors;
var _errs58 = errors;
if(errors === _errs58){
if(errors === _errs58){
if(!(typeof data.quest_starter === "string")){
validate422.errors = [{instancePath:instancePath+"/quest_starter",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs57 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.your_truth !== undefined){
var _errs60 = errors;
var _errs61 = errors;
if(errors === _errs61){
if(errors === _errs61){
if(!(typeof data.your_truth === "string")){
validate422.errors = [{instancePath:instancePath+"/your_truth",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs60 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs63 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs63 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs64 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs64 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs65 = errors;
if(typeof data._comment !== "string"){
validate422.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs65 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs67 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs67 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate422.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate422.errors = vErrors;
return errors === 0;
}

var wrapper4 = {validate: validate421};

function validate421(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.contents === undefined){
data.contents = {};
}
if(data.collections === undefined){
data.collections = {};
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.contents === undefined) && (missing0 = "contents"))) || ((data.collections === undefined) && (missing0 = "collections"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate421.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern64.test(data0)){
validate421.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/NpcCollectionId/pattern",keyword:"pattern",params:{pattern: "^npc_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"},message:"must match pattern \""+"^npc_collection:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){1,4})$"+"\""}];
return false;
}
}
else {
validate421.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/NpcCollectionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate421.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("npc_collection" !== data1){
validate421.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "npc_collection"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate421.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate421.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern39.test(data5)){
validate421.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/NpcCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate421.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/NpcCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate421.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enhances !== undefined){
var data6 = data.enhances;
var _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data6)){
var valid6 = true;
var len1 = data6.length;
for(var i1=0; i1<len1; i1++){
var data7 = data6[i1];
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(typeof data7 === "string"){
if(!pattern39.test(data7)){
validate421.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/NpcCollectionIdWildcard/pattern",keyword:"pattern",params:{pattern: "^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"},message:"must match pattern \""+"^npc_collection:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)(?:\\/(?:[a-z][a-z_]*|\\*|\\*\\*)){1,4})$"+"\""}];
return false;
}
}
else {
validate421.errors = [{instancePath:instancePath+"/enhances/" + i1,schemaPath:"#/definitions/NpcCollectionIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid6 = _errs19 === errors;
if(!valid6){
break;
}
}
}
else {
validate421.errors = [{instancePath:instancePath+"/enhances",schemaPath:"#/properties/enhances/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs22 = errors;
if(typeof data.color !== "string"){
validate421.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data9 = data.icon;
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern15.test(data9)){
validate421.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate421.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data10 = data.images;
var _errs28 = errors;
if(errors === _errs28){
if(Array.isArray(data10)){
var valid10 = true;
var len2 = data10.length;
for(var i2=0; i2<len2; i2++){
var data11 = data10[i2];
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern16.test(data11)){
validate421.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate421.errors = [{instancePath:instancePath+"/images/" + i2,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid10 = _errs30 === errors;
if(!valid10){
break;
}
}
}
else {
validate421.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs33 = errors;
var _errs34 = errors;
if(errors === _errs34){
if(errors === _errs34){
if(!(typeof data.summary === "string")){
validate421.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs36 = errors;
var _errs37 = errors;
if(errors === _errs37){
if(errors === _errs37){
if(!(typeof data.description === "string")){
validate421.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data14 = data.contents;
var _errs39 = errors;
if(errors === _errs39){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid14 = true;
for(var key0 in data14){
if(pattern3.test(key0)){
var _errs41 = errors;
if(!(validate422(data14[key0], {instancePath:instancePath+"/contents/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate422.errors : vErrors.concat(validate422.errors);
errors = vErrors.length;
}
var valid14 = _errs41 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate421.errors = [{instancePath:instancePath+"/contents",schemaPath:"#/properties/contents/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs39 === errors;
if(valid0){
var data16 = data.collections;
var _errs42 = errors;
if(errors === _errs42){
if(data16 && typeof data16 == "object" && !Array.isArray(data16)){
var valid15 = true;
for(var key1 in data16){
if(pattern3.test(key1)){
var _errs44 = errors;
if(!(wrapper4.validate(data16[key1], {instancePath:instancePath+"/collections/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data16,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? wrapper4.validate.errors : vErrors.concat(wrapper4.validate.errors);
errors = vErrors.length;
}
var valid15 = _errs44 === errors;
if(!valid15){
break;
}
}
}
}
else {
validate421.errors = [{instancePath:instancePath+"/collections",schemaPath:"#/properties/collections/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
if(valid0){
if(data.suggestions !== undefined){
var _errs45 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs46 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs47 = errors;
if(typeof data._comment !== "string"){
validate421.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs49 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate421.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate421.errors = vErrors;
return errors === 0;
}

var schema661 = {"title":"Rarity","type":"object","description":"A rarity, as described in Ironsworn: Delve.","required":["_id","type","name","xp_cost","asset","_source"],"properties":{"_id":{"$ref":"#/definitions/RarityId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"rarity"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"xp_cost":{"type":"integer","description":"From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity.","default":3,"minimum":3,"maximum":5},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/RarityIdWildcard"}},"asset":{"$ref":"#/definitions/AssetId","description":"The asset augmented by this rarity."},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};

function validate433(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.xp_cost === undefined){
data.xp_cost = 3;
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.xp_cost === undefined) && (missing0 = "xp_cost"))) || ((data.asset === undefined) && (missing0 = "asset"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate433.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern71.test(data0)){
validate433.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/RarityId/pattern",keyword:"pattern",params:{pattern: "^rarity:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^rarity:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""}];
return false;
}
}
else {
validate433.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/RarityId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate433.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("rarity" !== data1){
validate433.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "rarity"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate433.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate433.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data4 = data.xp_cost;
var _errs12 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
validate433.errors = [{instancePath:instancePath+"/xp_cost",schemaPath:"#/properties/xp_cost/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
if(errors === _errs12){
if(typeof data4 == "number"){
if(data4 > 5 || isNaN(data4)){
validate433.errors = [{instancePath:instancePath+"/xp_cost",schemaPath:"#/properties/xp_cost/maximum",keyword:"maximum",params:{comparison: "<=", limit: 5},message:"must be <= 5"}];
return false;
}
else {
if(data4 < 3 || isNaN(data4)){
validate433.errors = [{instancePath:instancePath+"/xp_cost",schemaPath:"#/properties/xp_cost/minimum",keyword:"minimum",params:{comparison: ">=", limit: 3},message:"must be >= 3"}];
return false;
}
}
}
}
var valid0 = _errs12 === errors;
if(valid0){
if(data.replaces !== undefined){
var data5 = data.replaces;
var _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var data6 = data5[i0];
var _errs16 = errors;
var _errs17 = errors;
if(errors === _errs17){
if(typeof data6 === "string"){
if(!pattern51.test(data6)){
validate433.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/RarityIdWildcard/pattern",keyword:"pattern",params:{pattern: "^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^rarity:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""}];
return false;
}
}
else {
validate433.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/RarityIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs16 === errors;
if(!valid4){
break;
}
}
}
else {
validate433.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.asset !== undefined){
var data7 = data.asset;
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(typeof data7 === "string"){
if(!pattern61.test(data7)){
validate433.errors = [{instancePath:instancePath+"/asset",schemaPath:"#/definitions/AssetId/pattern",keyword:"pattern",params:{pattern: "^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^asset:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate433.errors = [{instancePath:instancePath+"/asset",schemaPath:"#/definitions/AssetId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs22 = errors;
if(typeof data.color !== "string"){
validate433.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data9 = data.icon;
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern15.test(data9)){
validate433.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate433.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data10 = data.images;
var _errs28 = errors;
if(errors === _errs28){
if(Array.isArray(data10)){
var valid9 = true;
var len1 = data10.length;
for(var i1=0; i1<len1; i1++){
var data11 = data10[i1];
var _errs30 = errors;
var _errs31 = errors;
if(errors === _errs31){
if(errors === _errs31){
if(typeof data11 === "string"){
if(!pattern16.test(data11)){
validate433.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate433.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid9 = _errs30 === errors;
if(!valid9){
break;
}
}
}
else {
validate433.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs33 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs34 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs35 = errors;
if(typeof data._comment !== "string"){
validate433.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs37 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate433.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate433.errors = vErrors;
return errors === 0;
}

var schema670 = {"title":"DelveSite","type":"object","description":"A delve site with a theme, domain, and denizens.","required":["_id","type","name","theme","domain","rank","description","denizens","_source"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"delve_site"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/DelveSiteIdWildcard"}},"region":{"$ref":"#/definitions/AtlasEntryId","description":"The ID of an atlas entry representing the region in which this delve site is located."},"theme":{"$ref":"#/definitions/DelveSiteThemeId","description":"The ID of the site's DelveSiteTheme card."},"domain":{"$ref":"#/definitions/DelveSiteDomainId","description":"The ID of the site's DelveSiteDomain card."},"extra_card":{"description":"An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve.","anyOf":[{"$ref":"#/definitions/DelveSiteThemeId"},{"$ref":"#/definitions/DelveSiteDomainId"}]},"rank":{"$ref":"#/definitions/ChallengeRank"},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"description":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"denizens":{"description":"Represents the delve site's denizen matrix as an array of objects.","rollable":"1d100","allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteDenizen"}},{"type":"array","items":[{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"very_common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":1},"max":{"type":"number","const":27}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":28},"max":{"type":"number","const":41}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":42},"max":{"type":"number","const":55}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"common"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":56},"max":{"type":"number","const":69}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":70},"max":{"type":"number","const":75}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":76},"max":{"type":"number","const":81}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":82},"max":{"type":"number","const":87}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"uncommon"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":88},"max":{"type":"number","const":93}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"rare"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":94},"max":{"type":"number","const":95}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"rare"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":96},"max":{"type":"number","const":97}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"rare"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":98},"max":{"type":"number","const":99}}}},"additionalProperties":{}},{"title":"DelveSiteDenizenStatic","type":"object","required":["frequency","roll"],"properties":{"frequency":{"type":"string","const":"unforeseen"},"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":100},"max":{"type":"number","const":100}}}},"additionalProperties":{}}],"minItems":12,"maxItems":12,"additionalItems":{}}]},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema685 = {"title":"DelveSiteDenizen","type":"object","description":"Represents an entry in a delve site denizen matrix. Denizen matrices are described in Ironsworn: Delve.","required":["frequency","roll"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDenizenId"},"name":{"$ref":"#/definitions/Label","description":"A name for the denizen, if it's different than the `name` property of the NPC."},"npc":{"$ref":"#/definitions/NpcId","description":"The ID of the relevant NPC entry, if one is specified."},"frequency":{"$ref":"#/definitions/DelveSiteDenizenFrequency"},"roll":{"$ref":"#/definitions/DiceRange"}}};
var schema686 = {"title":"DelveSiteDenizenId","type":"string","description":"A unique ID representing a DelveSiteDenizen object.","pattern":"^delve_site\\.denizen:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"};
var schema689 = {"title":"DelveSiteDenizenFrequency","enum":["very_common","common","uncommon","rare","unforeseen"]};
var pattern314 = new RegExp("^delve_site\\.denizen:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$", "u");

function validate441(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((data.frequency === undefined) && (missing0 = "frequency")) || ((data.roll === undefined) && (missing0 = "roll"))){
validate441.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern314.test(data0)){
validate441.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDenizenId/pattern",keyword:"pattern",params:{pattern: "^delve_site\\.denizen:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},message:"must match pattern \""+"^delve_site\\.denizen:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"+"\""}];
return false;
}
}
else {
validate441.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDenizenId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs4 = errors;
if(typeof data.name !== "string"){
validate441.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.npc !== undefined){
var data2 = data.npc;
var _errs7 = errors;
var _errs8 = errors;
if(errors === _errs8){
if(typeof data2 === "string"){
if(!pattern59.test(data2)){
validate441.errors = [{instancePath:instancePath+"/npc",schemaPath:"#/definitions/NpcId/pattern",keyword:"pattern",params:{pattern: "^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^npc:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate441.errors = [{instancePath:instancePath+"/npc",schemaPath:"#/definitions/NpcId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.frequency !== undefined){
var data3 = data.frequency;
var _errs10 = errors;
if(!(((((data3 === "very_common") || (data3 === "common")) || (data3 === "uncommon")) || (data3 === "rare")) || (data3 === "unforeseen"))){
validate441.errors = [{instancePath:instancePath+"/frequency",schemaPath:"#/definitions/DelveSiteDenizenFrequency/enum",keyword:"enum",params:{allowedValues: schema689.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll !== undefined){
var data4 = data.roll;
var _errs12 = errors;
var _errs13 = errors;
if(errors === _errs13){
if(data4 && typeof data4 == "object" && !Array.isArray(data4)){
var missing1;
if(((data4.min === undefined) && (missing1 = "min")) || ((data4.max === undefined) && (missing1 = "max"))){
validate441.errors = [{instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data4.min !== undefined){
var data5 = data4.min;
var _errs15 = errors;
if(!((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5)))){
validate441.errors = [{instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid6 = _errs15 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.max !== undefined){
var data6 = data4.max;
var _errs17 = errors;
if(!((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6)))){
validate441.errors = [{instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid6 = _errs17 === errors;
}
else {
var valid6 = true;
}
}
}
}
else {
validate441.errors = [{instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
else {
validate441.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate441.errors = vErrors;
return errors === 0;
}


function validate438(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.theme === undefined) && (missing0 = "theme"))) || ((data.domain === undefined) && (missing0 = "domain"))) || ((data.rank === undefined) && (missing0 = "rank"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.denizens === undefined) && (missing0 = "denizens"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate438.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern68.test(data0)){
validate438.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteId/pattern",keyword:"pattern",params:{pattern: "^delve_site:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""}];
return false;
}
}
else {
validate438.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate438.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("delve_site" !== data1){
validate438.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "delve_site"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate438.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate438.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern43.test(data5)){
validate438.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/DelveSiteIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""}];
return false;
}
}
else {
validate438.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/DelveSiteIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.region !== undefined){
var data6 = data.region;
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(typeof data6 === "string"){
if(!pattern58.test(data6)){
validate438.errors = [{instancePath:instancePath+"/region",schemaPath:"#/definitions/AtlasEntryId/pattern",keyword:"pattern",params:{pattern: "^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^atlas_entry:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate438.errors = [{instancePath:instancePath+"/region",schemaPath:"#/definitions/AtlasEntryId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.theme !== undefined){
var data7 = data.theme;
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(typeof data7 === "string"){
if(!pattern70.test(data7)){
validate438.errors = [{instancePath:instancePath+"/theme",schemaPath:"#/definitions/DelveSiteThemeId/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""}];
return false;
}
}
else {
validate438.errors = [{instancePath:instancePath+"/theme",schemaPath:"#/definitions/DelveSiteThemeId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.domain !== undefined){
var data8 = data.domain;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(typeof data8 === "string"){
if(!pattern69.test(data8)){
validate438.errors = [{instancePath:instancePath+"/domain",schemaPath:"#/definitions/DelveSiteDomainId/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""}];
return false;
}
}
else {
validate438.errors = [{instancePath:instancePath+"/domain",schemaPath:"#/definitions/DelveSiteDomainId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.extra_card !== undefined){
var data9 = data.extra_card;
var _errs26 = errors;
var _errs27 = errors;
var valid9 = false;
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(typeof data9 === "string"){
if(!pattern70.test(data9)){
var err0 = {instancePath:instancePath+"/extra_card",schemaPath:"#/definitions/DelveSiteThemeId/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
else {
var err1 = {instancePath:instancePath+"/extra_card",schemaPath:"#/definitions/DelveSiteThemeId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
var _valid0 = _errs28 === errors;
valid9 = valid9 || _valid0;
if(!valid9){
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(typeof data9 === "string"){
if(!pattern69.test(data9)){
var err2 = {instancePath:instancePath+"/extra_card",schemaPath:"#/definitions/DelveSiteDomainId/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
else {
var err3 = {instancePath:instancePath+"/extra_card",schemaPath:"#/definitions/DelveSiteDomainId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs31 === errors;
valid9 = valid9 || _valid0;
}
if(!valid9){
var err4 = {instancePath:instancePath+"/extra_card",schemaPath:"#/properties/extra_card/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
validate438.errors = vErrors;
return false;
}
else {
errors = _errs27;
if(vErrors !== null){
if(_errs27){
vErrors.length = _errs27;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rank !== undefined){
var data10 = data.rank;
var _errs34 = errors;
if(!(((((data10 === 1) || (data10 === 2)) || (data10 === 3)) || (data10 === 4)) || (data10 === 5))){
validate438.errors = [{instancePath:instancePath+"/rank",schemaPath:"#/definitions/ChallengeRank/enum",keyword:"enum",params:{allowedValues: schema642.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs36 = errors;
if(typeof data.color !== "string"){
validate438.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data12 = data.icon;
var _errs39 = errors;
var _errs40 = errors;
if(errors === _errs40){
if(errors === _errs40){
if(typeof data12 === "string"){
if(!pattern15.test(data12)){
validate438.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate438.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data13 = data.images;
var _errs42 = errors;
if(errors === _errs42){
if(Array.isArray(data13)){
var valid15 = true;
var len1 = data13.length;
for(var i1=0; i1<len1; i1++){
var data14 = data13[i1];
var _errs44 = errors;
var _errs45 = errors;
if(errors === _errs45){
if(errors === _errs45){
if(typeof data14 === "string"){
if(!pattern16.test(data14)){
validate438.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate438.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid15 = _errs44 === errors;
if(!valid15){
break;
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs47 = errors;
var _errs48 = errors;
if(errors === _errs48){
if(errors === _errs48){
if(!(typeof data.description === "string")){
validate438.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs50 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs51 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs51 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs52 = errors;
if(typeof data._comment !== "string"){
validate438.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs52 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.denizens !== undefined){
var data19 = data.denizens;
var _errs54 = errors;
var _errs55 = errors;
if(errors === _errs55){
if(Array.isArray(data19)){
var valid19 = true;
var len2 = data19.length;
for(var i2=0; i2<len2; i2++){
var _errs57 = errors;
if(!(validate441(data19[i2], {instancePath:instancePath+"/denizens/" + i2,parentData:data19,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate441.errors : vErrors.concat(validate441.errors);
errors = vErrors.length;
}
var valid19 = _errs57 === errors;
if(!valid19){
break;
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens",schemaPath:"#/properties/denizens/allOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid18 = _errs55 === errors;
if(valid18){
var _errs58 = errors;
if(errors === _errs58){
if(Array.isArray(data19)){
if(data19.length > 12){
validate438.errors = [{instancePath:instancePath+"/denizens",schemaPath:"#/properties/denizens/allOf/1/maxItems",keyword:"maxItems",params:{limit: 12},message:"must NOT have more than 12 items"}];
return false;
}
else {
if(data19.length < 12){
validate438.errors = [{instancePath:instancePath+"/denizens",schemaPath:"#/properties/denizens/allOf/1/minItems",keyword:"minItems",params:{limit: 12},message:"must NOT have fewer than 12 items"}];
return false;
}
else {
var len4 = data19.length;
if(len4 > 0){
var data21 = data19[0];
var _errs60 = errors;
if(errors === _errs60){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
var missing1;
if(((data21.frequency === undefined) && (missing1 = "frequency")) || ((data21.roll === undefined) && (missing1 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/0",schemaPath:"#/properties/denizens/allOf/1/items/0/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data21.frequency !== undefined){
var data22 = data21.frequency;
var _errs63 = errors;
if(typeof data22 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/0/frequency",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("very_common" !== data22){
validate438.errors = [{instancePath:instancePath+"/denizens/0/frequency",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/frequency/const",keyword:"const",params:{allowedValue: "very_common"},message:"must be equal to constant"}];
return false;
}
var valid21 = _errs63 === errors;
}
else {
var valid21 = true;
}
if(valid21){
if(data21.roll !== undefined){
var data23 = data21.roll;
var _errs65 = errors;
if(errors === _errs65){
if(data23 && typeof data23 == "object" && !Array.isArray(data23)){
var missing2;
if(((data23.min === undefined) && (missing2 = "min")) || ((data23.max === undefined) && (missing2 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/0/roll",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/roll/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data23.min !== undefined){
var data24 = data23.min;
var _errs67 = errors;
if(!(typeof data24 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/0/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(1 !== data24){
validate438.errors = [{instancePath:instancePath+"/denizens/0/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 1},message:"must be equal to constant"}];
return false;
}
var valid22 = _errs67 === errors;
}
else {
var valid22 = true;
}
if(valid22){
if(data23.max !== undefined){
var data25 = data23.max;
var _errs69 = errors;
if(!(typeof data25 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/0/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(27 !== data25){
validate438.errors = [{instancePath:instancePath+"/denizens/0/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 27},message:"must be equal to constant"}];
return false;
}
var valid22 = _errs69 === errors;
}
else {
var valid22 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/0/roll",schemaPath:"#/properties/denizens/allOf/1/items/0/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid21 = _errs65 === errors;
}
else {
var valid21 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/0",schemaPath:"#/properties/denizens/allOf/1/items/0/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs60 === errors;
}
if(valid20){
if(len4 > 1){
var data26 = data19[1];
var _errs71 = errors;
if(errors === _errs71){
if(data26 && typeof data26 == "object" && !Array.isArray(data26)){
var missing3;
if(((data26.frequency === undefined) && (missing3 = "frequency")) || ((data26.roll === undefined) && (missing3 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/1",schemaPath:"#/properties/denizens/allOf/1/items/1/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
if(data26.frequency !== undefined){
var data27 = data26.frequency;
var _errs74 = errors;
if(typeof data27 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/1/frequency",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("common" !== data27){
validate438.errors = [{instancePath:instancePath+"/denizens/1/frequency",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/frequency/const",keyword:"const",params:{allowedValue: "common"},message:"must be equal to constant"}];
return false;
}
var valid23 = _errs74 === errors;
}
else {
var valid23 = true;
}
if(valid23){
if(data26.roll !== undefined){
var data28 = data26.roll;
var _errs76 = errors;
if(errors === _errs76){
if(data28 && typeof data28 == "object" && !Array.isArray(data28)){
var missing4;
if(((data28.min === undefined) && (missing4 = "min")) || ((data28.max === undefined) && (missing4 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/1/roll",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/roll/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
if(data28.min !== undefined){
var data29 = data28.min;
var _errs78 = errors;
if(!(typeof data29 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/1/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(28 !== data29){
validate438.errors = [{instancePath:instancePath+"/denizens/1/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 28},message:"must be equal to constant"}];
return false;
}
var valid24 = _errs78 === errors;
}
else {
var valid24 = true;
}
if(valid24){
if(data28.max !== undefined){
var data30 = data28.max;
var _errs80 = errors;
if(!(typeof data30 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/1/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(41 !== data30){
validate438.errors = [{instancePath:instancePath+"/denizens/1/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 41},message:"must be equal to constant"}];
return false;
}
var valid24 = _errs80 === errors;
}
else {
var valid24 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/1/roll",schemaPath:"#/properties/denizens/allOf/1/items/1/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid23 = _errs76 === errors;
}
else {
var valid23 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/1",schemaPath:"#/properties/denizens/allOf/1/items/1/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs71 === errors;
}
if(valid20){
if(len4 > 2){
var data31 = data19[2];
var _errs82 = errors;
if(errors === _errs82){
if(data31 && typeof data31 == "object" && !Array.isArray(data31)){
var missing5;
if(((data31.frequency === undefined) && (missing5 = "frequency")) || ((data31.roll === undefined) && (missing5 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/2",schemaPath:"#/properties/denizens/allOf/1/items/2/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
if(data31.frequency !== undefined){
var data32 = data31.frequency;
var _errs85 = errors;
if(typeof data32 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/2/frequency",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("common" !== data32){
validate438.errors = [{instancePath:instancePath+"/denizens/2/frequency",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/frequency/const",keyword:"const",params:{allowedValue: "common"},message:"must be equal to constant"}];
return false;
}
var valid25 = _errs85 === errors;
}
else {
var valid25 = true;
}
if(valid25){
if(data31.roll !== undefined){
var data33 = data31.roll;
var _errs87 = errors;
if(errors === _errs87){
if(data33 && typeof data33 == "object" && !Array.isArray(data33)){
var missing6;
if(((data33.min === undefined) && (missing6 = "min")) || ((data33.max === undefined) && (missing6 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/2/roll",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/roll/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
if(data33.min !== undefined){
var data34 = data33.min;
var _errs89 = errors;
if(!(typeof data34 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/2/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(42 !== data34){
validate438.errors = [{instancePath:instancePath+"/denizens/2/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 42},message:"must be equal to constant"}];
return false;
}
var valid26 = _errs89 === errors;
}
else {
var valid26 = true;
}
if(valid26){
if(data33.max !== undefined){
var data35 = data33.max;
var _errs91 = errors;
if(!(typeof data35 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/2/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(55 !== data35){
validate438.errors = [{instancePath:instancePath+"/denizens/2/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 55},message:"must be equal to constant"}];
return false;
}
var valid26 = _errs91 === errors;
}
else {
var valid26 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/2/roll",schemaPath:"#/properties/denizens/allOf/1/items/2/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs87 === errors;
}
else {
var valid25 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/2",schemaPath:"#/properties/denizens/allOf/1/items/2/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs82 === errors;
}
if(valid20){
if(len4 > 3){
var data36 = data19[3];
var _errs93 = errors;
if(errors === _errs93){
if(data36 && typeof data36 == "object" && !Array.isArray(data36)){
var missing7;
if(((data36.frequency === undefined) && (missing7 = "frequency")) || ((data36.roll === undefined) && (missing7 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/3",schemaPath:"#/properties/denizens/allOf/1/items/3/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
if(data36.frequency !== undefined){
var data37 = data36.frequency;
var _errs96 = errors;
if(typeof data37 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/3/frequency",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("common" !== data37){
validate438.errors = [{instancePath:instancePath+"/denizens/3/frequency",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/frequency/const",keyword:"const",params:{allowedValue: "common"},message:"must be equal to constant"}];
return false;
}
var valid27 = _errs96 === errors;
}
else {
var valid27 = true;
}
if(valid27){
if(data36.roll !== undefined){
var data38 = data36.roll;
var _errs98 = errors;
if(errors === _errs98){
if(data38 && typeof data38 == "object" && !Array.isArray(data38)){
var missing8;
if(((data38.min === undefined) && (missing8 = "min")) || ((data38.max === undefined) && (missing8 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/3/roll",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/roll/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
if(data38.min !== undefined){
var data39 = data38.min;
var _errs100 = errors;
if(!(typeof data39 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/3/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(56 !== data39){
validate438.errors = [{instancePath:instancePath+"/denizens/3/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 56},message:"must be equal to constant"}];
return false;
}
var valid28 = _errs100 === errors;
}
else {
var valid28 = true;
}
if(valid28){
if(data38.max !== undefined){
var data40 = data38.max;
var _errs102 = errors;
if(!(typeof data40 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/3/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(69 !== data40){
validate438.errors = [{instancePath:instancePath+"/denizens/3/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 69},message:"must be equal to constant"}];
return false;
}
var valid28 = _errs102 === errors;
}
else {
var valid28 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/3/roll",schemaPath:"#/properties/denizens/allOf/1/items/3/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid27 = _errs98 === errors;
}
else {
var valid27 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/3",schemaPath:"#/properties/denizens/allOf/1/items/3/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs93 === errors;
}
if(valid20){
if(len4 > 4){
var data41 = data19[4];
var _errs104 = errors;
if(errors === _errs104){
if(data41 && typeof data41 == "object" && !Array.isArray(data41)){
var missing9;
if(((data41.frequency === undefined) && (missing9 = "frequency")) || ((data41.roll === undefined) && (missing9 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/4",schemaPath:"#/properties/denizens/allOf/1/items/4/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
if(data41.frequency !== undefined){
var data42 = data41.frequency;
var _errs107 = errors;
if(typeof data42 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/4/frequency",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("uncommon" !== data42){
validate438.errors = [{instancePath:instancePath+"/denizens/4/frequency",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/frequency/const",keyword:"const",params:{allowedValue: "uncommon"},message:"must be equal to constant"}];
return false;
}
var valid29 = _errs107 === errors;
}
else {
var valid29 = true;
}
if(valid29){
if(data41.roll !== undefined){
var data43 = data41.roll;
var _errs109 = errors;
if(errors === _errs109){
if(data43 && typeof data43 == "object" && !Array.isArray(data43)){
var missing10;
if(((data43.min === undefined) && (missing10 = "min")) || ((data43.max === undefined) && (missing10 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/4/roll",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/roll/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
if(data43.min !== undefined){
var data44 = data43.min;
var _errs111 = errors;
if(!(typeof data44 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/4/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(70 !== data44){
validate438.errors = [{instancePath:instancePath+"/denizens/4/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 70},message:"must be equal to constant"}];
return false;
}
var valid30 = _errs111 === errors;
}
else {
var valid30 = true;
}
if(valid30){
if(data43.max !== undefined){
var data45 = data43.max;
var _errs113 = errors;
if(!(typeof data45 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/4/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(75 !== data45){
validate438.errors = [{instancePath:instancePath+"/denizens/4/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 75},message:"must be equal to constant"}];
return false;
}
var valid30 = _errs113 === errors;
}
else {
var valid30 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/4/roll",schemaPath:"#/properties/denizens/allOf/1/items/4/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid29 = _errs109 === errors;
}
else {
var valid29 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/4",schemaPath:"#/properties/denizens/allOf/1/items/4/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs104 === errors;
}
if(valid20){
if(len4 > 5){
var data46 = data19[5];
var _errs115 = errors;
if(errors === _errs115){
if(data46 && typeof data46 == "object" && !Array.isArray(data46)){
var missing11;
if(((data46.frequency === undefined) && (missing11 = "frequency")) || ((data46.roll === undefined) && (missing11 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/5",schemaPath:"#/properties/denizens/allOf/1/items/5/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
if(data46.frequency !== undefined){
var data47 = data46.frequency;
var _errs118 = errors;
if(typeof data47 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/5/frequency",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("uncommon" !== data47){
validate438.errors = [{instancePath:instancePath+"/denizens/5/frequency",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/frequency/const",keyword:"const",params:{allowedValue: "uncommon"},message:"must be equal to constant"}];
return false;
}
var valid31 = _errs118 === errors;
}
else {
var valid31 = true;
}
if(valid31){
if(data46.roll !== undefined){
var data48 = data46.roll;
var _errs120 = errors;
if(errors === _errs120){
if(data48 && typeof data48 == "object" && !Array.isArray(data48)){
var missing12;
if(((data48.min === undefined) && (missing12 = "min")) || ((data48.max === undefined) && (missing12 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/5/roll",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/roll/required",keyword:"required",params:{missingProperty: missing12},message:"must have required property '"+missing12+"'"}];
return false;
}
else {
if(data48.min !== undefined){
var data49 = data48.min;
var _errs122 = errors;
if(!(typeof data49 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/5/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(76 !== data49){
validate438.errors = [{instancePath:instancePath+"/denizens/5/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 76},message:"must be equal to constant"}];
return false;
}
var valid32 = _errs122 === errors;
}
else {
var valid32 = true;
}
if(valid32){
if(data48.max !== undefined){
var data50 = data48.max;
var _errs124 = errors;
if(!(typeof data50 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/5/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(81 !== data50){
validate438.errors = [{instancePath:instancePath+"/denizens/5/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 81},message:"must be equal to constant"}];
return false;
}
var valid32 = _errs124 === errors;
}
else {
var valid32 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/5/roll",schemaPath:"#/properties/denizens/allOf/1/items/5/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid31 = _errs120 === errors;
}
else {
var valid31 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/5",schemaPath:"#/properties/denizens/allOf/1/items/5/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs115 === errors;
}
if(valid20){
if(len4 > 6){
var data51 = data19[6];
var _errs126 = errors;
if(errors === _errs126){
if(data51 && typeof data51 == "object" && !Array.isArray(data51)){
var missing13;
if(((data51.frequency === undefined) && (missing13 = "frequency")) || ((data51.roll === undefined) && (missing13 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/6",schemaPath:"#/properties/denizens/allOf/1/items/6/required",keyword:"required",params:{missingProperty: missing13},message:"must have required property '"+missing13+"'"}];
return false;
}
else {
if(data51.frequency !== undefined){
var data52 = data51.frequency;
var _errs129 = errors;
if(typeof data52 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/6/frequency",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("uncommon" !== data52){
validate438.errors = [{instancePath:instancePath+"/denizens/6/frequency",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/frequency/const",keyword:"const",params:{allowedValue: "uncommon"},message:"must be equal to constant"}];
return false;
}
var valid33 = _errs129 === errors;
}
else {
var valid33 = true;
}
if(valid33){
if(data51.roll !== undefined){
var data53 = data51.roll;
var _errs131 = errors;
if(errors === _errs131){
if(data53 && typeof data53 == "object" && !Array.isArray(data53)){
var missing14;
if(((data53.min === undefined) && (missing14 = "min")) || ((data53.max === undefined) && (missing14 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/6/roll",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/roll/required",keyword:"required",params:{missingProperty: missing14},message:"must have required property '"+missing14+"'"}];
return false;
}
else {
if(data53.min !== undefined){
var data54 = data53.min;
var _errs133 = errors;
if(!(typeof data54 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/6/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(82 !== data54){
validate438.errors = [{instancePath:instancePath+"/denizens/6/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 82},message:"must be equal to constant"}];
return false;
}
var valid34 = _errs133 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data53.max !== undefined){
var data55 = data53.max;
var _errs135 = errors;
if(!(typeof data55 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/6/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(87 !== data55){
validate438.errors = [{instancePath:instancePath+"/denizens/6/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 87},message:"must be equal to constant"}];
return false;
}
var valid34 = _errs135 === errors;
}
else {
var valid34 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/6/roll",schemaPath:"#/properties/denizens/allOf/1/items/6/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid33 = _errs131 === errors;
}
else {
var valid33 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/6",schemaPath:"#/properties/denizens/allOf/1/items/6/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs126 === errors;
}
if(valid20){
if(len4 > 7){
var data56 = data19[7];
var _errs137 = errors;
if(errors === _errs137){
if(data56 && typeof data56 == "object" && !Array.isArray(data56)){
var missing15;
if(((data56.frequency === undefined) && (missing15 = "frequency")) || ((data56.roll === undefined) && (missing15 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/7",schemaPath:"#/properties/denizens/allOf/1/items/7/required",keyword:"required",params:{missingProperty: missing15},message:"must have required property '"+missing15+"'"}];
return false;
}
else {
if(data56.frequency !== undefined){
var data57 = data56.frequency;
var _errs140 = errors;
if(typeof data57 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/7/frequency",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("uncommon" !== data57){
validate438.errors = [{instancePath:instancePath+"/denizens/7/frequency",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/frequency/const",keyword:"const",params:{allowedValue: "uncommon"},message:"must be equal to constant"}];
return false;
}
var valid35 = _errs140 === errors;
}
else {
var valid35 = true;
}
if(valid35){
if(data56.roll !== undefined){
var data58 = data56.roll;
var _errs142 = errors;
if(errors === _errs142){
if(data58 && typeof data58 == "object" && !Array.isArray(data58)){
var missing16;
if(((data58.min === undefined) && (missing16 = "min")) || ((data58.max === undefined) && (missing16 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/7/roll",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/roll/required",keyword:"required",params:{missingProperty: missing16},message:"must have required property '"+missing16+"'"}];
return false;
}
else {
if(data58.min !== undefined){
var data59 = data58.min;
var _errs144 = errors;
if(!(typeof data59 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/7/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(88 !== data59){
validate438.errors = [{instancePath:instancePath+"/denizens/7/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 88},message:"must be equal to constant"}];
return false;
}
var valid36 = _errs144 === errors;
}
else {
var valid36 = true;
}
if(valid36){
if(data58.max !== undefined){
var data60 = data58.max;
var _errs146 = errors;
if(!(typeof data60 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/7/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(93 !== data60){
validate438.errors = [{instancePath:instancePath+"/denizens/7/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 93},message:"must be equal to constant"}];
return false;
}
var valid36 = _errs146 === errors;
}
else {
var valid36 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/7/roll",schemaPath:"#/properties/denizens/allOf/1/items/7/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid35 = _errs142 === errors;
}
else {
var valid35 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/7",schemaPath:"#/properties/denizens/allOf/1/items/7/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs137 === errors;
}
if(valid20){
if(len4 > 8){
var data61 = data19[8];
var _errs148 = errors;
if(errors === _errs148){
if(data61 && typeof data61 == "object" && !Array.isArray(data61)){
var missing17;
if(((data61.frequency === undefined) && (missing17 = "frequency")) || ((data61.roll === undefined) && (missing17 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/8",schemaPath:"#/properties/denizens/allOf/1/items/8/required",keyword:"required",params:{missingProperty: missing17},message:"must have required property '"+missing17+"'"}];
return false;
}
else {
if(data61.frequency !== undefined){
var data62 = data61.frequency;
var _errs151 = errors;
if(typeof data62 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/8/frequency",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("rare" !== data62){
validate438.errors = [{instancePath:instancePath+"/denizens/8/frequency",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/frequency/const",keyword:"const",params:{allowedValue: "rare"},message:"must be equal to constant"}];
return false;
}
var valid37 = _errs151 === errors;
}
else {
var valid37 = true;
}
if(valid37){
if(data61.roll !== undefined){
var data63 = data61.roll;
var _errs153 = errors;
if(errors === _errs153){
if(data63 && typeof data63 == "object" && !Array.isArray(data63)){
var missing18;
if(((data63.min === undefined) && (missing18 = "min")) || ((data63.max === undefined) && (missing18 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/8/roll",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/roll/required",keyword:"required",params:{missingProperty: missing18},message:"must have required property '"+missing18+"'"}];
return false;
}
else {
if(data63.min !== undefined){
var data64 = data63.min;
var _errs155 = errors;
if(!(typeof data64 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/8/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(94 !== data64){
validate438.errors = [{instancePath:instancePath+"/denizens/8/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 94},message:"must be equal to constant"}];
return false;
}
var valid38 = _errs155 === errors;
}
else {
var valid38 = true;
}
if(valid38){
if(data63.max !== undefined){
var data65 = data63.max;
var _errs157 = errors;
if(!(typeof data65 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/8/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(95 !== data65){
validate438.errors = [{instancePath:instancePath+"/denizens/8/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 95},message:"must be equal to constant"}];
return false;
}
var valid38 = _errs157 === errors;
}
else {
var valid38 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/8/roll",schemaPath:"#/properties/denizens/allOf/1/items/8/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid37 = _errs153 === errors;
}
else {
var valid37 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/8",schemaPath:"#/properties/denizens/allOf/1/items/8/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs148 === errors;
}
if(valid20){
if(len4 > 9){
var data66 = data19[9];
var _errs159 = errors;
if(errors === _errs159){
if(data66 && typeof data66 == "object" && !Array.isArray(data66)){
var missing19;
if(((data66.frequency === undefined) && (missing19 = "frequency")) || ((data66.roll === undefined) && (missing19 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/9",schemaPath:"#/properties/denizens/allOf/1/items/9/required",keyword:"required",params:{missingProperty: missing19},message:"must have required property '"+missing19+"'"}];
return false;
}
else {
if(data66.frequency !== undefined){
var data67 = data66.frequency;
var _errs162 = errors;
if(typeof data67 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/9/frequency",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("rare" !== data67){
validate438.errors = [{instancePath:instancePath+"/denizens/9/frequency",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/frequency/const",keyword:"const",params:{allowedValue: "rare"},message:"must be equal to constant"}];
return false;
}
var valid39 = _errs162 === errors;
}
else {
var valid39 = true;
}
if(valid39){
if(data66.roll !== undefined){
var data68 = data66.roll;
var _errs164 = errors;
if(errors === _errs164){
if(data68 && typeof data68 == "object" && !Array.isArray(data68)){
var missing20;
if(((data68.min === undefined) && (missing20 = "min")) || ((data68.max === undefined) && (missing20 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/9/roll",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/roll/required",keyword:"required",params:{missingProperty: missing20},message:"must have required property '"+missing20+"'"}];
return false;
}
else {
if(data68.min !== undefined){
var data69 = data68.min;
var _errs166 = errors;
if(!(typeof data69 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/9/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(96 !== data69){
validate438.errors = [{instancePath:instancePath+"/denizens/9/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 96},message:"must be equal to constant"}];
return false;
}
var valid40 = _errs166 === errors;
}
else {
var valid40 = true;
}
if(valid40){
if(data68.max !== undefined){
var data70 = data68.max;
var _errs168 = errors;
if(!(typeof data70 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/9/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(97 !== data70){
validate438.errors = [{instancePath:instancePath+"/denizens/9/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 97},message:"must be equal to constant"}];
return false;
}
var valid40 = _errs168 === errors;
}
else {
var valid40 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/9/roll",schemaPath:"#/properties/denizens/allOf/1/items/9/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid39 = _errs164 === errors;
}
else {
var valid39 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/9",schemaPath:"#/properties/denizens/allOf/1/items/9/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs159 === errors;
}
if(valid20){
if(len4 > 10){
var data71 = data19[10];
var _errs170 = errors;
if(errors === _errs170){
if(data71 && typeof data71 == "object" && !Array.isArray(data71)){
var missing21;
if(((data71.frequency === undefined) && (missing21 = "frequency")) || ((data71.roll === undefined) && (missing21 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/10",schemaPath:"#/properties/denizens/allOf/1/items/10/required",keyword:"required",params:{missingProperty: missing21},message:"must have required property '"+missing21+"'"}];
return false;
}
else {
if(data71.frequency !== undefined){
var data72 = data71.frequency;
var _errs173 = errors;
if(typeof data72 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/10/frequency",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("rare" !== data72){
validate438.errors = [{instancePath:instancePath+"/denizens/10/frequency",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/frequency/const",keyword:"const",params:{allowedValue: "rare"},message:"must be equal to constant"}];
return false;
}
var valid41 = _errs173 === errors;
}
else {
var valid41 = true;
}
if(valid41){
if(data71.roll !== undefined){
var data73 = data71.roll;
var _errs175 = errors;
if(errors === _errs175){
if(data73 && typeof data73 == "object" && !Array.isArray(data73)){
var missing22;
if(((data73.min === undefined) && (missing22 = "min")) || ((data73.max === undefined) && (missing22 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/10/roll",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/roll/required",keyword:"required",params:{missingProperty: missing22},message:"must have required property '"+missing22+"'"}];
return false;
}
else {
if(data73.min !== undefined){
var data74 = data73.min;
var _errs177 = errors;
if(!(typeof data74 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/10/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(98 !== data74){
validate438.errors = [{instancePath:instancePath+"/denizens/10/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 98},message:"must be equal to constant"}];
return false;
}
var valid42 = _errs177 === errors;
}
else {
var valid42 = true;
}
if(valid42){
if(data73.max !== undefined){
var data75 = data73.max;
var _errs179 = errors;
if(!(typeof data75 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/10/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(99 !== data75){
validate438.errors = [{instancePath:instancePath+"/denizens/10/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 99},message:"must be equal to constant"}];
return false;
}
var valid42 = _errs179 === errors;
}
else {
var valid42 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/10/roll",schemaPath:"#/properties/denizens/allOf/1/items/10/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid41 = _errs175 === errors;
}
else {
var valid41 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/10",schemaPath:"#/properties/denizens/allOf/1/items/10/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs170 === errors;
}
if(valid20){
if(len4 > 11){
var data76 = data19[11];
var _errs181 = errors;
if(errors === _errs181){
if(data76 && typeof data76 == "object" && !Array.isArray(data76)){
var missing23;
if(((data76.frequency === undefined) && (missing23 = "frequency")) || ((data76.roll === undefined) && (missing23 = "roll"))){
validate438.errors = [{instancePath:instancePath+"/denizens/11",schemaPath:"#/properties/denizens/allOf/1/items/11/required",keyword:"required",params:{missingProperty: missing23},message:"must have required property '"+missing23+"'"}];
return false;
}
else {
if(data76.frequency !== undefined){
var data77 = data76.frequency;
var _errs184 = errors;
if(typeof data77 !== "string"){
validate438.errors = [{instancePath:instancePath+"/denizens/11/frequency",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/frequency/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("unforeseen" !== data77){
validate438.errors = [{instancePath:instancePath+"/denizens/11/frequency",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/frequency/const",keyword:"const",params:{allowedValue: "unforeseen"},message:"must be equal to constant"}];
return false;
}
var valid43 = _errs184 === errors;
}
else {
var valid43 = true;
}
if(valid43){
if(data76.roll !== undefined){
var data78 = data76.roll;
var _errs186 = errors;
if(errors === _errs186){
if(data78 && typeof data78 == "object" && !Array.isArray(data78)){
var missing24;
if(((data78.min === undefined) && (missing24 = "min")) || ((data78.max === undefined) && (missing24 = "max"))){
validate438.errors = [{instancePath:instancePath+"/denizens/11/roll",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/roll/required",keyword:"required",params:{missingProperty: missing24},message:"must have required property '"+missing24+"'"}];
return false;
}
else {
if(data78.min !== undefined){
var data79 = data78.min;
var _errs188 = errors;
if(!(typeof data79 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/11/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(100 !== data79){
validate438.errors = [{instancePath:instancePath+"/denizens/11/roll/min",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 100},message:"must be equal to constant"}];
return false;
}
var valid44 = _errs188 === errors;
}
else {
var valid44 = true;
}
if(valid44){
if(data78.max !== undefined){
var data80 = data78.max;
var _errs190 = errors;
if(!(typeof data80 == "number")){
validate438.errors = [{instancePath:instancePath+"/denizens/11/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(100 !== data80){
validate438.errors = [{instancePath:instancePath+"/denizens/11/roll/max",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 100},message:"must be equal to constant"}];
return false;
}
var valid44 = _errs190 === errors;
}
else {
var valid44 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/11/roll",schemaPath:"#/properties/denizens/allOf/1/items/11/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid43 = _errs186 === errors;
}
else {
var valid43 = true;
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens/11",schemaPath:"#/properties/denizens/allOf/1/items/11/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid20 = _errs181 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath+"/denizens",schemaPath:"#/properties/denizens/allOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid18 = _errs58 === errors;
}
var valid0 = _errs54 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs192 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs192 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate438.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate438.errors = vErrors;
return errors === 0;
}

var schema691 = {"title":"DelveSiteDomain","type":"object","description":"A delve site Domain card.","required":["_id","type","name","features","dangers","_source"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDomainId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"delve_site_domain"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/DelveSiteDomainIdWildcard"}},"name_oracle":{"$ref":"#/definitions/OracleRollableId","description":"An oracle table ID containing place name elements. For examples, see oracle ID `oracle_rollable:delve/site_name/place/barrow`, and its siblings in oracle collection ID `oracle_collection:delve/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (`oracle_rollable:delve/site_name/format`) to create random names for delve sites."},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"features":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteDomainFeature"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":21},"max":{"type":"number","const":43}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":44},"max":{"type":"number","const":56}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":57},"max":{"type":"number","const":64}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":65},"max":{"type":"number","const":68}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":69},"max":{"type":"number","const":72}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":73},"max":{"type":"number","const":76}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":77},"max":{"type":"number","const":80}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":81},"max":{"type":"number","const":84}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":85},"max":{"type":"number","const":88}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":89},"max":{"type":"number","const":98}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":99},"max":{"type":"number","const":99}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":100},"max":{"type":"number","const":100}}}},"additionalProperties":{}}],"minItems":12,"maxItems":12,"additionalItems":{}}]},"dangers":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteDomainDanger"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":31},"max":{"type":"number","const":33}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":34},"max":{"type":"number","const":36}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":37},"max":{"type":"number","const":39}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":40},"max":{"type":"number","const":42}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":43},"max":{"type":"number","const":45}}}},"additionalProperties":{}}],"minItems":5,"maxItems":5,"additionalItems":{}}]},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema700 = {"title":"DelveSiteDomainFeature","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDomainFeatureId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}};
var schema701 = {"title":"DelveSiteDomainFeatureId","type":"string","description":"A unique ID representing a DelveSiteDomainFeature object.","pattern":"^delve_site_domain\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"};
var pattern322 = new RegExp("^delve_site_domain\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$", "u");

function validate446(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll === undefined){
data.roll = null;
}
var missing0;
if((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.text === undefined) && (missing0 = "text"))){
validate446.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern322.test(data0)){
validate446.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDomainFeatureId/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},message:"must match pattern \""+"^delve_site_domain\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"+"\""}];
return false;
}
}
else {
validate446.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDomainFeatureId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data1 = data.icon;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(typeof data1 === "string"){
if(!pattern15.test(data1)){
validate446.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate446.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.roll;
var _errs7 = errors;
var _errs8 = errors;
var valid3 = false;
var _errs9 = errors;
var _errs10 = errors;
if(errors === _errs10){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var missing1;
if(((data2.min === undefined) && (missing1 = "min")) || ((data2.max === undefined) && (missing1 = "max"))){
var err0 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data2.min !== undefined){
var data3 = data2.min;
var _errs12 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
var err1 = {instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid5 = _errs12 === errors;
}
else {
var valid5 = true;
}
if(valid5){
if(data2.max !== undefined){
var data4 = data2.max;
var _errs14 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err2 = {instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid5 = _errs14 === errors;
}
else {
var valid5 = true;
}
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs9 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs16 = errors;
if(data2 !== null){
var err4 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs16 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err5 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate446.errors = vErrors;
return false;
}
else {
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs7 === errors;
if(valid0){
if(data.text !== undefined){
var _errs18 = errors;
var _errs19 = errors;
if(errors === _errs19){
if(errors === _errs19){
if(!(typeof data.text === "string")){
validate446.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var _errs21 = errors;
if(!(validate74(data.template, {instancePath:instancePath+"/template",parentData:data,parentDataProperty:"template",rootData:rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.embed_table !== undefined){
var data7 = data.embed_table;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(typeof data7 === "string"){
if(!pattern18.test(data7)){
validate446.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate446.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs25 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data9 = data.oracle_rolls;
var _errs26 = errors;
if(errors === _errs26){
if(Array.isArray(data9)){
var valid8 = true;
var len0 = data9.length;
for(var i0=0; i0<len0; i0++){
var _errs28 = errors;
if(!(validate77(data9[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data9,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid8 = _errs28 === errors;
if(!valid8){
break;
}
}
}
else {
validate446.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs29 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs29 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._i18n !== undefined){
var _errs30 = errors;
if(!(validate80(data._i18n, {instancePath:instancePath+"/_i18n",parentData:data,parentDataProperty:"_i18n",rootData:rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate446.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate446.errors = vErrors;
return errors === 0;
}

var schema706 = {"title":"DelveSiteDomainDanger","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteDomainDangerId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}};
var schema707 = {"title":"DelveSiteDomainDangerId","type":"string","description":"A unique ID representing a DelveSiteDomainDanger object.","pattern":"^delve_site_domain\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"};
var pattern325 = new RegExp("^delve_site_domain\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$", "u");

function validate453(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll === undefined){
data.roll = null;
}
var missing0;
if((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.text === undefined) && (missing0 = "text"))){
validate453.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern325.test(data0)){
validate453.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDomainDangerId/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},message:"must match pattern \""+"^delve_site_domain\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"+"\""}];
return false;
}
}
else {
validate453.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDomainDangerId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data1 = data.icon;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(typeof data1 === "string"){
if(!pattern15.test(data1)){
validate453.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate453.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.roll;
var _errs7 = errors;
var _errs8 = errors;
var valid3 = false;
var _errs9 = errors;
var _errs10 = errors;
if(errors === _errs10){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var missing1;
if(((data2.min === undefined) && (missing1 = "min")) || ((data2.max === undefined) && (missing1 = "max"))){
var err0 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data2.min !== undefined){
var data3 = data2.min;
var _errs12 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
var err1 = {instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid5 = _errs12 === errors;
}
else {
var valid5 = true;
}
if(valid5){
if(data2.max !== undefined){
var data4 = data2.max;
var _errs14 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err2 = {instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid5 = _errs14 === errors;
}
else {
var valid5 = true;
}
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs9 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs16 = errors;
if(data2 !== null){
var err4 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs16 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err5 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate453.errors = vErrors;
return false;
}
else {
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs7 === errors;
if(valid0){
if(data.text !== undefined){
var _errs18 = errors;
var _errs19 = errors;
if(errors === _errs19){
if(errors === _errs19){
if(!(typeof data.text === "string")){
validate453.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var _errs21 = errors;
if(!(validate74(data.template, {instancePath:instancePath+"/template",parentData:data,parentDataProperty:"template",rootData:rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.embed_table !== undefined){
var data7 = data.embed_table;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(typeof data7 === "string"){
if(!pattern18.test(data7)){
validate453.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate453.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs25 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data9 = data.oracle_rolls;
var _errs26 = errors;
if(errors === _errs26){
if(Array.isArray(data9)){
var valid8 = true;
var len0 = data9.length;
for(var i0=0; i0<len0; i0++){
var _errs28 = errors;
if(!(validate77(data9[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data9,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid8 = _errs28 === errors;
if(!valid8){
break;
}
}
}
else {
validate453.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs29 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs29 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._i18n !== undefined){
var _errs30 = errors;
if(!(validate80(data._i18n, {instancePath:instancePath+"/_i18n",parentData:data,parentDataProperty:"_i18n",rootData:rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate453.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate453.errors = vErrors;
return errors === 0;
}


function validate445(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.features === undefined) && (missing0 = "features"))) || ((data.dangers === undefined) && (missing0 = "dangers"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate445.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern69.test(data0)){
validate445.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDomainId/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_domain:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""}];
return false;
}
}
else {
validate445.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteDomainId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate445.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("delve_site_domain" !== data1){
validate445.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "delve_site_domain"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate445.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate445.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern45.test(data5)){
validate445.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/DelveSiteDomainIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site_domain:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""}];
return false;
}
}
else {
validate445.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/DelveSiteDomainIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name_oracle !== undefined){
var data6 = data.name_oracle;
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(typeof data6 === "string"){
if(!pattern18.test(data6)){
validate445.errors = [{instancePath:instancePath+"/name_oracle",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate445.errors = [{instancePath:instancePath+"/name_oracle",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs20 = errors;
if(typeof data.color !== "string"){
validate445.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data8 = data.icon;
var _errs23 = errors;
var _errs24 = errors;
if(errors === _errs24){
if(errors === _errs24){
if(typeof data8 === "string"){
if(!pattern15.test(data8)){
validate445.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate445.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data9 = data.images;
var _errs26 = errors;
if(errors === _errs26){
if(Array.isArray(data9)){
var valid9 = true;
var len1 = data9.length;
for(var i1=0; i1<len1; i1++){
var data10 = data9[i1];
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(errors === _errs29){
if(typeof data10 === "string"){
if(!pattern16.test(data10)){
validate445.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate445.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid9 = _errs28 === errors;
if(!valid9){
break;
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.features !== undefined){
var data11 = data.features;
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(Array.isArray(data11)){
var valid12 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var _errs34 = errors;
if(!(validate446(data11[i2], {instancePath:instancePath+"/features/" + i2,parentData:data11,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate446.errors : vErrors.concat(validate446.errors);
errors = vErrors.length;
}
var valid12 = _errs34 === errors;
if(!valid12){
break;
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid11 = _errs32 === errors;
if(valid11){
var _errs35 = errors;
if(errors === _errs35){
if(Array.isArray(data11)){
if(data11.length > 12){
validate445.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/1/maxItems",keyword:"maxItems",params:{limit: 12},message:"must NOT have more than 12 items"}];
return false;
}
else {
if(data11.length < 12){
validate445.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/1/minItems",keyword:"minItems",params:{limit: 12},message:"must NOT have fewer than 12 items"}];
return false;
}
else {
var len4 = data11.length;
if(len4 > 0){
var data13 = data11[0];
var _errs37 = errors;
if(errors === _errs37){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
var missing1;
if((data13.roll === undefined) && (missing1 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/0",schemaPath:"#/properties/features/allOf/1/items/0/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data13.roll !== undefined){
var data14 = data13.roll;
var _errs40 = errors;
if(errors === _errs40){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var missing2;
if(((data14.min === undefined) && (missing2 = "min")) || ((data14.max === undefined) && (missing2 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/0/roll",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data14.min !== undefined){
var data15 = data14.min;
var _errs42 = errors;
if(!(typeof data15 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/0/roll/min",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(21 !== data15){
validate445.errors = [{instancePath:instancePath+"/features/0/roll/min",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 21},message:"must be equal to constant"}];
return false;
}
var valid15 = _errs42 === errors;
}
else {
var valid15 = true;
}
if(valid15){
if(data14.max !== undefined){
var data16 = data14.max;
var _errs44 = errors;
if(!(typeof data16 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/0/roll/max",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(43 !== data16){
validate445.errors = [{instancePath:instancePath+"/features/0/roll/max",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 43},message:"must be equal to constant"}];
return false;
}
var valid15 = _errs44 === errors;
}
else {
var valid15 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/0/roll",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/0",schemaPath:"#/properties/features/allOf/1/items/0/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs37 === errors;
}
if(valid13){
if(len4 > 1){
var data17 = data11[1];
var _errs46 = errors;
if(errors === _errs46){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
var missing3;
if((data17.roll === undefined) && (missing3 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/1",schemaPath:"#/properties/features/allOf/1/items/1/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
if(data17.roll !== undefined){
var data18 = data17.roll;
var _errs49 = errors;
if(errors === _errs49){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
var missing4;
if(((data18.min === undefined) && (missing4 = "min")) || ((data18.max === undefined) && (missing4 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/1/roll",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
if(data18.min !== undefined){
var data19 = data18.min;
var _errs51 = errors;
if(!(typeof data19 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/1/roll/min",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(44 !== data19){
validate445.errors = [{instancePath:instancePath+"/features/1/roll/min",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 44},message:"must be equal to constant"}];
return false;
}
var valid17 = _errs51 === errors;
}
else {
var valid17 = true;
}
if(valid17){
if(data18.max !== undefined){
var data20 = data18.max;
var _errs53 = errors;
if(!(typeof data20 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/1/roll/max",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(56 !== data20){
validate445.errors = [{instancePath:instancePath+"/features/1/roll/max",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 56},message:"must be equal to constant"}];
return false;
}
var valid17 = _errs53 === errors;
}
else {
var valid17 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/1/roll",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/1",schemaPath:"#/properties/features/allOf/1/items/1/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs46 === errors;
}
if(valid13){
if(len4 > 2){
var data21 = data11[2];
var _errs55 = errors;
if(errors === _errs55){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
var missing5;
if((data21.roll === undefined) && (missing5 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/2",schemaPath:"#/properties/features/allOf/1/items/2/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
if(data21.roll !== undefined){
var data22 = data21.roll;
var _errs58 = errors;
if(errors === _errs58){
if(data22 && typeof data22 == "object" && !Array.isArray(data22)){
var missing6;
if(((data22.min === undefined) && (missing6 = "min")) || ((data22.max === undefined) && (missing6 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/2/roll",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
if(data22.min !== undefined){
var data23 = data22.min;
var _errs60 = errors;
if(!(typeof data23 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/2/roll/min",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(57 !== data23){
validate445.errors = [{instancePath:instancePath+"/features/2/roll/min",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 57},message:"must be equal to constant"}];
return false;
}
var valid19 = _errs60 === errors;
}
else {
var valid19 = true;
}
if(valid19){
if(data22.max !== undefined){
var data24 = data22.max;
var _errs62 = errors;
if(!(typeof data24 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/2/roll/max",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(64 !== data24){
validate445.errors = [{instancePath:instancePath+"/features/2/roll/max",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 64},message:"must be equal to constant"}];
return false;
}
var valid19 = _errs62 === errors;
}
else {
var valid19 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/2/roll",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/2",schemaPath:"#/properties/features/allOf/1/items/2/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs55 === errors;
}
if(valid13){
if(len4 > 3){
var data25 = data11[3];
var _errs64 = errors;
if(errors === _errs64){
if(data25 && typeof data25 == "object" && !Array.isArray(data25)){
var missing7;
if((data25.roll === undefined) && (missing7 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/3",schemaPath:"#/properties/features/allOf/1/items/3/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
if(data25.roll !== undefined){
var data26 = data25.roll;
var _errs67 = errors;
if(errors === _errs67){
if(data26 && typeof data26 == "object" && !Array.isArray(data26)){
var missing8;
if(((data26.min === undefined) && (missing8 = "min")) || ((data26.max === undefined) && (missing8 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/3/roll",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
if(data26.min !== undefined){
var data27 = data26.min;
var _errs69 = errors;
if(!(typeof data27 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/3/roll/min",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(65 !== data27){
validate445.errors = [{instancePath:instancePath+"/features/3/roll/min",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 65},message:"must be equal to constant"}];
return false;
}
var valid21 = _errs69 === errors;
}
else {
var valid21 = true;
}
if(valid21){
if(data26.max !== undefined){
var data28 = data26.max;
var _errs71 = errors;
if(!(typeof data28 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/3/roll/max",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(68 !== data28){
validate445.errors = [{instancePath:instancePath+"/features/3/roll/max",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 68},message:"must be equal to constant"}];
return false;
}
var valid21 = _errs71 === errors;
}
else {
var valid21 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/3/roll",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/3",schemaPath:"#/properties/features/allOf/1/items/3/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs64 === errors;
}
if(valid13){
if(len4 > 4){
var data29 = data11[4];
var _errs73 = errors;
if(errors === _errs73){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
var missing9;
if((data29.roll === undefined) && (missing9 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/4",schemaPath:"#/properties/features/allOf/1/items/4/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
if(data29.roll !== undefined){
var data30 = data29.roll;
var _errs76 = errors;
if(errors === _errs76){
if(data30 && typeof data30 == "object" && !Array.isArray(data30)){
var missing10;
if(((data30.min === undefined) && (missing10 = "min")) || ((data30.max === undefined) && (missing10 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/4/roll",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
if(data30.min !== undefined){
var data31 = data30.min;
var _errs78 = errors;
if(!(typeof data31 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/4/roll/min",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(69 !== data31){
validate445.errors = [{instancePath:instancePath+"/features/4/roll/min",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 69},message:"must be equal to constant"}];
return false;
}
var valid23 = _errs78 === errors;
}
else {
var valid23 = true;
}
if(valid23){
if(data30.max !== undefined){
var data32 = data30.max;
var _errs80 = errors;
if(!(typeof data32 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/4/roll/max",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(72 !== data32){
validate445.errors = [{instancePath:instancePath+"/features/4/roll/max",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 72},message:"must be equal to constant"}];
return false;
}
var valid23 = _errs80 === errors;
}
else {
var valid23 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/4/roll",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/4",schemaPath:"#/properties/features/allOf/1/items/4/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs73 === errors;
}
if(valid13){
if(len4 > 5){
var data33 = data11[5];
var _errs82 = errors;
if(errors === _errs82){
if(data33 && typeof data33 == "object" && !Array.isArray(data33)){
var missing11;
if((data33.roll === undefined) && (missing11 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/5",schemaPath:"#/properties/features/allOf/1/items/5/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
if(data33.roll !== undefined){
var data34 = data33.roll;
var _errs85 = errors;
if(errors === _errs85){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
var missing12;
if(((data34.min === undefined) && (missing12 = "min")) || ((data34.max === undefined) && (missing12 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/5/roll",schemaPath:"#/properties/features/allOf/1/items/5/properties/roll/required",keyword:"required",params:{missingProperty: missing12},message:"must have required property '"+missing12+"'"}];
return false;
}
else {
if(data34.min !== undefined){
var data35 = data34.min;
var _errs87 = errors;
if(!(typeof data35 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/5/roll/min",schemaPath:"#/properties/features/allOf/1/items/5/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(73 !== data35){
validate445.errors = [{instancePath:instancePath+"/features/5/roll/min",schemaPath:"#/properties/features/allOf/1/items/5/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 73},message:"must be equal to constant"}];
return false;
}
var valid25 = _errs87 === errors;
}
else {
var valid25 = true;
}
if(valid25){
if(data34.max !== undefined){
var data36 = data34.max;
var _errs89 = errors;
if(!(typeof data36 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/5/roll/max",schemaPath:"#/properties/features/allOf/1/items/5/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(76 !== data36){
validate445.errors = [{instancePath:instancePath+"/features/5/roll/max",schemaPath:"#/properties/features/allOf/1/items/5/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 76},message:"must be equal to constant"}];
return false;
}
var valid25 = _errs89 === errors;
}
else {
var valid25 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/5/roll",schemaPath:"#/properties/features/allOf/1/items/5/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/5",schemaPath:"#/properties/features/allOf/1/items/5/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs82 === errors;
}
if(valid13){
if(len4 > 6){
var data37 = data11[6];
var _errs91 = errors;
if(errors === _errs91){
if(data37 && typeof data37 == "object" && !Array.isArray(data37)){
var missing13;
if((data37.roll === undefined) && (missing13 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/6",schemaPath:"#/properties/features/allOf/1/items/6/required",keyword:"required",params:{missingProperty: missing13},message:"must have required property '"+missing13+"'"}];
return false;
}
else {
if(data37.roll !== undefined){
var data38 = data37.roll;
var _errs94 = errors;
if(errors === _errs94){
if(data38 && typeof data38 == "object" && !Array.isArray(data38)){
var missing14;
if(((data38.min === undefined) && (missing14 = "min")) || ((data38.max === undefined) && (missing14 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/6/roll",schemaPath:"#/properties/features/allOf/1/items/6/properties/roll/required",keyword:"required",params:{missingProperty: missing14},message:"must have required property '"+missing14+"'"}];
return false;
}
else {
if(data38.min !== undefined){
var data39 = data38.min;
var _errs96 = errors;
if(!(typeof data39 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/6/roll/min",schemaPath:"#/properties/features/allOf/1/items/6/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(77 !== data39){
validate445.errors = [{instancePath:instancePath+"/features/6/roll/min",schemaPath:"#/properties/features/allOf/1/items/6/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 77},message:"must be equal to constant"}];
return false;
}
var valid27 = _errs96 === errors;
}
else {
var valid27 = true;
}
if(valid27){
if(data38.max !== undefined){
var data40 = data38.max;
var _errs98 = errors;
if(!(typeof data40 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/6/roll/max",schemaPath:"#/properties/features/allOf/1/items/6/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(80 !== data40){
validate445.errors = [{instancePath:instancePath+"/features/6/roll/max",schemaPath:"#/properties/features/allOf/1/items/6/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 80},message:"must be equal to constant"}];
return false;
}
var valid27 = _errs98 === errors;
}
else {
var valid27 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/6/roll",schemaPath:"#/properties/features/allOf/1/items/6/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/6",schemaPath:"#/properties/features/allOf/1/items/6/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs91 === errors;
}
if(valid13){
if(len4 > 7){
var data41 = data11[7];
var _errs100 = errors;
if(errors === _errs100){
if(data41 && typeof data41 == "object" && !Array.isArray(data41)){
var missing15;
if((data41.roll === undefined) && (missing15 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/7",schemaPath:"#/properties/features/allOf/1/items/7/required",keyword:"required",params:{missingProperty: missing15},message:"must have required property '"+missing15+"'"}];
return false;
}
else {
if(data41.roll !== undefined){
var data42 = data41.roll;
var _errs103 = errors;
if(errors === _errs103){
if(data42 && typeof data42 == "object" && !Array.isArray(data42)){
var missing16;
if(((data42.min === undefined) && (missing16 = "min")) || ((data42.max === undefined) && (missing16 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/7/roll",schemaPath:"#/properties/features/allOf/1/items/7/properties/roll/required",keyword:"required",params:{missingProperty: missing16},message:"must have required property '"+missing16+"'"}];
return false;
}
else {
if(data42.min !== undefined){
var data43 = data42.min;
var _errs105 = errors;
if(!(typeof data43 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/7/roll/min",schemaPath:"#/properties/features/allOf/1/items/7/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(81 !== data43){
validate445.errors = [{instancePath:instancePath+"/features/7/roll/min",schemaPath:"#/properties/features/allOf/1/items/7/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 81},message:"must be equal to constant"}];
return false;
}
var valid29 = _errs105 === errors;
}
else {
var valid29 = true;
}
if(valid29){
if(data42.max !== undefined){
var data44 = data42.max;
var _errs107 = errors;
if(!(typeof data44 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/7/roll/max",schemaPath:"#/properties/features/allOf/1/items/7/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(84 !== data44){
validate445.errors = [{instancePath:instancePath+"/features/7/roll/max",schemaPath:"#/properties/features/allOf/1/items/7/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 84},message:"must be equal to constant"}];
return false;
}
var valid29 = _errs107 === errors;
}
else {
var valid29 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/7/roll",schemaPath:"#/properties/features/allOf/1/items/7/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/7",schemaPath:"#/properties/features/allOf/1/items/7/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs100 === errors;
}
if(valid13){
if(len4 > 8){
var data45 = data11[8];
var _errs109 = errors;
if(errors === _errs109){
if(data45 && typeof data45 == "object" && !Array.isArray(data45)){
var missing17;
if((data45.roll === undefined) && (missing17 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/8",schemaPath:"#/properties/features/allOf/1/items/8/required",keyword:"required",params:{missingProperty: missing17},message:"must have required property '"+missing17+"'"}];
return false;
}
else {
if(data45.roll !== undefined){
var data46 = data45.roll;
var _errs112 = errors;
if(errors === _errs112){
if(data46 && typeof data46 == "object" && !Array.isArray(data46)){
var missing18;
if(((data46.min === undefined) && (missing18 = "min")) || ((data46.max === undefined) && (missing18 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/8/roll",schemaPath:"#/properties/features/allOf/1/items/8/properties/roll/required",keyword:"required",params:{missingProperty: missing18},message:"must have required property '"+missing18+"'"}];
return false;
}
else {
if(data46.min !== undefined){
var data47 = data46.min;
var _errs114 = errors;
if(!(typeof data47 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/8/roll/min",schemaPath:"#/properties/features/allOf/1/items/8/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(85 !== data47){
validate445.errors = [{instancePath:instancePath+"/features/8/roll/min",schemaPath:"#/properties/features/allOf/1/items/8/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 85},message:"must be equal to constant"}];
return false;
}
var valid31 = _errs114 === errors;
}
else {
var valid31 = true;
}
if(valid31){
if(data46.max !== undefined){
var data48 = data46.max;
var _errs116 = errors;
if(!(typeof data48 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/8/roll/max",schemaPath:"#/properties/features/allOf/1/items/8/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(88 !== data48){
validate445.errors = [{instancePath:instancePath+"/features/8/roll/max",schemaPath:"#/properties/features/allOf/1/items/8/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 88},message:"must be equal to constant"}];
return false;
}
var valid31 = _errs116 === errors;
}
else {
var valid31 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/8/roll",schemaPath:"#/properties/features/allOf/1/items/8/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/8",schemaPath:"#/properties/features/allOf/1/items/8/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs109 === errors;
}
if(valid13){
if(len4 > 9){
var data49 = data11[9];
var _errs118 = errors;
if(errors === _errs118){
if(data49 && typeof data49 == "object" && !Array.isArray(data49)){
var missing19;
if((data49.roll === undefined) && (missing19 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/9",schemaPath:"#/properties/features/allOf/1/items/9/required",keyword:"required",params:{missingProperty: missing19},message:"must have required property '"+missing19+"'"}];
return false;
}
else {
if(data49.roll !== undefined){
var data50 = data49.roll;
var _errs121 = errors;
if(errors === _errs121){
if(data50 && typeof data50 == "object" && !Array.isArray(data50)){
var missing20;
if(((data50.min === undefined) && (missing20 = "min")) || ((data50.max === undefined) && (missing20 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/9/roll",schemaPath:"#/properties/features/allOf/1/items/9/properties/roll/required",keyword:"required",params:{missingProperty: missing20},message:"must have required property '"+missing20+"'"}];
return false;
}
else {
if(data50.min !== undefined){
var data51 = data50.min;
var _errs123 = errors;
if(!(typeof data51 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/9/roll/min",schemaPath:"#/properties/features/allOf/1/items/9/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(89 !== data51){
validate445.errors = [{instancePath:instancePath+"/features/9/roll/min",schemaPath:"#/properties/features/allOf/1/items/9/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 89},message:"must be equal to constant"}];
return false;
}
var valid33 = _errs123 === errors;
}
else {
var valid33 = true;
}
if(valid33){
if(data50.max !== undefined){
var data52 = data50.max;
var _errs125 = errors;
if(!(typeof data52 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/9/roll/max",schemaPath:"#/properties/features/allOf/1/items/9/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(98 !== data52){
validate445.errors = [{instancePath:instancePath+"/features/9/roll/max",schemaPath:"#/properties/features/allOf/1/items/9/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 98},message:"must be equal to constant"}];
return false;
}
var valid33 = _errs125 === errors;
}
else {
var valid33 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/9/roll",schemaPath:"#/properties/features/allOf/1/items/9/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/9",schemaPath:"#/properties/features/allOf/1/items/9/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs118 === errors;
}
if(valid13){
if(len4 > 10){
var data53 = data11[10];
var _errs127 = errors;
if(errors === _errs127){
if(data53 && typeof data53 == "object" && !Array.isArray(data53)){
var missing21;
if((data53.roll === undefined) && (missing21 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/10",schemaPath:"#/properties/features/allOf/1/items/10/required",keyword:"required",params:{missingProperty: missing21},message:"must have required property '"+missing21+"'"}];
return false;
}
else {
if(data53.roll !== undefined){
var data54 = data53.roll;
var _errs130 = errors;
if(errors === _errs130){
if(data54 && typeof data54 == "object" && !Array.isArray(data54)){
var missing22;
if(((data54.min === undefined) && (missing22 = "min")) || ((data54.max === undefined) && (missing22 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/10/roll",schemaPath:"#/properties/features/allOf/1/items/10/properties/roll/required",keyword:"required",params:{missingProperty: missing22},message:"must have required property '"+missing22+"'"}];
return false;
}
else {
if(data54.min !== undefined){
var data55 = data54.min;
var _errs132 = errors;
if(!(typeof data55 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/10/roll/min",schemaPath:"#/properties/features/allOf/1/items/10/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(99 !== data55){
validate445.errors = [{instancePath:instancePath+"/features/10/roll/min",schemaPath:"#/properties/features/allOf/1/items/10/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 99},message:"must be equal to constant"}];
return false;
}
var valid35 = _errs132 === errors;
}
else {
var valid35 = true;
}
if(valid35){
if(data54.max !== undefined){
var data56 = data54.max;
var _errs134 = errors;
if(!(typeof data56 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/10/roll/max",schemaPath:"#/properties/features/allOf/1/items/10/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(99 !== data56){
validate445.errors = [{instancePath:instancePath+"/features/10/roll/max",schemaPath:"#/properties/features/allOf/1/items/10/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 99},message:"must be equal to constant"}];
return false;
}
var valid35 = _errs134 === errors;
}
else {
var valid35 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/10/roll",schemaPath:"#/properties/features/allOf/1/items/10/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/10",schemaPath:"#/properties/features/allOf/1/items/10/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs127 === errors;
}
if(valid13){
if(len4 > 11){
var data57 = data11[11];
var _errs136 = errors;
if(errors === _errs136){
if(data57 && typeof data57 == "object" && !Array.isArray(data57)){
var missing23;
if((data57.roll === undefined) && (missing23 = "roll")){
validate445.errors = [{instancePath:instancePath+"/features/11",schemaPath:"#/properties/features/allOf/1/items/11/required",keyword:"required",params:{missingProperty: missing23},message:"must have required property '"+missing23+"'"}];
return false;
}
else {
if(data57.roll !== undefined){
var data58 = data57.roll;
var _errs139 = errors;
if(errors === _errs139){
if(data58 && typeof data58 == "object" && !Array.isArray(data58)){
var missing24;
if(((data58.min === undefined) && (missing24 = "min")) || ((data58.max === undefined) && (missing24 = "max"))){
validate445.errors = [{instancePath:instancePath+"/features/11/roll",schemaPath:"#/properties/features/allOf/1/items/11/properties/roll/required",keyword:"required",params:{missingProperty: missing24},message:"must have required property '"+missing24+"'"}];
return false;
}
else {
if(data58.min !== undefined){
var data59 = data58.min;
var _errs141 = errors;
if(!(typeof data59 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/11/roll/min",schemaPath:"#/properties/features/allOf/1/items/11/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(100 !== data59){
validate445.errors = [{instancePath:instancePath+"/features/11/roll/min",schemaPath:"#/properties/features/allOf/1/items/11/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 100},message:"must be equal to constant"}];
return false;
}
var valid37 = _errs141 === errors;
}
else {
var valid37 = true;
}
if(valid37){
if(data58.max !== undefined){
var data60 = data58.max;
var _errs143 = errors;
if(!(typeof data60 == "number")){
validate445.errors = [{instancePath:instancePath+"/features/11/roll/max",schemaPath:"#/properties/features/allOf/1/items/11/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(100 !== data60){
validate445.errors = [{instancePath:instancePath+"/features/11/roll/max",schemaPath:"#/properties/features/allOf/1/items/11/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 100},message:"must be equal to constant"}];
return false;
}
var valid37 = _errs143 === errors;
}
else {
var valid37 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/11/roll",schemaPath:"#/properties/features/allOf/1/items/11/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features/11",schemaPath:"#/properties/features/allOf/1/items/11/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid13 = _errs136 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid11 = _errs35 === errors;
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.dangers !== undefined){
var data61 = data.dangers;
var _errs145 = errors;
var _errs146 = errors;
if(errors === _errs146){
if(Array.isArray(data61)){
var valid39 = true;
var len5 = data61.length;
for(var i3=0; i3<len5; i3++){
var _errs148 = errors;
if(!(validate453(data61[i3], {instancePath:instancePath+"/dangers/" + i3,parentData:data61,parentDataProperty:i3,rootData:rootData}))){
vErrors = vErrors === null ? validate453.errors : vErrors.concat(validate453.errors);
errors = vErrors.length;
}
var valid39 = _errs148 === errors;
if(!valid39){
break;
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs146 === errors;
if(valid38){
var _errs149 = errors;
if(errors === _errs149){
if(Array.isArray(data61)){
if(data61.length > 5){
validate445.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/1/maxItems",keyword:"maxItems",params:{limit: 5},message:"must NOT have more than 5 items"}];
return false;
}
else {
if(data61.length < 5){
validate445.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/1/minItems",keyword:"minItems",params:{limit: 5},message:"must NOT have fewer than 5 items"}];
return false;
}
else {
var len7 = data61.length;
if(len7 > 0){
var data63 = data61[0];
var _errs151 = errors;
if(errors === _errs151){
if(data63 && typeof data63 == "object" && !Array.isArray(data63)){
var missing25;
if((data63.roll === undefined) && (missing25 = "roll")){
validate445.errors = [{instancePath:instancePath+"/dangers/0",schemaPath:"#/properties/dangers/allOf/1/items/0/required",keyword:"required",params:{missingProperty: missing25},message:"must have required property '"+missing25+"'"}];
return false;
}
else {
if(data63.roll !== undefined){
var data64 = data63.roll;
var _errs154 = errors;
if(errors === _errs154){
if(data64 && typeof data64 == "object" && !Array.isArray(data64)){
var missing26;
if(((data64.min === undefined) && (missing26 = "min")) || ((data64.max === undefined) && (missing26 = "max"))){
validate445.errors = [{instancePath:instancePath+"/dangers/0/roll",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/required",keyword:"required",params:{missingProperty: missing26},message:"must have required property '"+missing26+"'"}];
return false;
}
else {
if(data64.min !== undefined){
var data65 = data64.min;
var _errs156 = errors;
if(!(typeof data65 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/0/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(31 !== data65){
validate445.errors = [{instancePath:instancePath+"/dangers/0/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 31},message:"must be equal to constant"}];
return false;
}
var valid42 = _errs156 === errors;
}
else {
var valid42 = true;
}
if(valid42){
if(data64.max !== undefined){
var data66 = data64.max;
var _errs158 = errors;
if(!(typeof data66 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/0/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(33 !== data66){
validate445.errors = [{instancePath:instancePath+"/dangers/0/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 33},message:"must be equal to constant"}];
return false;
}
var valid42 = _errs158 === errors;
}
else {
var valid42 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/0/roll",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/0",schemaPath:"#/properties/dangers/allOf/1/items/0/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid40 = _errs151 === errors;
}
if(valid40){
if(len7 > 1){
var data67 = data61[1];
var _errs160 = errors;
if(errors === _errs160){
if(data67 && typeof data67 == "object" && !Array.isArray(data67)){
var missing27;
if((data67.roll === undefined) && (missing27 = "roll")){
validate445.errors = [{instancePath:instancePath+"/dangers/1",schemaPath:"#/properties/dangers/allOf/1/items/1/required",keyword:"required",params:{missingProperty: missing27},message:"must have required property '"+missing27+"'"}];
return false;
}
else {
if(data67.roll !== undefined){
var data68 = data67.roll;
var _errs163 = errors;
if(errors === _errs163){
if(data68 && typeof data68 == "object" && !Array.isArray(data68)){
var missing28;
if(((data68.min === undefined) && (missing28 = "min")) || ((data68.max === undefined) && (missing28 = "max"))){
validate445.errors = [{instancePath:instancePath+"/dangers/1/roll",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/required",keyword:"required",params:{missingProperty: missing28},message:"must have required property '"+missing28+"'"}];
return false;
}
else {
if(data68.min !== undefined){
var data69 = data68.min;
var _errs165 = errors;
if(!(typeof data69 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/1/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(34 !== data69){
validate445.errors = [{instancePath:instancePath+"/dangers/1/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 34},message:"must be equal to constant"}];
return false;
}
var valid44 = _errs165 === errors;
}
else {
var valid44 = true;
}
if(valid44){
if(data68.max !== undefined){
var data70 = data68.max;
var _errs167 = errors;
if(!(typeof data70 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/1/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(36 !== data70){
validate445.errors = [{instancePath:instancePath+"/dangers/1/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 36},message:"must be equal to constant"}];
return false;
}
var valid44 = _errs167 === errors;
}
else {
var valid44 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/1/roll",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/1",schemaPath:"#/properties/dangers/allOf/1/items/1/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid40 = _errs160 === errors;
}
if(valid40){
if(len7 > 2){
var data71 = data61[2];
var _errs169 = errors;
if(errors === _errs169){
if(data71 && typeof data71 == "object" && !Array.isArray(data71)){
var missing29;
if((data71.roll === undefined) && (missing29 = "roll")){
validate445.errors = [{instancePath:instancePath+"/dangers/2",schemaPath:"#/properties/dangers/allOf/1/items/2/required",keyword:"required",params:{missingProperty: missing29},message:"must have required property '"+missing29+"'"}];
return false;
}
else {
if(data71.roll !== undefined){
var data72 = data71.roll;
var _errs172 = errors;
if(errors === _errs172){
if(data72 && typeof data72 == "object" && !Array.isArray(data72)){
var missing30;
if(((data72.min === undefined) && (missing30 = "min")) || ((data72.max === undefined) && (missing30 = "max"))){
validate445.errors = [{instancePath:instancePath+"/dangers/2/roll",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/required",keyword:"required",params:{missingProperty: missing30},message:"must have required property '"+missing30+"'"}];
return false;
}
else {
if(data72.min !== undefined){
var data73 = data72.min;
var _errs174 = errors;
if(!(typeof data73 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/2/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(37 !== data73){
validate445.errors = [{instancePath:instancePath+"/dangers/2/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 37},message:"must be equal to constant"}];
return false;
}
var valid46 = _errs174 === errors;
}
else {
var valid46 = true;
}
if(valid46){
if(data72.max !== undefined){
var data74 = data72.max;
var _errs176 = errors;
if(!(typeof data74 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/2/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(39 !== data74){
validate445.errors = [{instancePath:instancePath+"/dangers/2/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 39},message:"must be equal to constant"}];
return false;
}
var valid46 = _errs176 === errors;
}
else {
var valid46 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/2/roll",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/2",schemaPath:"#/properties/dangers/allOf/1/items/2/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid40 = _errs169 === errors;
}
if(valid40){
if(len7 > 3){
var data75 = data61[3];
var _errs178 = errors;
if(errors === _errs178){
if(data75 && typeof data75 == "object" && !Array.isArray(data75)){
var missing31;
if((data75.roll === undefined) && (missing31 = "roll")){
validate445.errors = [{instancePath:instancePath+"/dangers/3",schemaPath:"#/properties/dangers/allOf/1/items/3/required",keyword:"required",params:{missingProperty: missing31},message:"must have required property '"+missing31+"'"}];
return false;
}
else {
if(data75.roll !== undefined){
var data76 = data75.roll;
var _errs181 = errors;
if(errors === _errs181){
if(data76 && typeof data76 == "object" && !Array.isArray(data76)){
var missing32;
if(((data76.min === undefined) && (missing32 = "min")) || ((data76.max === undefined) && (missing32 = "max"))){
validate445.errors = [{instancePath:instancePath+"/dangers/3/roll",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/required",keyword:"required",params:{missingProperty: missing32},message:"must have required property '"+missing32+"'"}];
return false;
}
else {
if(data76.min !== undefined){
var data77 = data76.min;
var _errs183 = errors;
if(!(typeof data77 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/3/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(40 !== data77){
validate445.errors = [{instancePath:instancePath+"/dangers/3/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 40},message:"must be equal to constant"}];
return false;
}
var valid48 = _errs183 === errors;
}
else {
var valid48 = true;
}
if(valid48){
if(data76.max !== undefined){
var data78 = data76.max;
var _errs185 = errors;
if(!(typeof data78 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/3/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(42 !== data78){
validate445.errors = [{instancePath:instancePath+"/dangers/3/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 42},message:"must be equal to constant"}];
return false;
}
var valid48 = _errs185 === errors;
}
else {
var valid48 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/3/roll",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/3",schemaPath:"#/properties/dangers/allOf/1/items/3/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid40 = _errs178 === errors;
}
if(valid40){
if(len7 > 4){
var data79 = data61[4];
var _errs187 = errors;
if(errors === _errs187){
if(data79 && typeof data79 == "object" && !Array.isArray(data79)){
var missing33;
if((data79.roll === undefined) && (missing33 = "roll")){
validate445.errors = [{instancePath:instancePath+"/dangers/4",schemaPath:"#/properties/dangers/allOf/1/items/4/required",keyword:"required",params:{missingProperty: missing33},message:"must have required property '"+missing33+"'"}];
return false;
}
else {
if(data79.roll !== undefined){
var data80 = data79.roll;
var _errs190 = errors;
if(errors === _errs190){
if(data80 && typeof data80 == "object" && !Array.isArray(data80)){
var missing34;
if(((data80.min === undefined) && (missing34 = "min")) || ((data80.max === undefined) && (missing34 = "max"))){
validate445.errors = [{instancePath:instancePath+"/dangers/4/roll",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/required",keyword:"required",params:{missingProperty: missing34},message:"must have required property '"+missing34+"'"}];
return false;
}
else {
if(data80.min !== undefined){
var data81 = data80.min;
var _errs192 = errors;
if(!(typeof data81 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/4/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(43 !== data81){
validate445.errors = [{instancePath:instancePath+"/dangers/4/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 43},message:"must be equal to constant"}];
return false;
}
var valid50 = _errs192 === errors;
}
else {
var valid50 = true;
}
if(valid50){
if(data80.max !== undefined){
var data82 = data80.max;
var _errs194 = errors;
if(!(typeof data82 == "number")){
validate445.errors = [{instancePath:instancePath+"/dangers/4/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(45 !== data82){
validate445.errors = [{instancePath:instancePath+"/dangers/4/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 45},message:"must be equal to constant"}];
return false;
}
var valid50 = _errs194 === errors;
}
else {
var valid50 = true;
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/4/roll",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers/4",schemaPath:"#/properties/dangers/allOf/1/items/4/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid40 = _errs187 === errors;
}
}
}
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs149 === errors;
}
var valid0 = _errs145 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs196 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs196 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs197 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs197 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs198 = errors;
if(typeof data._comment !== "string"){
validate445.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs198 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs200 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs200 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate445.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate445.errors = vErrors;
return errors === 0;
}

var schema712 = {"title":"DelveSiteTheme","type":"object","description":"A delve site theme card.","required":["_id","type","name","features","dangers","_source"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteThemeId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"delve_site_theme"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/DelveSiteThemeIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"features":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteThemeFeature"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":1},"max":{"type":"number","const":4}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":5},"max":{"type":"number","const":8}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":9},"max":{"type":"number","const":12}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":13},"max":{"type":"number","const":16}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":17},"max":{"type":"number","const":20}}}},"additionalProperties":{}}],"minItems":5,"maxItems":5,"additionalItems":{}}]},"dangers":{"allOf":[{"type":"array","items":{"$ref":"#/definitions/DelveSiteThemeDanger"}},{"type":"array","items":[{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":1},"max":{"type":"number","const":5}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":6},"max":{"type":"number","const":10}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":11},"max":{"type":"number","const":12}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":13},"max":{"type":"number","const":14}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":15},"max":{"type":"number","const":16}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":17},"max":{"type":"number","const":18}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":19},"max":{"type":"number","const":20}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":21},"max":{"type":"number","const":22}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":23},"max":{"type":"number","const":24}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":25},"max":{"type":"number","const":26}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":27},"max":{"type":"number","const":28}}}},"additionalProperties":{}},{"type":"object","required":["roll"],"properties":{"roll":{"title":"DiceRangeStatic","type":"object","required":["min","max"],"properties":{"min":{"type":"number","const":29},"max":{"type":"number","const":30}}}},"additionalProperties":{}}],"minItems":12,"maxItems":12,"additionalItems":{}}]},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."}}};
var schema720 = {"title":"DelveSiteThemeFeature","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteThemeFeatureId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}};
var schema721 = {"title":"DelveSiteThemeFeatureId","type":"string","description":"A unique ID representing a DelveSiteThemeFeature object.","pattern":"^delve_site_theme\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"};
var pattern333 = new RegExp("^delve_site_theme\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$", "u");

function validate465(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll === undefined){
data.roll = null;
}
var missing0;
if((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.text === undefined) && (missing0 = "text"))){
validate465.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern333.test(data0)){
validate465.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteThemeFeatureId/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},message:"must match pattern \""+"^delve_site_theme\\.feature:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"+"\""}];
return false;
}
}
else {
validate465.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteThemeFeatureId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data1 = data.icon;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(typeof data1 === "string"){
if(!pattern15.test(data1)){
validate465.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate465.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.roll;
var _errs7 = errors;
var _errs8 = errors;
var valid3 = false;
var _errs9 = errors;
var _errs10 = errors;
if(errors === _errs10){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var missing1;
if(((data2.min === undefined) && (missing1 = "min")) || ((data2.max === undefined) && (missing1 = "max"))){
var err0 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data2.min !== undefined){
var data3 = data2.min;
var _errs12 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
var err1 = {instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid5 = _errs12 === errors;
}
else {
var valid5 = true;
}
if(valid5){
if(data2.max !== undefined){
var data4 = data2.max;
var _errs14 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err2 = {instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid5 = _errs14 === errors;
}
else {
var valid5 = true;
}
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs9 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs16 = errors;
if(data2 !== null){
var err4 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs16 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err5 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate465.errors = vErrors;
return false;
}
else {
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs7 === errors;
if(valid0){
if(data.text !== undefined){
var _errs18 = errors;
var _errs19 = errors;
if(errors === _errs19){
if(errors === _errs19){
if(!(typeof data.text === "string")){
validate465.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var _errs21 = errors;
if(!(validate74(data.template, {instancePath:instancePath+"/template",parentData:data,parentDataProperty:"template",rootData:rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.embed_table !== undefined){
var data7 = data.embed_table;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(typeof data7 === "string"){
if(!pattern18.test(data7)){
validate465.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate465.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs25 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data9 = data.oracle_rolls;
var _errs26 = errors;
if(errors === _errs26){
if(Array.isArray(data9)){
var valid8 = true;
var len0 = data9.length;
for(var i0=0; i0<len0; i0++){
var _errs28 = errors;
if(!(validate77(data9[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data9,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid8 = _errs28 === errors;
if(!valid8){
break;
}
}
}
else {
validate465.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs29 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs29 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._i18n !== undefined){
var _errs30 = errors;
if(!(validate80(data._i18n, {instancePath:instancePath+"/_i18n",parentData:data,parentDataProperty:"_i18n",rootData:rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate465.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate465.errors = vErrors;
return errors === 0;
}

var schema726 = {"title":"DelveSiteThemeDanger","type":"object","description":"Represents a row in an oracle table, with a single text cell.","required":["_id","roll","text"],"properties":{"_id":{"$ref":"#/definitions/DelveSiteThemeDangerId"},"icon":{"$ref":"#/definitions/SvgImageUrl"},"roll":{"description":"`null` represents an unrollable row, included only for rendering purposes.","default":null,"anyOf":[{"$ref":"#/definitions/DiceRange"},{"type":"null"}]},"text":{"$ref":"#/definitions/MarkdownString","description":"The primary text content of this row."},"template":{"$ref":"#/definitions/OracleRollTemplate","releaseStage":"experimental"},"embed_table":{"$ref":"#/definitions/OracleRollableId","description":"Hints that the identified table should be rendered inside this table row.","releaseStage":"experimental"},"suggestions":{"$ref":"#/definitions/Suggestions"},"oracle_rolls":{"type":"array","description":"Further oracle rolls prompted by this table row.","items":{"$ref":"#/definitions/OracleRoll"}},"tags":{"$ref":"#/definitions/Tags"},"_i18n":{"$ref":"#/definitions/I18nHints","releaseStage":"experimental"}}};
var schema727 = {"title":"DelveSiteThemeDangerId","type":"string","description":"A unique ID representing a DelveSiteThemeDanger object.","pattern":"^delve_site_theme\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"};
var pattern336 = new RegExp("^delve_site_theme\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$", "u");

function validate472(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.roll === undefined){
data.roll = null;
}
var missing0;
if((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.text === undefined) && (missing0 = "text"))){
validate472.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern336.test(data0)){
validate472.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteThemeDangerId/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},message:"must match pattern \""+"^delve_site_theme\\.danger:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"+"\""}];
return false;
}
}
else {
validate472.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteThemeDangerId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data1 = data.icon;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(errors === _errs5){
if(typeof data1 === "string"){
if(!pattern15.test(data1)){
validate472.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate472.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data2 = data.roll;
var _errs7 = errors;
var _errs8 = errors;
var valid3 = false;
var _errs9 = errors;
var _errs10 = errors;
if(errors === _errs10){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var missing1;
if(((data2.min === undefined) && (missing1 = "min")) || ((data2.max === undefined) && (missing1 = "max"))){
var err0 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data2.min !== undefined){
var data3 = data2.min;
var _errs12 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
var err1 = {instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid5 = _errs12 === errors;
}
else {
var valid5 = true;
}
if(valid5){
if(data2.max !== undefined){
var data4 = data2.max;
var _errs14 = errors;
if(!((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4)))){
var err2 = {instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid5 = _errs14 === errors;
}
else {
var valid5 = true;
}
}
}
}
else {
var err3 = {instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
}
var _valid0 = _errs9 === errors;
valid3 = valid3 || _valid0;
if(!valid3){
var _errs16 = errors;
if(data2 !== null){
var err4 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs16 === errors;
valid3 = valid3 || _valid0;
}
if(!valid3){
var err5 = {instancePath:instancePath+"/roll",schemaPath:"#/properties/roll/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate472.errors = vErrors;
return false;
}
else {
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs7 === errors;
if(valid0){
if(data.text !== undefined){
var _errs18 = errors;
var _errs19 = errors;
if(errors === _errs19){
if(errors === _errs19){
if(!(typeof data.text === "string")){
validate472.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.template !== undefined){
var _errs21 = errors;
if(!(validate74(data.template, {instancePath:instancePath+"/template",parentData:data,parentDataProperty:"template",rootData:rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.embed_table !== undefined){
var data7 = data.embed_table;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(typeof data7 === "string"){
if(!pattern18.test(data7)){
validate472.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/pattern",keyword:"pattern",params:{pattern: "^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"},message:"must match pattern \""+"^oracle_rollable:([a-z][a-z0-9_]{3,}(?:\\/[a-z][a-z_]*){2,5})$"+"\""}];
return false;
}
}
else {
validate472.errors = [{instancePath:instancePath+"/embed_table",schemaPath:"#/definitions/OracleRollableId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs25 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.oracle_rolls !== undefined){
var data9 = data.oracle_rolls;
var _errs26 = errors;
if(errors === _errs26){
if(Array.isArray(data9)){
var valid8 = true;
var len0 = data9.length;
for(var i0=0; i0<len0; i0++){
var _errs28 = errors;
if(!(validate77(data9[i0], {instancePath:instancePath+"/oracle_rolls/" + i0,parentData:data9,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate77.errors : vErrors.concat(validate77.errors);
errors = vErrors.length;
}
var valid8 = _errs28 === errors;
if(!valid8){
break;
}
}
}
else {
validate472.errors = [{instancePath:instancePath+"/oracle_rolls",schemaPath:"#/properties/oracle_rolls/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs29 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs29 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._i18n !== undefined){
var _errs30 = errors;
if(!(validate80(data._i18n, {instancePath:instancePath+"/_i18n",parentData:data,parentDataProperty:"_i18n",rootData:rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate472.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate472.errors = vErrors;
return errors === 0;
}


function validate464(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.features === undefined) && (missing0 = "features"))) || ((data.dangers === undefined) && (missing0 = "dangers"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate464.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern70.test(data0)){
validate464.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteThemeId/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^delve_site_theme:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""}];
return false;
}
}
else {
validate464.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/DelveSiteThemeId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate464.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("delve_site_theme" !== data1){
validate464.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "delve_site_theme"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate464.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate464.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern50.test(data5)){
validate464.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/DelveSiteThemeIdWildcard/pattern",keyword:"pattern",params:{pattern: "^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^delve_site_theme:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""}];
return false;
}
}
else {
validate464.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/DelveSiteThemeIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs17 = errors;
if(typeof data.color !== "string"){
validate464.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data7 = data.icon;
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data7 === "string"){
if(!pattern15.test(data7)){
validate464.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate464.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data8 = data.images;
var _errs23 = errors;
if(errors === _errs23){
if(Array.isArray(data8)){
var valid8 = true;
var len1 = data8.length;
for(var i1=0; i1<len1; i1++){
var data9 = data8[i1];
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern16.test(data9)){
validate464.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate464.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs25 === errors;
if(!valid8){
break;
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.features !== undefined){
var data10 = data.features;
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(Array.isArray(data10)){
var valid11 = true;
var len2 = data10.length;
for(var i2=0; i2<len2; i2++){
var _errs31 = errors;
if(!(validate465(data10[i2], {instancePath:instancePath+"/features/" + i2,parentData:data10,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate465.errors : vErrors.concat(validate465.errors);
errors = vErrors.length;
}
var valid11 = _errs31 === errors;
if(!valid11){
break;
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid10 = _errs29 === errors;
if(valid10){
var _errs32 = errors;
if(errors === _errs32){
if(Array.isArray(data10)){
if(data10.length > 5){
validate464.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/1/maxItems",keyword:"maxItems",params:{limit: 5},message:"must NOT have more than 5 items"}];
return false;
}
else {
if(data10.length < 5){
validate464.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/1/minItems",keyword:"minItems",params:{limit: 5},message:"must NOT have fewer than 5 items"}];
return false;
}
else {
var len4 = data10.length;
if(len4 > 0){
var data12 = data10[0];
var _errs34 = errors;
if(errors === _errs34){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
var missing1;
if((data12.roll === undefined) && (missing1 = "roll")){
validate464.errors = [{instancePath:instancePath+"/features/0",schemaPath:"#/properties/features/allOf/1/items/0/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data12.roll !== undefined){
var data13 = data12.roll;
var _errs37 = errors;
if(errors === _errs37){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
var missing2;
if(((data13.min === undefined) && (missing2 = "min")) || ((data13.max === undefined) && (missing2 = "max"))){
validate464.errors = [{instancePath:instancePath+"/features/0/roll",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data13.min !== undefined){
var data14 = data13.min;
var _errs39 = errors;
if(!(typeof data14 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/0/roll/min",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(1 !== data14){
validate464.errors = [{instancePath:instancePath+"/features/0/roll/min",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 1},message:"must be equal to constant"}];
return false;
}
var valid14 = _errs39 === errors;
}
else {
var valid14 = true;
}
if(valid14){
if(data13.max !== undefined){
var data15 = data13.max;
var _errs41 = errors;
if(!(typeof data15 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/0/roll/max",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(4 !== data15){
validate464.errors = [{instancePath:instancePath+"/features/0/roll/max",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 4},message:"must be equal to constant"}];
return false;
}
var valid14 = _errs41 === errors;
}
else {
var valid14 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/0/roll",schemaPath:"#/properties/features/allOf/1/items/0/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/0",schemaPath:"#/properties/features/allOf/1/items/0/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid12 = _errs34 === errors;
}
if(valid12){
if(len4 > 1){
var data16 = data10[1];
var _errs43 = errors;
if(errors === _errs43){
if(data16 && typeof data16 == "object" && !Array.isArray(data16)){
var missing3;
if((data16.roll === undefined) && (missing3 = "roll")){
validate464.errors = [{instancePath:instancePath+"/features/1",schemaPath:"#/properties/features/allOf/1/items/1/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
if(data16.roll !== undefined){
var data17 = data16.roll;
var _errs46 = errors;
if(errors === _errs46){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
var missing4;
if(((data17.min === undefined) && (missing4 = "min")) || ((data17.max === undefined) && (missing4 = "max"))){
validate464.errors = [{instancePath:instancePath+"/features/1/roll",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
if(data17.min !== undefined){
var data18 = data17.min;
var _errs48 = errors;
if(!(typeof data18 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/1/roll/min",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(5 !== data18){
validate464.errors = [{instancePath:instancePath+"/features/1/roll/min",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 5},message:"must be equal to constant"}];
return false;
}
var valid16 = _errs48 === errors;
}
else {
var valid16 = true;
}
if(valid16){
if(data17.max !== undefined){
var data19 = data17.max;
var _errs50 = errors;
if(!(typeof data19 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/1/roll/max",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(8 !== data19){
validate464.errors = [{instancePath:instancePath+"/features/1/roll/max",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 8},message:"must be equal to constant"}];
return false;
}
var valid16 = _errs50 === errors;
}
else {
var valid16 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/1/roll",schemaPath:"#/properties/features/allOf/1/items/1/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/1",schemaPath:"#/properties/features/allOf/1/items/1/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid12 = _errs43 === errors;
}
if(valid12){
if(len4 > 2){
var data20 = data10[2];
var _errs52 = errors;
if(errors === _errs52){
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
var missing5;
if((data20.roll === undefined) && (missing5 = "roll")){
validate464.errors = [{instancePath:instancePath+"/features/2",schemaPath:"#/properties/features/allOf/1/items/2/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
if(data20.roll !== undefined){
var data21 = data20.roll;
var _errs55 = errors;
if(errors === _errs55){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
var missing6;
if(((data21.min === undefined) && (missing6 = "min")) || ((data21.max === undefined) && (missing6 = "max"))){
validate464.errors = [{instancePath:instancePath+"/features/2/roll",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
if(data21.min !== undefined){
var data22 = data21.min;
var _errs57 = errors;
if(!(typeof data22 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/2/roll/min",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(9 !== data22){
validate464.errors = [{instancePath:instancePath+"/features/2/roll/min",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 9},message:"must be equal to constant"}];
return false;
}
var valid18 = _errs57 === errors;
}
else {
var valid18 = true;
}
if(valid18){
if(data21.max !== undefined){
var data23 = data21.max;
var _errs59 = errors;
if(!(typeof data23 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/2/roll/max",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(12 !== data23){
validate464.errors = [{instancePath:instancePath+"/features/2/roll/max",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 12},message:"must be equal to constant"}];
return false;
}
var valid18 = _errs59 === errors;
}
else {
var valid18 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/2/roll",schemaPath:"#/properties/features/allOf/1/items/2/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/2",schemaPath:"#/properties/features/allOf/1/items/2/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid12 = _errs52 === errors;
}
if(valid12){
if(len4 > 3){
var data24 = data10[3];
var _errs61 = errors;
if(errors === _errs61){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
var missing7;
if((data24.roll === undefined) && (missing7 = "roll")){
validate464.errors = [{instancePath:instancePath+"/features/3",schemaPath:"#/properties/features/allOf/1/items/3/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
if(data24.roll !== undefined){
var data25 = data24.roll;
var _errs64 = errors;
if(errors === _errs64){
if(data25 && typeof data25 == "object" && !Array.isArray(data25)){
var missing8;
if(((data25.min === undefined) && (missing8 = "min")) || ((data25.max === undefined) && (missing8 = "max"))){
validate464.errors = [{instancePath:instancePath+"/features/3/roll",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
if(data25.min !== undefined){
var data26 = data25.min;
var _errs66 = errors;
if(!(typeof data26 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/3/roll/min",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(13 !== data26){
validate464.errors = [{instancePath:instancePath+"/features/3/roll/min",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 13},message:"must be equal to constant"}];
return false;
}
var valid20 = _errs66 === errors;
}
else {
var valid20 = true;
}
if(valid20){
if(data25.max !== undefined){
var data27 = data25.max;
var _errs68 = errors;
if(!(typeof data27 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/3/roll/max",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(16 !== data27){
validate464.errors = [{instancePath:instancePath+"/features/3/roll/max",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 16},message:"must be equal to constant"}];
return false;
}
var valid20 = _errs68 === errors;
}
else {
var valid20 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/3/roll",schemaPath:"#/properties/features/allOf/1/items/3/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/3",schemaPath:"#/properties/features/allOf/1/items/3/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid12 = _errs61 === errors;
}
if(valid12){
if(len4 > 4){
var data28 = data10[4];
var _errs70 = errors;
if(errors === _errs70){
if(data28 && typeof data28 == "object" && !Array.isArray(data28)){
var missing9;
if((data28.roll === undefined) && (missing9 = "roll")){
validate464.errors = [{instancePath:instancePath+"/features/4",schemaPath:"#/properties/features/allOf/1/items/4/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
if(data28.roll !== undefined){
var data29 = data28.roll;
var _errs73 = errors;
if(errors === _errs73){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
var missing10;
if(((data29.min === undefined) && (missing10 = "min")) || ((data29.max === undefined) && (missing10 = "max"))){
validate464.errors = [{instancePath:instancePath+"/features/4/roll",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
if(data29.min !== undefined){
var data30 = data29.min;
var _errs75 = errors;
if(!(typeof data30 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/4/roll/min",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(17 !== data30){
validate464.errors = [{instancePath:instancePath+"/features/4/roll/min",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 17},message:"must be equal to constant"}];
return false;
}
var valid22 = _errs75 === errors;
}
else {
var valid22 = true;
}
if(valid22){
if(data29.max !== undefined){
var data31 = data29.max;
var _errs77 = errors;
if(!(typeof data31 == "number")){
validate464.errors = [{instancePath:instancePath+"/features/4/roll/max",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(20 !== data31){
validate464.errors = [{instancePath:instancePath+"/features/4/roll/max",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 20},message:"must be equal to constant"}];
return false;
}
var valid22 = _errs77 === errors;
}
else {
var valid22 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/4/roll",schemaPath:"#/properties/features/allOf/1/items/4/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features/4",schemaPath:"#/properties/features/allOf/1/items/4/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid12 = _errs70 === errors;
}
}
}
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/features",schemaPath:"#/properties/features/allOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid10 = _errs32 === errors;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.dangers !== undefined){
var data32 = data.dangers;
var _errs79 = errors;
var _errs80 = errors;
if(errors === _errs80){
if(Array.isArray(data32)){
var valid24 = true;
var len5 = data32.length;
for(var i3=0; i3<len5; i3++){
var _errs82 = errors;
if(!(validate472(data32[i3], {instancePath:instancePath+"/dangers/" + i3,parentData:data32,parentDataProperty:i3,rootData:rootData}))){
vErrors = vErrors === null ? validate472.errors : vErrors.concat(validate472.errors);
errors = vErrors.length;
}
var valid24 = _errs82 === errors;
if(!valid24){
break;
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid23 = _errs80 === errors;
if(valid23){
var _errs83 = errors;
if(errors === _errs83){
if(Array.isArray(data32)){
if(data32.length > 12){
validate464.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/1/maxItems",keyword:"maxItems",params:{limit: 12},message:"must NOT have more than 12 items"}];
return false;
}
else {
if(data32.length < 12){
validate464.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/1/minItems",keyword:"minItems",params:{limit: 12},message:"must NOT have fewer than 12 items"}];
return false;
}
else {
var len7 = data32.length;
if(len7 > 0){
var data34 = data32[0];
var _errs85 = errors;
if(errors === _errs85){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
var missing11;
if((data34.roll === undefined) && (missing11 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/0",schemaPath:"#/properties/dangers/allOf/1/items/0/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
if(data34.roll !== undefined){
var data35 = data34.roll;
var _errs88 = errors;
if(errors === _errs88){
if(data35 && typeof data35 == "object" && !Array.isArray(data35)){
var missing12;
if(((data35.min === undefined) && (missing12 = "min")) || ((data35.max === undefined) && (missing12 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/0/roll",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/required",keyword:"required",params:{missingProperty: missing12},message:"must have required property '"+missing12+"'"}];
return false;
}
else {
if(data35.min !== undefined){
var data36 = data35.min;
var _errs90 = errors;
if(!(typeof data36 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/0/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(1 !== data36){
validate464.errors = [{instancePath:instancePath+"/dangers/0/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 1},message:"must be equal to constant"}];
return false;
}
var valid27 = _errs90 === errors;
}
else {
var valid27 = true;
}
if(valid27){
if(data35.max !== undefined){
var data37 = data35.max;
var _errs92 = errors;
if(!(typeof data37 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/0/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(5 !== data37){
validate464.errors = [{instancePath:instancePath+"/dangers/0/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 5},message:"must be equal to constant"}];
return false;
}
var valid27 = _errs92 === errors;
}
else {
var valid27 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/0/roll",schemaPath:"#/properties/dangers/allOf/1/items/0/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/0",schemaPath:"#/properties/dangers/allOf/1/items/0/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs85 === errors;
}
if(valid25){
if(len7 > 1){
var data38 = data32[1];
var _errs94 = errors;
if(errors === _errs94){
if(data38 && typeof data38 == "object" && !Array.isArray(data38)){
var missing13;
if((data38.roll === undefined) && (missing13 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/1",schemaPath:"#/properties/dangers/allOf/1/items/1/required",keyword:"required",params:{missingProperty: missing13},message:"must have required property '"+missing13+"'"}];
return false;
}
else {
if(data38.roll !== undefined){
var data39 = data38.roll;
var _errs97 = errors;
if(errors === _errs97){
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
var missing14;
if(((data39.min === undefined) && (missing14 = "min")) || ((data39.max === undefined) && (missing14 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/1/roll",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/required",keyword:"required",params:{missingProperty: missing14},message:"must have required property '"+missing14+"'"}];
return false;
}
else {
if(data39.min !== undefined){
var data40 = data39.min;
var _errs99 = errors;
if(!(typeof data40 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/1/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(6 !== data40){
validate464.errors = [{instancePath:instancePath+"/dangers/1/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 6},message:"must be equal to constant"}];
return false;
}
var valid29 = _errs99 === errors;
}
else {
var valid29 = true;
}
if(valid29){
if(data39.max !== undefined){
var data41 = data39.max;
var _errs101 = errors;
if(!(typeof data41 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/1/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(10 !== data41){
validate464.errors = [{instancePath:instancePath+"/dangers/1/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 10},message:"must be equal to constant"}];
return false;
}
var valid29 = _errs101 === errors;
}
else {
var valid29 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/1/roll",schemaPath:"#/properties/dangers/allOf/1/items/1/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/1",schemaPath:"#/properties/dangers/allOf/1/items/1/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs94 === errors;
}
if(valid25){
if(len7 > 2){
var data42 = data32[2];
var _errs103 = errors;
if(errors === _errs103){
if(data42 && typeof data42 == "object" && !Array.isArray(data42)){
var missing15;
if((data42.roll === undefined) && (missing15 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/2",schemaPath:"#/properties/dangers/allOf/1/items/2/required",keyword:"required",params:{missingProperty: missing15},message:"must have required property '"+missing15+"'"}];
return false;
}
else {
if(data42.roll !== undefined){
var data43 = data42.roll;
var _errs106 = errors;
if(errors === _errs106){
if(data43 && typeof data43 == "object" && !Array.isArray(data43)){
var missing16;
if(((data43.min === undefined) && (missing16 = "min")) || ((data43.max === undefined) && (missing16 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/2/roll",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/required",keyword:"required",params:{missingProperty: missing16},message:"must have required property '"+missing16+"'"}];
return false;
}
else {
if(data43.min !== undefined){
var data44 = data43.min;
var _errs108 = errors;
if(!(typeof data44 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/2/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(11 !== data44){
validate464.errors = [{instancePath:instancePath+"/dangers/2/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 11},message:"must be equal to constant"}];
return false;
}
var valid31 = _errs108 === errors;
}
else {
var valid31 = true;
}
if(valid31){
if(data43.max !== undefined){
var data45 = data43.max;
var _errs110 = errors;
if(!(typeof data45 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/2/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(12 !== data45){
validate464.errors = [{instancePath:instancePath+"/dangers/2/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 12},message:"must be equal to constant"}];
return false;
}
var valid31 = _errs110 === errors;
}
else {
var valid31 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/2/roll",schemaPath:"#/properties/dangers/allOf/1/items/2/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/2",schemaPath:"#/properties/dangers/allOf/1/items/2/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs103 === errors;
}
if(valid25){
if(len7 > 3){
var data46 = data32[3];
var _errs112 = errors;
if(errors === _errs112){
if(data46 && typeof data46 == "object" && !Array.isArray(data46)){
var missing17;
if((data46.roll === undefined) && (missing17 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/3",schemaPath:"#/properties/dangers/allOf/1/items/3/required",keyword:"required",params:{missingProperty: missing17},message:"must have required property '"+missing17+"'"}];
return false;
}
else {
if(data46.roll !== undefined){
var data47 = data46.roll;
var _errs115 = errors;
if(errors === _errs115){
if(data47 && typeof data47 == "object" && !Array.isArray(data47)){
var missing18;
if(((data47.min === undefined) && (missing18 = "min")) || ((data47.max === undefined) && (missing18 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/3/roll",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/required",keyword:"required",params:{missingProperty: missing18},message:"must have required property '"+missing18+"'"}];
return false;
}
else {
if(data47.min !== undefined){
var data48 = data47.min;
var _errs117 = errors;
if(!(typeof data48 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/3/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(13 !== data48){
validate464.errors = [{instancePath:instancePath+"/dangers/3/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 13},message:"must be equal to constant"}];
return false;
}
var valid33 = _errs117 === errors;
}
else {
var valid33 = true;
}
if(valid33){
if(data47.max !== undefined){
var data49 = data47.max;
var _errs119 = errors;
if(!(typeof data49 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/3/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(14 !== data49){
validate464.errors = [{instancePath:instancePath+"/dangers/3/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 14},message:"must be equal to constant"}];
return false;
}
var valid33 = _errs119 === errors;
}
else {
var valid33 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/3/roll",schemaPath:"#/properties/dangers/allOf/1/items/3/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/3",schemaPath:"#/properties/dangers/allOf/1/items/3/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs112 === errors;
}
if(valid25){
if(len7 > 4){
var data50 = data32[4];
var _errs121 = errors;
if(errors === _errs121){
if(data50 && typeof data50 == "object" && !Array.isArray(data50)){
var missing19;
if((data50.roll === undefined) && (missing19 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/4",schemaPath:"#/properties/dangers/allOf/1/items/4/required",keyword:"required",params:{missingProperty: missing19},message:"must have required property '"+missing19+"'"}];
return false;
}
else {
if(data50.roll !== undefined){
var data51 = data50.roll;
var _errs124 = errors;
if(errors === _errs124){
if(data51 && typeof data51 == "object" && !Array.isArray(data51)){
var missing20;
if(((data51.min === undefined) && (missing20 = "min")) || ((data51.max === undefined) && (missing20 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/4/roll",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/required",keyword:"required",params:{missingProperty: missing20},message:"must have required property '"+missing20+"'"}];
return false;
}
else {
if(data51.min !== undefined){
var data52 = data51.min;
var _errs126 = errors;
if(!(typeof data52 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/4/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(15 !== data52){
validate464.errors = [{instancePath:instancePath+"/dangers/4/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 15},message:"must be equal to constant"}];
return false;
}
var valid35 = _errs126 === errors;
}
else {
var valid35 = true;
}
if(valid35){
if(data51.max !== undefined){
var data53 = data51.max;
var _errs128 = errors;
if(!(typeof data53 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/4/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(16 !== data53){
validate464.errors = [{instancePath:instancePath+"/dangers/4/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 16},message:"must be equal to constant"}];
return false;
}
var valid35 = _errs128 === errors;
}
else {
var valid35 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/4/roll",schemaPath:"#/properties/dangers/allOf/1/items/4/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/4",schemaPath:"#/properties/dangers/allOf/1/items/4/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs121 === errors;
}
if(valid25){
if(len7 > 5){
var data54 = data32[5];
var _errs130 = errors;
if(errors === _errs130){
if(data54 && typeof data54 == "object" && !Array.isArray(data54)){
var missing21;
if((data54.roll === undefined) && (missing21 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/5",schemaPath:"#/properties/dangers/allOf/1/items/5/required",keyword:"required",params:{missingProperty: missing21},message:"must have required property '"+missing21+"'"}];
return false;
}
else {
if(data54.roll !== undefined){
var data55 = data54.roll;
var _errs133 = errors;
if(errors === _errs133){
if(data55 && typeof data55 == "object" && !Array.isArray(data55)){
var missing22;
if(((data55.min === undefined) && (missing22 = "min")) || ((data55.max === undefined) && (missing22 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/5/roll",schemaPath:"#/properties/dangers/allOf/1/items/5/properties/roll/required",keyword:"required",params:{missingProperty: missing22},message:"must have required property '"+missing22+"'"}];
return false;
}
else {
if(data55.min !== undefined){
var data56 = data55.min;
var _errs135 = errors;
if(!(typeof data56 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/5/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/5/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(17 !== data56){
validate464.errors = [{instancePath:instancePath+"/dangers/5/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/5/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 17},message:"must be equal to constant"}];
return false;
}
var valid37 = _errs135 === errors;
}
else {
var valid37 = true;
}
if(valid37){
if(data55.max !== undefined){
var data57 = data55.max;
var _errs137 = errors;
if(!(typeof data57 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/5/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/5/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(18 !== data57){
validate464.errors = [{instancePath:instancePath+"/dangers/5/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/5/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 18},message:"must be equal to constant"}];
return false;
}
var valid37 = _errs137 === errors;
}
else {
var valid37 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/5/roll",schemaPath:"#/properties/dangers/allOf/1/items/5/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/5",schemaPath:"#/properties/dangers/allOf/1/items/5/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs130 === errors;
}
if(valid25){
if(len7 > 6){
var data58 = data32[6];
var _errs139 = errors;
if(errors === _errs139){
if(data58 && typeof data58 == "object" && !Array.isArray(data58)){
var missing23;
if((data58.roll === undefined) && (missing23 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/6",schemaPath:"#/properties/dangers/allOf/1/items/6/required",keyword:"required",params:{missingProperty: missing23},message:"must have required property '"+missing23+"'"}];
return false;
}
else {
if(data58.roll !== undefined){
var data59 = data58.roll;
var _errs142 = errors;
if(errors === _errs142){
if(data59 && typeof data59 == "object" && !Array.isArray(data59)){
var missing24;
if(((data59.min === undefined) && (missing24 = "min")) || ((data59.max === undefined) && (missing24 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/6/roll",schemaPath:"#/properties/dangers/allOf/1/items/6/properties/roll/required",keyword:"required",params:{missingProperty: missing24},message:"must have required property '"+missing24+"'"}];
return false;
}
else {
if(data59.min !== undefined){
var data60 = data59.min;
var _errs144 = errors;
if(!(typeof data60 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/6/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/6/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(19 !== data60){
validate464.errors = [{instancePath:instancePath+"/dangers/6/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/6/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 19},message:"must be equal to constant"}];
return false;
}
var valid39 = _errs144 === errors;
}
else {
var valid39 = true;
}
if(valid39){
if(data59.max !== undefined){
var data61 = data59.max;
var _errs146 = errors;
if(!(typeof data61 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/6/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/6/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(20 !== data61){
validate464.errors = [{instancePath:instancePath+"/dangers/6/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/6/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 20},message:"must be equal to constant"}];
return false;
}
var valid39 = _errs146 === errors;
}
else {
var valid39 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/6/roll",schemaPath:"#/properties/dangers/allOf/1/items/6/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/6",schemaPath:"#/properties/dangers/allOf/1/items/6/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs139 === errors;
}
if(valid25){
if(len7 > 7){
var data62 = data32[7];
var _errs148 = errors;
if(errors === _errs148){
if(data62 && typeof data62 == "object" && !Array.isArray(data62)){
var missing25;
if((data62.roll === undefined) && (missing25 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/7",schemaPath:"#/properties/dangers/allOf/1/items/7/required",keyword:"required",params:{missingProperty: missing25},message:"must have required property '"+missing25+"'"}];
return false;
}
else {
if(data62.roll !== undefined){
var data63 = data62.roll;
var _errs151 = errors;
if(errors === _errs151){
if(data63 && typeof data63 == "object" && !Array.isArray(data63)){
var missing26;
if(((data63.min === undefined) && (missing26 = "min")) || ((data63.max === undefined) && (missing26 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/7/roll",schemaPath:"#/properties/dangers/allOf/1/items/7/properties/roll/required",keyword:"required",params:{missingProperty: missing26},message:"must have required property '"+missing26+"'"}];
return false;
}
else {
if(data63.min !== undefined){
var data64 = data63.min;
var _errs153 = errors;
if(!(typeof data64 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/7/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/7/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(21 !== data64){
validate464.errors = [{instancePath:instancePath+"/dangers/7/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/7/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 21},message:"must be equal to constant"}];
return false;
}
var valid41 = _errs153 === errors;
}
else {
var valid41 = true;
}
if(valid41){
if(data63.max !== undefined){
var data65 = data63.max;
var _errs155 = errors;
if(!(typeof data65 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/7/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/7/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(22 !== data65){
validate464.errors = [{instancePath:instancePath+"/dangers/7/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/7/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 22},message:"must be equal to constant"}];
return false;
}
var valid41 = _errs155 === errors;
}
else {
var valid41 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/7/roll",schemaPath:"#/properties/dangers/allOf/1/items/7/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/7",schemaPath:"#/properties/dangers/allOf/1/items/7/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs148 === errors;
}
if(valid25){
if(len7 > 8){
var data66 = data32[8];
var _errs157 = errors;
if(errors === _errs157){
if(data66 && typeof data66 == "object" && !Array.isArray(data66)){
var missing27;
if((data66.roll === undefined) && (missing27 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/8",schemaPath:"#/properties/dangers/allOf/1/items/8/required",keyword:"required",params:{missingProperty: missing27},message:"must have required property '"+missing27+"'"}];
return false;
}
else {
if(data66.roll !== undefined){
var data67 = data66.roll;
var _errs160 = errors;
if(errors === _errs160){
if(data67 && typeof data67 == "object" && !Array.isArray(data67)){
var missing28;
if(((data67.min === undefined) && (missing28 = "min")) || ((data67.max === undefined) && (missing28 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/8/roll",schemaPath:"#/properties/dangers/allOf/1/items/8/properties/roll/required",keyword:"required",params:{missingProperty: missing28},message:"must have required property '"+missing28+"'"}];
return false;
}
else {
if(data67.min !== undefined){
var data68 = data67.min;
var _errs162 = errors;
if(!(typeof data68 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/8/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/8/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(23 !== data68){
validate464.errors = [{instancePath:instancePath+"/dangers/8/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/8/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 23},message:"must be equal to constant"}];
return false;
}
var valid43 = _errs162 === errors;
}
else {
var valid43 = true;
}
if(valid43){
if(data67.max !== undefined){
var data69 = data67.max;
var _errs164 = errors;
if(!(typeof data69 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/8/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/8/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(24 !== data69){
validate464.errors = [{instancePath:instancePath+"/dangers/8/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/8/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 24},message:"must be equal to constant"}];
return false;
}
var valid43 = _errs164 === errors;
}
else {
var valid43 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/8/roll",schemaPath:"#/properties/dangers/allOf/1/items/8/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/8",schemaPath:"#/properties/dangers/allOf/1/items/8/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs157 === errors;
}
if(valid25){
if(len7 > 9){
var data70 = data32[9];
var _errs166 = errors;
if(errors === _errs166){
if(data70 && typeof data70 == "object" && !Array.isArray(data70)){
var missing29;
if((data70.roll === undefined) && (missing29 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/9",schemaPath:"#/properties/dangers/allOf/1/items/9/required",keyword:"required",params:{missingProperty: missing29},message:"must have required property '"+missing29+"'"}];
return false;
}
else {
if(data70.roll !== undefined){
var data71 = data70.roll;
var _errs169 = errors;
if(errors === _errs169){
if(data71 && typeof data71 == "object" && !Array.isArray(data71)){
var missing30;
if(((data71.min === undefined) && (missing30 = "min")) || ((data71.max === undefined) && (missing30 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/9/roll",schemaPath:"#/properties/dangers/allOf/1/items/9/properties/roll/required",keyword:"required",params:{missingProperty: missing30},message:"must have required property '"+missing30+"'"}];
return false;
}
else {
if(data71.min !== undefined){
var data72 = data71.min;
var _errs171 = errors;
if(!(typeof data72 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/9/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/9/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(25 !== data72){
validate464.errors = [{instancePath:instancePath+"/dangers/9/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/9/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 25},message:"must be equal to constant"}];
return false;
}
var valid45 = _errs171 === errors;
}
else {
var valid45 = true;
}
if(valid45){
if(data71.max !== undefined){
var data73 = data71.max;
var _errs173 = errors;
if(!(typeof data73 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/9/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/9/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(26 !== data73){
validate464.errors = [{instancePath:instancePath+"/dangers/9/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/9/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 26},message:"must be equal to constant"}];
return false;
}
var valid45 = _errs173 === errors;
}
else {
var valid45 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/9/roll",schemaPath:"#/properties/dangers/allOf/1/items/9/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/9",schemaPath:"#/properties/dangers/allOf/1/items/9/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs166 === errors;
}
if(valid25){
if(len7 > 10){
var data74 = data32[10];
var _errs175 = errors;
if(errors === _errs175){
if(data74 && typeof data74 == "object" && !Array.isArray(data74)){
var missing31;
if((data74.roll === undefined) && (missing31 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/10",schemaPath:"#/properties/dangers/allOf/1/items/10/required",keyword:"required",params:{missingProperty: missing31},message:"must have required property '"+missing31+"'"}];
return false;
}
else {
if(data74.roll !== undefined){
var data75 = data74.roll;
var _errs178 = errors;
if(errors === _errs178){
if(data75 && typeof data75 == "object" && !Array.isArray(data75)){
var missing32;
if(((data75.min === undefined) && (missing32 = "min")) || ((data75.max === undefined) && (missing32 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/10/roll",schemaPath:"#/properties/dangers/allOf/1/items/10/properties/roll/required",keyword:"required",params:{missingProperty: missing32},message:"must have required property '"+missing32+"'"}];
return false;
}
else {
if(data75.min !== undefined){
var data76 = data75.min;
var _errs180 = errors;
if(!(typeof data76 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/10/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/10/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(27 !== data76){
validate464.errors = [{instancePath:instancePath+"/dangers/10/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/10/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 27},message:"must be equal to constant"}];
return false;
}
var valid47 = _errs180 === errors;
}
else {
var valid47 = true;
}
if(valid47){
if(data75.max !== undefined){
var data77 = data75.max;
var _errs182 = errors;
if(!(typeof data77 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/10/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/10/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(28 !== data77){
validate464.errors = [{instancePath:instancePath+"/dangers/10/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/10/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 28},message:"must be equal to constant"}];
return false;
}
var valid47 = _errs182 === errors;
}
else {
var valid47 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/10/roll",schemaPath:"#/properties/dangers/allOf/1/items/10/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/10",schemaPath:"#/properties/dangers/allOf/1/items/10/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs175 === errors;
}
if(valid25){
if(len7 > 11){
var data78 = data32[11];
var _errs184 = errors;
if(errors === _errs184){
if(data78 && typeof data78 == "object" && !Array.isArray(data78)){
var missing33;
if((data78.roll === undefined) && (missing33 = "roll")){
validate464.errors = [{instancePath:instancePath+"/dangers/11",schemaPath:"#/properties/dangers/allOf/1/items/11/required",keyword:"required",params:{missingProperty: missing33},message:"must have required property '"+missing33+"'"}];
return false;
}
else {
if(data78.roll !== undefined){
var data79 = data78.roll;
var _errs187 = errors;
if(errors === _errs187){
if(data79 && typeof data79 == "object" && !Array.isArray(data79)){
var missing34;
if(((data79.min === undefined) && (missing34 = "min")) || ((data79.max === undefined) && (missing34 = "max"))){
validate464.errors = [{instancePath:instancePath+"/dangers/11/roll",schemaPath:"#/properties/dangers/allOf/1/items/11/properties/roll/required",keyword:"required",params:{missingProperty: missing34},message:"must have required property '"+missing34+"'"}];
return false;
}
else {
if(data79.min !== undefined){
var data80 = data79.min;
var _errs189 = errors;
if(!(typeof data80 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/11/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/11/properties/roll/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(29 !== data80){
validate464.errors = [{instancePath:instancePath+"/dangers/11/roll/min",schemaPath:"#/properties/dangers/allOf/1/items/11/properties/roll/properties/min/const",keyword:"const",params:{allowedValue: 29},message:"must be equal to constant"}];
return false;
}
var valid49 = _errs189 === errors;
}
else {
var valid49 = true;
}
if(valid49){
if(data79.max !== undefined){
var data81 = data79.max;
var _errs191 = errors;
if(!(typeof data81 == "number")){
validate464.errors = [{instancePath:instancePath+"/dangers/11/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/11/properties/roll/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(30 !== data81){
validate464.errors = [{instancePath:instancePath+"/dangers/11/roll/max",schemaPath:"#/properties/dangers/allOf/1/items/11/properties/roll/properties/max/const",keyword:"const",params:{allowedValue: 30},message:"must be equal to constant"}];
return false;
}
var valid49 = _errs191 === errors;
}
else {
var valid49 = true;
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/11/roll",schemaPath:"#/properties/dangers/allOf/1/items/11/properties/roll/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers/11",schemaPath:"#/properties/dangers/allOf/1/items/11/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid25 = _errs184 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath+"/dangers",schemaPath:"#/properties/dangers/allOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid23 = _errs83 === errors;
}
var valid0 = _errs79 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs193 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs193 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs194 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs194 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs195 = errors;
if(typeof data._comment !== "string"){
validate464.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs195 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs197 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs197 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate464.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate464.errors = vErrors;
return errors === 0;
}

var schema732 = {"title":"Truth","type":"object","description":"A setting truth category.","required":["_id","type","name","dice","options","_source"],"properties":{"_id":{"$ref":"#/definitions/TruthId","description":"The unique Datasworn ID for this node."},"type":{"type":"string","const":"truth"},"name":{"$ref":"#/definitions/Label","description":"The primary name/label for this node."},"canonical_name":{"$ref":"#/definitions/Label","description":"The name of this node as it appears on the page in the book, if it's different from `name`."},"replaces":{"type":"array","description":"This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node.","items":{"$ref":"#/definitions/TruthIdWildcard"}},"color":{"$ref":"#/definitions/CssColor","description":"A thematic color associated with this node."},"icon":{"$ref":"#/definitions/SvgImageUrl","description":"An SVG icon associated with this collection."},"images":{"type":"array","items":{"$ref":"#/definitions/WebpImageUrl","description":"Extra images associated with this node."}},"dice":{"$ref":"#/definitions/DiceExpression","default":"1d100"},"options":{"type":"array","rollable":true,"items":{"$ref":"#/definitions/TruthOption"}},"your_character":{"$ref":"#/definitions/MarkdownString"},"suggestions":{"$ref":"#/definitions/Suggestions"},"tags":{"$ref":"#/definitions/Tags"},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."},"_source":{"$ref":"#/definitions/SourceInfo","description":"Attribution for the original source (such as a book or website) of this node, including the author and licensing information."},"factions":{"type":"array","description":"Prompts for factions related to this truth, like those presented in standard isles. This is presented as a single paragraph in the original text; Datasworn uses an array (one faction prompt per string) to represent them in order to make them more suitable for programmatic use.\n\nThis property is a placeholder and may see signficant changes in v0.2.0.","releaseStage":"experimental","items":{"$ref":"#/definitions/EntityPrompt"}}}};
var schema741 = {"title":"TruthOption","type":"object","required":["_id","roll","description","quest_starter"],"properties":{"_id":{"$ref":"#/definitions/TruthOptionId","description":"The unique Datasworn ID for this node."},"roll":{"$ref":"#/definitions/DiceRange"},"summary":{"$ref":"#/definitions/MarkdownString"},"description":{"$ref":"#/definitions/MarkdownString"},"quest_starter":{"$ref":"#/definitions/MarkdownString"},"oracles":{"title":"TruthOptionOracles","type":"object","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/EmbeddedOracleRollable","title":"TruthOptionOracleRollable"}}},"_comment":{"type":"string","description":"Implementation hints or other developer-facing comments on this node. These should be omitted when presenting the node for gameplay."}}};
var schema742 = {"title":"TruthOptionId","type":"string","description":"A unique ID representing a TruthOption object.","pattern":"^truth\\.option:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"};
var pattern345 = new RegExp("^truth\\.option:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$", "u");

function validate484(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracles === undefined){
data.oracles = {};
}
var missing0;
if(((((data._id === undefined) && (missing0 = "_id")) || ((data.roll === undefined) && (missing0 = "roll"))) || ((data.description === undefined) && (missing0 = "description"))) || ((data.quest_starter === undefined) && (missing0 = "quest_starter"))){
validate484.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern345.test(data0)){
validate484.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/TruthOptionId/pattern",keyword:"pattern",params:{pattern: "^truth\\.option:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"},message:"must match pattern \""+"^truth\\.option:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)\\.(\\d+)$"+"\""}];
return false;
}
}
else {
validate484.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/TruthOptionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.roll !== undefined){
var data1 = data.roll;
var _errs4 = errors;
var _errs5 = errors;
if(errors === _errs5){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
var missing1;
if(((data1.min === undefined) && (missing1 = "min")) || ((data1.max === undefined) && (missing1 = "max"))){
validate484.errors = [{instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
if(data1.min !== undefined){
var data2 = data1.min;
var _errs7 = errors;
if(!((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2)))){
validate484.errors = [{instancePath:instancePath+"/roll/min",schemaPath:"#/definitions/DiceRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid3 = _errs7 === errors;
}
else {
var valid3 = true;
}
if(valid3){
if(data1.max !== undefined){
var data3 = data1.max;
var _errs9 = errors;
if(!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))){
validate484.errors = [{instancePath:instancePath+"/roll/max",schemaPath:"#/definitions/DiceRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];
return false;
}
var valid3 = _errs9 === errors;
}
else {
var valid3 = true;
}
}
}
}
else {
validate484.errors = [{instancePath:instancePath+"/roll",schemaPath:"#/definitions/DiceRange/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.summary !== undefined){
var _errs11 = errors;
var _errs12 = errors;
if(errors === _errs12){
if(errors === _errs12){
if(!(typeof data.summary === "string")){
validate484.errors = [{instancePath:instancePath+"/summary",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(errors === _errs15){
if(!(typeof data.description === "string")){
validate484.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.quest_starter !== undefined){
var _errs17 = errors;
var _errs18 = errors;
if(errors === _errs18){
if(errors === _errs18){
if(!(typeof data.quest_starter === "string")){
validate484.errors = [{instancePath:instancePath+"/quest_starter",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data7 = data.oracles;
var _errs20 = errors;
if(errors === _errs20){
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
var valid7 = true;
for(var key0 in data7){
if(pattern3.test(key0)){
var _errs22 = errors;
if(!(validate255(data7[key0], {instancePath:instancePath+"/oracles/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data7,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate255.errors : vErrors.concat(validate255.errors);
errors = vErrors.length;
}
var valid7 = _errs22 === errors;
if(!valid7){
break;
}
}
}
}
else {
validate484.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs20 === errors;
if(valid0){
if(data._comment !== undefined){
var _errs23 = errors;
if(typeof data._comment !== "string"){
validate484.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate484.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate484.errors = vErrors;
return errors === 0;
}

var schema748 = {"title":"EntityPrompt","type":"object","description":"This type is a placeholder and may see signficant changes in v0.2.0.","releaseStage":"experimental","required":["text"],"properties":{"text":{"$ref":"#/definitions/MarkdownString"}}};

function validate490(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.text === undefined) && (missing0 = "text")){
validate490.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.text !== undefined){
var _errs2 = errors;
if(errors === _errs2){
if(errors === _errs2){
if(!(typeof data.text === "string")){
validate490.errors = [{instancePath:instancePath+"/text",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
}
}
}
else {
validate490.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate490.errors = vErrors;
return errors === 0;
}


function validate483(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.dice === undefined){
data.dice = "1d100";
}
var missing0;
if(((((((data._id === undefined) && (missing0 = "_id")) || ((data.type === undefined) && (missing0 = "type"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.dice === undefined) && (missing0 = "dice"))) || ((data.options === undefined) && (missing0 = "options"))) || ((data._source === undefined) && (missing0 = "_source"))){
validate483.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs1 = errors;
var _errs2 = errors;
if(errors === _errs2){
if(typeof data0 === "string"){
if(!pattern72.test(data0)){
validate483.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/TruthId/pattern",keyword:"pattern",params:{pattern: "^truth:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"},message:"must match pattern \""+"^truth:([a-z][a-z0-9_]{3,}\\/[a-z][a-z_]*)$"+"\""}];
return false;
}
}
else {
validate483.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/TruthId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data1 = data.type;
var _errs4 = errors;
if(typeof data1 !== "string"){
validate483.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("truth" !== data1){
validate483.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "truth"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
var _errs6 = errors;
if(typeof data.name !== "string"){
validate483.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.canonical_name !== undefined){
var _errs9 = errors;
if(typeof data.canonical_name !== "string"){
validate483.errors = [{instancePath:instancePath+"/canonical_name",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.replaces !== undefined){
var data4 = data.replaces;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid4 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var data5 = data4[i0];
var _errs14 = errors;
var _errs15 = errors;
if(errors === _errs15){
if(typeof data5 === "string"){
if(!pattern52.test(data5)){
validate483.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/TruthIdWildcard/pattern",keyword:"pattern",params:{pattern: "^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"},message:"must match pattern \""+"^truth:((?:[a-z][a-z0-9_]{3,}|\\*|\\*\\*)\\/[a-z][a-z_]*|\\/\\*|\\/\\*\\*)$"+"\""}];
return false;
}
}
else {
validate483.errors = [{instancePath:instancePath+"/replaces/" + i0,schemaPath:"#/definitions/TruthIdWildcard/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate483.errors = [{instancePath:instancePath+"/replaces",schemaPath:"#/properties/replaces/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.color !== undefined){
var _errs17 = errors;
if(typeof data.color !== "string"){
validate483.errors = [{instancePath:instancePath+"/color",schemaPath:"#/definitions/CssColor/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.icon !== undefined){
var data7 = data.icon;
var _errs20 = errors;
var _errs21 = errors;
if(errors === _errs21){
if(errors === _errs21){
if(typeof data7 === "string"){
if(!pattern15.test(data7)){
validate483.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.svg$"},message:"must match pattern \""+"\\.svg$"+"\""}];
return false;
}
}
else {
validate483.errors = [{instancePath:instancePath+"/icon",schemaPath:"#/definitions/SvgImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.images !== undefined){
var data8 = data.images;
var _errs23 = errors;
if(errors === _errs23){
if(Array.isArray(data8)){
var valid8 = true;
var len1 = data8.length;
for(var i1=0; i1<len1; i1++){
var data9 = data8[i1];
var _errs25 = errors;
var _errs26 = errors;
if(errors === _errs26){
if(errors === _errs26){
if(typeof data9 === "string"){
if(!pattern16.test(data9)){
validate483.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/pattern",keyword:"pattern",params:{pattern: "\\.webp$"},message:"must match pattern \""+"\\.webp$"+"\""}];
return false;
}
}
else {
validate483.errors = [{instancePath:instancePath+"/images/" + i1,schemaPath:"#/definitions/WebpImageUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid8 = _errs25 === errors;
if(!valid8){
break;
}
}
}
else {
validate483.errors = [{instancePath:instancePath+"/images",schemaPath:"#/properties/images/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data10 = data.dice;
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(typeof data10 === "string"){
if(!pattern22.test(data10)){
validate483.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/pattern",keyword:"pattern",params:{pattern: "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"},message:"must match pattern \""+"([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"+"\""}];
return false;
}
}
else {
validate483.errors = [{instancePath:instancePath+"/dice",schemaPath:"#/definitions/DiceExpression/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs28 === errors;
if(valid0){
if(data.options !== undefined){
var data11 = data.options;
var _errs31 = errors;
if(errors === _errs31){
if(Array.isArray(data11)){
var valid11 = true;
var len2 = data11.length;
for(var i2=0; i2<len2; i2++){
var _errs33 = errors;
if(!(validate484(data11[i2], {instancePath:instancePath+"/options/" + i2,parentData:data11,parentDataProperty:i2,rootData:rootData}))){
vErrors = vErrors === null ? validate484.errors : vErrors.concat(validate484.errors);
errors = vErrors.length;
}
var valid11 = _errs33 === errors;
if(!valid11){
break;
}
}
}
else {
validate483.errors = [{instancePath:instancePath+"/options",schemaPath:"#/properties/options/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.your_character !== undefined){
var _errs34 = errors;
var _errs35 = errors;
if(errors === _errs35){
if(errors === _errs35){
if(!(typeof data.your_character === "string")){
validate483.errors = [{instancePath:instancePath+"/your_character",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suggestions !== undefined){
var _errs37 = errors;
if(!(validate63(data.suggestions, {instancePath:instancePath+"/suggestions",parentData:data,parentDataProperty:"suggestions",rootData:rootData}))){
vErrors = vErrors === null ? validate63.errors : vErrors.concat(validate63.errors);
errors = vErrors.length;
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tags !== undefined){
var _errs38 = errors;
if(!(validate67(data.tags, {instancePath:instancePath+"/tags",parentData:data,parentDataProperty:"tags",rootData:rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._comment !== undefined){
var _errs39 = errors;
if(typeof data._comment !== "string"){
validate483.errors = [{instancePath:instancePath+"/_comment",schemaPath:"#/properties/_comment/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data._source !== undefined){
var _errs41 = errors;
if(!(validate90(data._source, {instancePath:instancePath+"/_source",parentData:data,parentDataProperty:"_source",rootData:rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.factions !== undefined){
var data18 = data.factions;
var _errs42 = errors;
if(errors === _errs42){
if(Array.isArray(data18)){
var valid13 = true;
var len3 = data18.length;
for(var i3=0; i3<len3; i3++){
var _errs44 = errors;
if(!(validate490(data18[i3], {instancePath:instancePath+"/factions/" + i3,parentData:data18,parentDataProperty:i3,rootData:rootData}))){
vErrors = vErrors === null ? validate490.errors : vErrors.concat(validate490.errors);
errors = vErrors.length;
}
var valid13 = _errs44 === errors;
if(!valid13){
break;
}
}
}
else {
validate483.errors = [{instancePath:instancePath+"/factions",schemaPath:"#/properties/factions/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate483.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate483.errors = vErrors;
return errors === 0;
}


function validate22(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracles === undefined){
data.oracles = {};
}
if(data.assets === undefined){
data.assets = {};
}
if(data.atlas === undefined){
data.atlas = {};
}
if(data.moves === undefined){
data.moves = {};
}
if(data.npcs === undefined){
data.npcs = {};
}
if(data.rarities === undefined){
data.rarities = {};
}
if(data.delve_sites === undefined){
data.delve_sites = {};
}
if(data.site_domains === undefined){
data.site_domains = {};
}
if(data.site_themes === undefined){
data.site_themes = {};
}
if(data.truths === undefined){
data.truths = {};
}
var missing0;
if(((((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.datasworn_version === undefined) && (missing0 = "datasworn_version"))) || ((data.type === undefined) && (missing0 = "type"))) || ((data.title === undefined) && (missing0 = "title"))) || ((data.authors === undefined) && (missing0 = "authors"))) || ((data.date === undefined) && (missing0 = "date"))) || ((data.license === undefined) && (missing0 = "license"))) || ((data.url === undefined) && (missing0 = "url"))) || ((data.rules === undefined) && (missing0 = "rules"))) || ((data.oracles === undefined) && (missing0 = "oracles"))) || ((data.assets === undefined) && (missing0 = "assets"))) || ((data.moves === undefined) && (missing0 = "moves"))){
validate22.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs2 = errors;
var _errs3 = errors;
if(errors === _errs3){
if(typeof data0 === "string"){
if(!pattern0.test(data0)){
validate22.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/RulesetId/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z0-9_]{3,}$"},message:"must match pattern \""+"^[a-z][a-z0-9_]{3,}$"+"\""}];
return false;
}
}
else {
validate22.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/RulesetId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.datasworn_version !== undefined){
var data1 = data.datasworn_version;
var _errs5 = errors;
if("0.1.0" !== data1){
validate22.errors = [{instancePath:instancePath+"/datasworn_version",schemaPath:"#/properties/datasworn_version/const",keyword:"const",params:{allowedValue: "0.1.0"},message:"must be equal to constant"}];
return false;
}
if(errors === _errs5){
if(typeof data1 === "string"){
if(!pattern1.test(data1)){
validate22.errors = [{instancePath:instancePath+"/datasworn_version",schemaPath:"#/properties/datasworn_version/pattern",keyword:"pattern",params:{pattern: "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"},message:"must match pattern \""+"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"+"\""}];
return false;
}
}
else {
validate22.errors = [{instancePath:instancePath+"/datasworn_version",schemaPath:"#/properties/datasworn_version/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data2 = data.type;
var _errs7 = errors;
if(typeof data2 !== "string"){
validate22.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("ruleset" !== data2){
validate22.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "ruleset"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.title !== undefined){
var _errs9 = errors;
if(typeof data.title !== "string"){
validate22.errors = [{instancePath:instancePath+"/title",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.authors !== undefined){
var data4 = data.authors;
var _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
if(data4.length < 1){
validate22.errors = [{instancePath:instancePath+"/authors",schemaPath:"#/properties/authors/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];
return false;
}
else {
var valid3 = true;
var len0 = data4.length;
for(var i0=0; i0<len0; i0++){
var _errs14 = errors;
if(!(validate23(data4[i0], {instancePath:instancePath+"/authors/" + i0,parentData:data4,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);
errors = vErrors.length;
}
var valid3 = _errs14 === errors;
if(!valid3){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/authors",schemaPath:"#/properties/authors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.date !== undefined){
var data6 = data.date;
var _errs15 = errors;
if(errors === _errs15){
if(errors === _errs15){
if(typeof data6 === "string"){
if(!pattern2.test(data6)){
validate22.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/pattern",keyword:"pattern",params:{pattern: "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},message:"must match pattern \""+"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"+"\""}];
return false;
}
}
else {
validate22.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.license !== undefined){
var data7 = data.license;
var _errs17 = errors;
var _errs18 = errors;
var valid4 = false;
var _errs19 = errors;
var _errs20 = errors;
if(errors === _errs20){
if(errors === _errs20){
if(!(typeof data7 === "string")){
var err0 = {instancePath:instancePath+"/license",schemaPath:"#/definitions/WebUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
}
var _valid0 = _errs19 === errors;
valid4 = valid4 || _valid0;
if(!valid4){
var _errs22 = errors;
if(data7 !== null){
var err1 = {instancePath:instancePath+"/license",schemaPath:"#/properties/license/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs22 === errors;
valid4 = valid4 || _valid0;
}
if(!valid4){
var err2 = {instancePath:instancePath+"/license",schemaPath:"#/properties/license/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate22.errors = vErrors;
return false;
}
else {
errors = _errs18;
if(vErrors !== null){
if(_errs18){
vErrors.length = _errs18;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.url !== undefined){
var _errs24 = errors;
var _errs25 = errors;
if(errors === _errs25){
if(errors === _errs25){
if(!(typeof data.url === "string")){
validate22.errors = [{instancePath:instancePath+"/url",schemaPath:"#/definitions/WebUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rules !== undefined){
var _errs27 = errors;
if(!(validate25(data.rules, {instancePath:instancePath+"/rules",parentData:data,parentDataProperty:"rules",rootData:rootData}))){
vErrors = vErrors === null ? validate25.errors : vErrors.concat(validate25.errors);
errors = vErrors.length;
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs28 = errors;
var _errs29 = errors;
if(errors === _errs29){
if(errors === _errs29){
if(!(typeof data.description === "string")){
validate22.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data11 = data.oracles;
var _errs31 = errors;
if(errors === _errs31){
if(data11 && typeof data11 == "object" && !Array.isArray(data11)){
var valid8 = true;
for(var key0 in data11){
if(pattern3.test(key0)){
var _errs33 = errors;
if(!(validate58(data11[key0], {instancePath:instancePath+"/oracles/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data11,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate58.errors : vErrors.concat(validate58.errors);
errors = vErrors.length;
}
var valid8 = _errs33 === errors;
if(!valid8){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs31 === errors;
if(valid0){
var data13 = data.assets;
var _errs34 = errors;
if(errors === _errs34){
if(data13 && typeof data13 == "object" && !Array.isArray(data13)){
var valid9 = true;
for(var key1 in data13){
if(pattern3.test(key1)){
var _errs36 = errors;
if(!(validate168(data13[key1], {instancePath:instancePath+"/assets/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data13,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate168.errors : vErrors.concat(validate168.errors);
errors = vErrors.length;
}
var valid9 = _errs36 === errors;
if(!valid9){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
if(valid0){
var data15 = data.atlas;
var _errs37 = errors;
if(errors === _errs37){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
var valid10 = true;
for(var key2 in data15){
if(pattern3.test(key2)){
var _errs39 = errors;
if(!(validate372(data15[key2], {instancePath:instancePath+"/atlas/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data15,parentDataProperty:key2,rootData:rootData}))){
vErrors = vErrors === null ? validate372.errors : vErrors.concat(validate372.errors);
errors = vErrors.length;
}
var valid10 = _errs39 === errors;
if(!valid10){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/atlas",schemaPath:"#/properties/atlas/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs37 === errors;
if(valid0){
var data17 = data.moves;
var _errs40 = errors;
if(errors === _errs40){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
var valid11 = true;
for(var key3 in data17){
if(pattern3.test(key3)){
var _errs42 = errors;
if(!(validate382(data17[key3], {instancePath:instancePath+"/moves/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data17,parentDataProperty:key3,rootData:rootData}))){
vErrors = vErrors === null ? validate382.errors : vErrors.concat(validate382.errors);
errors = vErrors.length;
}
var valid11 = _errs42 === errors;
if(!valid11){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/moves",schemaPath:"#/properties/moves/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs40 === errors;
if(valid0){
var data19 = data.npcs;
var _errs43 = errors;
if(errors === _errs43){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
var valid12 = true;
for(var key4 in data19){
if(pattern3.test(key4)){
var _errs45 = errors;
if(!(validate421(data19[key4], {instancePath:instancePath+"/npcs/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data19,parentDataProperty:key4,rootData:rootData}))){
vErrors = vErrors === null ? validate421.errors : vErrors.concat(validate421.errors);
errors = vErrors.length;
}
var valid12 = _errs45 === errors;
if(!valid12){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/npcs",schemaPath:"#/properties/npcs/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs43 === errors;
if(valid0){
var data21 = data.rarities;
var _errs46 = errors;
if(errors === _errs46){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
var valid13 = true;
for(var key5 in data21){
if(pattern3.test(key5)){
var _errs48 = errors;
if(!(validate433(data21[key5], {instancePath:instancePath+"/rarities/" + key5.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data21,parentDataProperty:key5,rootData:rootData}))){
vErrors = vErrors === null ? validate433.errors : vErrors.concat(validate433.errors);
errors = vErrors.length;
}
var valid13 = _errs48 === errors;
if(!valid13){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/rarities",schemaPath:"#/properties/rarities/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs46 === errors;
if(valid0){
var data23 = data.delve_sites;
var _errs49 = errors;
if(errors === _errs49){
if(data23 && typeof data23 == "object" && !Array.isArray(data23)){
var valid14 = true;
for(var key6 in data23){
if(pattern3.test(key6)){
var _errs51 = errors;
if(!(validate438(data23[key6], {instancePath:instancePath+"/delve_sites/" + key6.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data23,parentDataProperty:key6,rootData:rootData}))){
vErrors = vErrors === null ? validate438.errors : vErrors.concat(validate438.errors);
errors = vErrors.length;
}
var valid14 = _errs51 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/delve_sites",schemaPath:"#/properties/delve_sites/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs49 === errors;
if(valid0){
var data25 = data.site_domains;
var _errs52 = errors;
if(errors === _errs52){
if(data25 && typeof data25 == "object" && !Array.isArray(data25)){
var valid15 = true;
for(var key7 in data25){
if(pattern3.test(key7)){
var _errs54 = errors;
if(!(validate445(data25[key7], {instancePath:instancePath+"/site_domains/" + key7.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data25,parentDataProperty:key7,rootData:rootData}))){
vErrors = vErrors === null ? validate445.errors : vErrors.concat(validate445.errors);
errors = vErrors.length;
}
var valid15 = _errs54 === errors;
if(!valid15){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/site_domains",schemaPath:"#/properties/site_domains/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs52 === errors;
if(valid0){
var data27 = data.site_themes;
var _errs55 = errors;
if(errors === _errs55){
if(data27 && typeof data27 == "object" && !Array.isArray(data27)){
var valid16 = true;
for(var key8 in data27){
if(pattern3.test(key8)){
var _errs57 = errors;
if(!(validate464(data27[key8], {instancePath:instancePath+"/site_themes/" + key8.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data27,parentDataProperty:key8,rootData:rootData}))){
vErrors = vErrors === null ? validate464.errors : vErrors.concat(validate464.errors);
errors = vErrors.length;
}
var valid16 = _errs57 === errors;
if(!valid16){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/site_themes",schemaPath:"#/properties/site_themes/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs55 === errors;
if(valid0){
var data29 = data.truths;
var _errs58 = errors;
if(errors === _errs58){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
var valid17 = true;
for(var key9 in data29){
if(pattern3.test(key9)){
var _errs60 = errors;
if(!(validate483(data29[key9], {instancePath:instancePath+"/truths/" + key9.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data29,parentDataProperty:key9,rootData:rootData}))){
vErrors = vErrors === null ? validate483.errors : vErrors.concat(validate483.errors);
errors = vErrors.length;
}
var valid17 = _errs60 === errors;
if(!valid17){
break;
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/truths",schemaPath:"#/properties/truths/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate22.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate22.errors = vErrors;
return errors === 0;
}

var schema750 = {"title":"Expansion","type":"object","description":"A Datasworn package that relies on an external package to provide its ruleset.","required":["_id","datasworn_version","type","ruleset","title","authors","date","license","url","oracles","assets","moves"],"properties":{"_id":{"$ref":"#/definitions/ExpansionId"},"datasworn_version":{"type":"string","description":"The version of the Datasworn format used by this data.","const":"0.1.0","pattern":"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"},"type":{"type":"string","const":"expansion"},"ruleset":{"$ref":"#/definitions/RulesetId"},"title":{"$ref":"#/definitions/Label","description":"The title of the source document.","examples":["Ironsworn Rulebook","Ironsworn Assets Master Set","Ironsworn: Delve","Ironsworn: Starforged Rulebook","Ironsworn: Starforged Assets","Sundered Isles"]},"authors":{"type":"array","description":"Lists authors credited by the source material.","items":{"$ref":"#/definitions/AuthorInfo"},"minItems":1},"date":{"type":"string","description":"The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.","remarks":"You may prefer to deserialize this as a Date object.","format":"date","pattern":"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},"license":{"description":"An URL pointing to the location where this content's license can be found.\n\nA `null` here indicates that the content provides __no__ license, and is not intended for redistribution.","examples":["https://creativecommons.org/licenses/by/4.0","https://creativecommons.org/licenses/by-nc-sa/4.0"],"anyOf":[{"$ref":"#/definitions/WebUrl"},{"type":"null"}]},"url":{"$ref":"#/definitions/WebUrl","description":"A URL where the source document is available.","examples":["https://ironswornrpg.com"]},"rules":{"$ref":"#/definitions/RulesExpansion"},"description":{"$ref":"#/definitions/MarkdownString"},"oracles":{"type":"object","description":"A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/OracleTablesCollection"}}},"assets":{"type":"object","description":"A dictionary object containing asset collections, which contain assets.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AssetCollection"}}},"atlas":{"type":"object","description":"A dictionary object containing atlas collections, which contain atlas entries.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/AtlasCollection"}}},"moves":{"type":"object","description":"A dictionary object containing move categories, which contain moves.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/MoveCategory"}}},"npcs":{"type":"object","description":"A dictionary object containing NPC collections, which contain NPCs.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/NpcCollection"}}},"rarities":{"type":"object","description":"A dictionary object containing rarities, like those presented in Ironsworn: Delve.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Rarity"}}},"delve_sites":{"type":"object","description":"A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSite"}}},"site_domains":{"type":"object","description":"A dictionary object containing delve site domains.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteDomain"}}},"site_themes":{"type":"object","description":"A dictionary object containing delve site themes.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/DelveSiteTheme"}}},"truths":{"type":"object","description":"A dictionary object of truth categories.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/Truth"}}}},"additionalProperties":{}};
var schema751 = {"title":"ExpansionId","type":"string","description":"The ID of a Datasworn package that relies on an external package to provide its ruleset.","examples":["delve","sundered_isles"],"pattern":"^[a-z][a-z0-9_]{3,}$"};
var schema756 = {"title":"RulesExpansion","type":"object","description":"Describes rules for player characters in this ruleset, such as stats and condition meters.","releaseStage":"experimental","properties":{"condition_meters":{"type":"object","description":"Describes the standard condition meters used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ConditionMeterRule"}}},"stats":{"type":"object","description":"Describes the standard stats used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/StatRule"}}},"impacts":{"type":"object","description":"Describes the standard impacts/debilities used by player characters in this ruleset.","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/ImpactCategory"}}},"special_tracks":{"type":"object","description":"Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged).","remarks":"Deserialize as a dictionary object.","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/SpecialTrackRule"}}},"tags":{"type":"object","remarks":"Deserialize as a dictionary object.","releaseStage":"experimental","default":{},"patternProperties":{"^[a-z][a-z_]*$":{"$ref":"#/definitions/TagRule"}}}}};

function validate496(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.condition_meters === undefined){
data.condition_meters = {};
}
if(data.stats === undefined){
data.stats = {};
}
if(data.impacts === undefined){
data.impacts = {};
}
if(data.special_tracks === undefined){
data.special_tracks = {};
}
if(data.tags === undefined){
data.tags = {};
}
var data0 = data.condition_meters;
var _errs1 = errors;
if(errors === _errs1){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
var valid1 = true;
for(var key0 in data0){
if(pattern3.test(key0)){
var _errs3 = errors;
if(!(validate26(data0[key0], {instancePath:instancePath+"/condition_meters/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data0,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate26.errors : vErrors.concat(validate26.errors);
errors = vErrors.length;
}
var valid1 = _errs3 === errors;
if(!valid1){
break;
}
}
}
}
else {
validate496.errors = [{instancePath:instancePath+"/condition_meters",schemaPath:"#/properties/condition_meters/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs1 === errors;
if(valid0){
var data2 = data.stats;
var _errs4 = errors;
if(errors === _errs4){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
var valid2 = true;
for(var key1 in data2){
if(pattern3.test(key1)){
var _errs6 = errors;
if(!(validate28(data2[key1], {instancePath:instancePath+"/stats/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data2,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors);
errors = vErrors.length;
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
}
else {
validate496.errors = [{instancePath:instancePath+"/stats",schemaPath:"#/properties/stats/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
if(valid0){
var data4 = data.impacts;
var _errs7 = errors;
if(errors === _errs7){
if(data4 && typeof data4 == "object" && !Array.isArray(data4)){
var valid3 = true;
for(var key2 in data4){
if(pattern3.test(key2)){
var _errs9 = errors;
if(!(validate30(data4[key2], {instancePath:instancePath+"/impacts/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data4,parentDataProperty:key2,rootData:rootData}))){
vErrors = vErrors === null ? validate30.errors : vErrors.concat(validate30.errors);
errors = vErrors.length;
}
var valid3 = _errs9 === errors;
if(!valid3){
break;
}
}
}
}
else {
validate496.errors = [{instancePath:instancePath+"/impacts",schemaPath:"#/properties/impacts/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs7 === errors;
if(valid0){
var data6 = data.special_tracks;
var _errs10 = errors;
if(errors === _errs10){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
var valid4 = true;
for(var key3 in data6){
if(pattern3.test(key3)){
var _errs12 = errors;
if(!(validate34(data6[key3], {instancePath:instancePath+"/special_tracks/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data6,parentDataProperty:key3,rootData:rootData}))){
vErrors = vErrors === null ? validate34.errors : vErrors.concat(validate34.errors);
errors = vErrors.length;
}
var valid4 = _errs12 === errors;
if(!valid4){
break;
}
}
}
}
else {
validate496.errors = [{instancePath:instancePath+"/special_tracks",schemaPath:"#/properties/special_tracks/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
if(valid0){
var data8 = data.tags;
var _errs13 = errors;
if(errors === _errs13){
if(data8 && typeof data8 == "object" && !Array.isArray(data8)){
var valid5 = true;
for(var key4 in data8){
if(pattern3.test(key4)){
var _errs15 = errors;
if(!(validate36(data8[key4], {instancePath:instancePath+"/tags/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data8,parentDataProperty:key4,rootData:rootData}))){
vErrors = vErrors === null ? validate36.errors : vErrors.concat(validate36.errors);
errors = vErrors.length;
}
var valid5 = _errs15 === errors;
if(!valid5){
break;
}
}
}
}
else {
validate496.errors = [{instancePath:instancePath+"/tags",schemaPath:"#/properties/tags/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs13 === errors;
}
}
}
}
}
else {
validate496.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate496.errors = vErrors;
return errors === 0;
}


function validate494(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.oracles === undefined){
data.oracles = {};
}
if(data.assets === undefined){
data.assets = {};
}
if(data.atlas === undefined){
data.atlas = {};
}
if(data.moves === undefined){
data.moves = {};
}
if(data.npcs === undefined){
data.npcs = {};
}
if(data.rarities === undefined){
data.rarities = {};
}
if(data.delve_sites === undefined){
data.delve_sites = {};
}
if(data.site_domains === undefined){
data.site_domains = {};
}
if(data.site_themes === undefined){
data.site_themes = {};
}
if(data.truths === undefined){
data.truths = {};
}
var missing0;
if(((((((((((((data._id === undefined) && (missing0 = "_id")) || ((data.datasworn_version === undefined) && (missing0 = "datasworn_version"))) || ((data.type === undefined) && (missing0 = "type"))) || ((data.ruleset === undefined) && (missing0 = "ruleset"))) || ((data.title === undefined) && (missing0 = "title"))) || ((data.authors === undefined) && (missing0 = "authors"))) || ((data.date === undefined) && (missing0 = "date"))) || ((data.license === undefined) && (missing0 = "license"))) || ((data.url === undefined) && (missing0 = "url"))) || ((data.oracles === undefined) && (missing0 = "oracles"))) || ((data.assets === undefined) && (missing0 = "assets"))) || ((data.moves === undefined) && (missing0 = "moves"))){
validate494.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data._id !== undefined){
var data0 = data._id;
var _errs2 = errors;
var _errs3 = errors;
if(errors === _errs3){
if(typeof data0 === "string"){
if(!pattern0.test(data0)){
validate494.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/ExpansionId/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z0-9_]{3,}$"},message:"must match pattern \""+"^[a-z][a-z0-9_]{3,}$"+"\""}];
return false;
}
}
else {
validate494.errors = [{instancePath:instancePath+"/_id",schemaPath:"#/definitions/ExpansionId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.datasworn_version !== undefined){
var data1 = data.datasworn_version;
var _errs5 = errors;
if("0.1.0" !== data1){
validate494.errors = [{instancePath:instancePath+"/datasworn_version",schemaPath:"#/properties/datasworn_version/const",keyword:"const",params:{allowedValue: "0.1.0"},message:"must be equal to constant"}];
return false;
}
if(errors === _errs5){
if(typeof data1 === "string"){
if(!pattern1.test(data1)){
validate494.errors = [{instancePath:instancePath+"/datasworn_version",schemaPath:"#/properties/datasworn_version/pattern",keyword:"pattern",params:{pattern: "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"},message:"must match pattern \""+"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"+"\""}];
return false;
}
}
else {
validate494.errors = [{instancePath:instancePath+"/datasworn_version",schemaPath:"#/properties/datasworn_version/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
var data2 = data.type;
var _errs7 = errors;
if(typeof data2 !== "string"){
validate494.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("expansion" !== data2){
validate494.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/const",keyword:"const",params:{allowedValue: "expansion"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ruleset !== undefined){
var data3 = data.ruleset;
var _errs9 = errors;
var _errs10 = errors;
if(errors === _errs10){
if(typeof data3 === "string"){
if(!pattern0.test(data3)){
validate494.errors = [{instancePath:instancePath+"/ruleset",schemaPath:"#/definitions/RulesetId/pattern",keyword:"pattern",params:{pattern: "^[a-z][a-z0-9_]{3,}$"},message:"must match pattern \""+"^[a-z][a-z0-9_]{3,}$"+"\""}];
return false;
}
}
else {
validate494.errors = [{instancePath:instancePath+"/ruleset",schemaPath:"#/definitions/RulesetId/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.title !== undefined){
var _errs12 = errors;
if(typeof data.title !== "string"){
validate494.errors = [{instancePath:instancePath+"/title",schemaPath:"#/definitions/Label/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.authors !== undefined){
var data5 = data.authors;
var _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data5)){
if(data5.length < 1){
validate494.errors = [{instancePath:instancePath+"/authors",schemaPath:"#/properties/authors/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];
return false;
}
else {
var valid4 = true;
var len0 = data5.length;
for(var i0=0; i0<len0; i0++){
var _errs17 = errors;
if(!(validate23(data5[i0], {instancePath:instancePath+"/authors/" + i0,parentData:data5,parentDataProperty:i0,rootData:rootData}))){
vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);
errors = vErrors.length;
}
var valid4 = _errs17 === errors;
if(!valid4){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/authors",schemaPath:"#/properties/authors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.date !== undefined){
var data7 = data.date;
var _errs18 = errors;
if(errors === _errs18){
if(errors === _errs18){
if(typeof data7 === "string"){
if(!pattern2.test(data7)){
validate494.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/pattern",keyword:"pattern",params:{pattern: "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"},message:"must match pattern \""+"[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))"+"\""}];
return false;
}
}
else {
validate494.errors = [{instancePath:instancePath+"/date",schemaPath:"#/properties/date/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.license !== undefined){
var data8 = data.license;
var _errs20 = errors;
var _errs21 = errors;
var valid5 = false;
var _errs22 = errors;
var _errs23 = errors;
if(errors === _errs23){
if(errors === _errs23){
if(!(typeof data8 === "string")){
var err0 = {instancePath:instancePath+"/license",schemaPath:"#/definitions/WebUrl/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
}
var _valid0 = _errs22 === errors;
valid5 = valid5 || _valid0;
if(!valid5){
var _errs25 = errors;
if(data8 !== null){
var err1 = {instancePath:instancePath+"/license",schemaPath:"#/properties/license/anyOf/1/type",keyword:"type",params:{type: "null"},message:"must be null"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs25 === errors;
valid5 = valid5 || _valid0;
}
if(!valid5){
var err2 = {instancePath:instancePath+"/license",schemaPath:"#/properties/license/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate494.errors = vErrors;
return false;
}
else {
errors = _errs21;
if(vErrors !== null){
if(_errs21){
vErrors.length = _errs21;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.url !== undefined){
var _errs27 = errors;
var _errs28 = errors;
if(errors === _errs28){
if(errors === _errs28){
if(!(typeof data.url === "string")){
validate494.errors = [{instancePath:instancePath+"/url",schemaPath:"#/definitions/WebUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rules !== undefined){
var _errs30 = errors;
if(!(validate496(data.rules, {instancePath:instancePath+"/rules",parentData:data,parentDataProperty:"rules",rootData:rootData}))){
vErrors = vErrors === null ? validate496.errors : vErrors.concat(validate496.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
var _errs31 = errors;
var _errs32 = errors;
if(errors === _errs32){
if(errors === _errs32){
if(!(typeof data.description === "string")){
validate494.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/MarkdownString/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
var data12 = data.oracles;
var _errs34 = errors;
if(errors === _errs34){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
var valid9 = true;
for(var key0 in data12){
if(pattern3.test(key0)){
var _errs36 = errors;
if(!(validate58(data12[key0], {instancePath:instancePath+"/oracles/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data12,parentDataProperty:key0,rootData:rootData}))){
vErrors = vErrors === null ? validate58.errors : vErrors.concat(validate58.errors);
errors = vErrors.length;
}
var valid9 = _errs36 === errors;
if(!valid9){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/oracles",schemaPath:"#/properties/oracles/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
if(valid0){
var data14 = data.assets;
var _errs37 = errors;
if(errors === _errs37){
if(data14 && typeof data14 == "object" && !Array.isArray(data14)){
var valid10 = true;
for(var key1 in data14){
if(pattern3.test(key1)){
var _errs39 = errors;
if(!(validate168(data14[key1], {instancePath:instancePath+"/assets/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data14,parentDataProperty:key1,rootData:rootData}))){
vErrors = vErrors === null ? validate168.errors : vErrors.concat(validate168.errors);
errors = vErrors.length;
}
var valid10 = _errs39 === errors;
if(!valid10){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/assets",schemaPath:"#/properties/assets/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs37 === errors;
if(valid0){
var data16 = data.atlas;
var _errs40 = errors;
if(errors === _errs40){
if(data16 && typeof data16 == "object" && !Array.isArray(data16)){
var valid11 = true;
for(var key2 in data16){
if(pattern3.test(key2)){
var _errs42 = errors;
if(!(validate372(data16[key2], {instancePath:instancePath+"/atlas/" + key2.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data16,parentDataProperty:key2,rootData:rootData}))){
vErrors = vErrors === null ? validate372.errors : vErrors.concat(validate372.errors);
errors = vErrors.length;
}
var valid11 = _errs42 === errors;
if(!valid11){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/atlas",schemaPath:"#/properties/atlas/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs40 === errors;
if(valid0){
var data18 = data.moves;
var _errs43 = errors;
if(errors === _errs43){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
var valid12 = true;
for(var key3 in data18){
if(pattern3.test(key3)){
var _errs45 = errors;
if(!(validate382(data18[key3], {instancePath:instancePath+"/moves/" + key3.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data18,parentDataProperty:key3,rootData:rootData}))){
vErrors = vErrors === null ? validate382.errors : vErrors.concat(validate382.errors);
errors = vErrors.length;
}
var valid12 = _errs45 === errors;
if(!valid12){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/moves",schemaPath:"#/properties/moves/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs43 === errors;
if(valid0){
var data20 = data.npcs;
var _errs46 = errors;
if(errors === _errs46){
if(data20 && typeof data20 == "object" && !Array.isArray(data20)){
var valid13 = true;
for(var key4 in data20){
if(pattern3.test(key4)){
var _errs48 = errors;
if(!(validate421(data20[key4], {instancePath:instancePath+"/npcs/" + key4.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data20,parentDataProperty:key4,rootData:rootData}))){
vErrors = vErrors === null ? validate421.errors : vErrors.concat(validate421.errors);
errors = vErrors.length;
}
var valid13 = _errs48 === errors;
if(!valid13){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/npcs",schemaPath:"#/properties/npcs/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs46 === errors;
if(valid0){
var data22 = data.rarities;
var _errs49 = errors;
if(errors === _errs49){
if(data22 && typeof data22 == "object" && !Array.isArray(data22)){
var valid14 = true;
for(var key5 in data22){
if(pattern3.test(key5)){
var _errs51 = errors;
if(!(validate433(data22[key5], {instancePath:instancePath+"/rarities/" + key5.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data22,parentDataProperty:key5,rootData:rootData}))){
vErrors = vErrors === null ? validate433.errors : vErrors.concat(validate433.errors);
errors = vErrors.length;
}
var valid14 = _errs51 === errors;
if(!valid14){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/rarities",schemaPath:"#/properties/rarities/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs49 === errors;
if(valid0){
var data24 = data.delve_sites;
var _errs52 = errors;
if(errors === _errs52){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
var valid15 = true;
for(var key6 in data24){
if(pattern3.test(key6)){
var _errs54 = errors;
if(!(validate438(data24[key6], {instancePath:instancePath+"/delve_sites/" + key6.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data24,parentDataProperty:key6,rootData:rootData}))){
vErrors = vErrors === null ? validate438.errors : vErrors.concat(validate438.errors);
errors = vErrors.length;
}
var valid15 = _errs54 === errors;
if(!valid15){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/delve_sites",schemaPath:"#/properties/delve_sites/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs52 === errors;
if(valid0){
var data26 = data.site_domains;
var _errs55 = errors;
if(errors === _errs55){
if(data26 && typeof data26 == "object" && !Array.isArray(data26)){
var valid16 = true;
for(var key7 in data26){
if(pattern3.test(key7)){
var _errs57 = errors;
if(!(validate445(data26[key7], {instancePath:instancePath+"/site_domains/" + key7.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data26,parentDataProperty:key7,rootData:rootData}))){
vErrors = vErrors === null ? validate445.errors : vErrors.concat(validate445.errors);
errors = vErrors.length;
}
var valid16 = _errs57 === errors;
if(!valid16){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/site_domains",schemaPath:"#/properties/site_domains/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs55 === errors;
if(valid0){
var data28 = data.site_themes;
var _errs58 = errors;
if(errors === _errs58){
if(data28 && typeof data28 == "object" && !Array.isArray(data28)){
var valid17 = true;
for(var key8 in data28){
if(pattern3.test(key8)){
var _errs60 = errors;
if(!(validate464(data28[key8], {instancePath:instancePath+"/site_themes/" + key8.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data28,parentDataProperty:key8,rootData:rootData}))){
vErrors = vErrors === null ? validate464.errors : vErrors.concat(validate464.errors);
errors = vErrors.length;
}
var valid17 = _errs60 === errors;
if(!valid17){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/site_themes",schemaPath:"#/properties/site_themes/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
if(valid0){
var data30 = data.truths;
var _errs61 = errors;
if(errors === _errs61){
if(data30 && typeof data30 == "object" && !Array.isArray(data30)){
var valid18 = true;
for(var key9 in data30){
if(pattern3.test(key9)){
var _errs63 = errors;
if(!(validate483(data30[key9], {instancePath:instancePath+"/truths/" + key9.replace(/~/g, "~0").replace(/\//g, "~1"),parentData:data30,parentDataProperty:key9,rootData:rootData}))){
vErrors = vErrors === null ? validate483.errors : vErrors.concat(validate483.errors);
errors = vErrors.length;
}
var valid18 = _errs63 === errors;
if(!valid18){
break;
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath+"/truths",schemaPath:"#/properties/truths/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs61 === errors;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate494.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate494.errors = vErrors;
return errors === 0;
}


function validate21(data, valCxt){
"use strict"; ;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
var _errs1 = errors;
var _errs2 = errors;
var valid1 = true;
var _errs3 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type !== undefined){
var data0 = data.type;
if(typeof data0 !== "string"){
var err0 = {};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if("ruleset" !== data0){
var err1 = {};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
}
}
var _valid0 = _errs3 === errors;
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
if(_valid0){
var _errs6 = errors;
if(!(validate22(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid1 = _valid0;
}
if(!valid1){
var err2 = {instancePath:instancePath,schemaPath:"#/allOf/0/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate21.errors = vErrors;
return false;
}
var valid0 = _errs1 === errors;
if(valid0){
var _errs7 = errors;
var _errs8 = errors;
var valid3 = true;
var _errs9 = errors;
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.type !== undefined){
var data1 = data.type;
if(typeof data1 !== "string"){
var err3 = {};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if("expansion" !== data1){
var err4 = {};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
}
var _valid1 = _errs9 === errors;
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
if(_valid1){
var _errs12 = errors;
if(!(validate494(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate494.errors : vErrors.concat(validate494.errors);
errors = vErrors.length;
}
var _valid1 = _errs12 === errors;
valid3 = _valid1;
}
if(!valid3){
var err5 = {instancePath:instancePath,schemaPath:"#/allOf/1/if",keyword:"if",params:{failingKeyword: "then"},message:"must match \"then\" schema"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate21.errors = vErrors;
return false;
}
var valid0 = _errs7 === errors;
}
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
var missing0;
if((data.type === undefined) && (missing0 = "type")){
validate21.errors = [{instancePath:instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.type !== undefined){
var data2 = data.type;
if(!((data2 === "ruleset") || (data2 === "expansion"))){
validate21.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/enum",keyword:"enum",params:{allowedValues: schema23.properties.type.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate21.errors = [{instancePath:instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate21.errors = vErrors;
return errors === 0;
}


function validate20(data, valCxt){
"use strict"; /*# sourceURL="https://ironswornrpg.com/datasworn.schema.json" */;
if(valCxt){
var instancePath = valCxt.instancePath;
var parentData = valCxt.parentData;
var parentDataProperty = valCxt.parentDataProperty;
var rootData = valCxt.rootData;
}
else {
var instancePath = "";
var parentData = undefined;
var parentDataProperty = undefined;
var rootData = data;
}
var vErrors = null;
var errors = 0;
if(!(validate21(data, {instancePath:instancePath,parentData:parentData,parentDataProperty:parentDataProperty,rootData:rootData}))){
vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
errors = vErrors.length;
}
validate20.errors = vErrors;
return errors === 0;
}
