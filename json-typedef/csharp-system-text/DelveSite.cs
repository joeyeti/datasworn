// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Datasworn
{
    /// <summary>
    /// A delve site with a theme, domain, and denizens.
    /// </summary>
    public class DelveSite
    {
        /// <summary>
        /// The unique Datasworn ID for this node.
        /// </summary>
        [JsonPropertyName("_id")]
        public DelveSiteId Id { get; set; }

        /// <summary>
        /// Attribution for the original source (such as a book or website) of
        /// this node, including the author and licensing information.
        /// </summary>
        [JsonPropertyName("_source")]
        public SourceInfo Source { get; set; }

        /// <summary>
        /// Represents the delve site's denizen matrix as an array of objects.
        /// </summary>
        [JsonPropertyName("denizens")]
        public IList<DelveSiteDenizen> Denizens { get; set; }

        [JsonPropertyName("description")]
        public MarkdownString Description { get; set; }

        /// <summary>
        /// The ID of the site's DelveSiteDomain card.
        /// </summary>
        [JsonPropertyName("domain")]
        public DelveSiteDomainId Domain { get; set; }

        /// <summary>
        /// The primary name/label for this node.
        /// </summary>
        [JsonPropertyName("name")]
        public Label Name { get; set; }

        [JsonPropertyName("rank")]
        public ChallengeRank Rank { get; set; }

        /// <summary>
        /// The ID of the site's DelveSiteTheme card.
        /// </summary>
        [JsonPropertyName("theme")]
        public DelveSiteThemeId Theme { get; set; }

        [JsonPropertyName("type")]
        public DelveSiteType Type_ { get; set; }

        [JsonPropertyName("_comment")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Documentation? Comment { get; set; }

        /// <summary>
        /// The name of this node as it appears on the page in the book, if it's
        /// different from `name`.
        /// </summary>
        [JsonPropertyName("canonical_name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Label? CanonicalName { get; set; }

        /// <summary>
        /// A thematic color associated with this node.
        /// </summary>
        [JsonPropertyName("color")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public CssColor? Color { get; set; }

        /// <summary>
        /// An additional theme or domain card ID, for use with optional rules
        /// in Ironsworn: Delve.
        /// </summary>
        [JsonPropertyName("extra_card")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public string ExtraCard { get; set; }

        /// <summary>
        /// An SVG icon associated with this collection.
        /// </summary>
        [JsonPropertyName("icon")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public SvgImageUrl? Icon { get; set; }

        [JsonPropertyName("images")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public IList<WebpImageUrl> Images { get; set; }

        /// <summary>
        /// The ID of an atlas entry representing the region in which this delve
        /// site is located.
        /// </summary>
        [JsonPropertyName("region")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public AtlasEntryId? Region { get; set; }

        /// <summary>
        /// This node replaces all nodes that match these wildcards. References
        /// to the replaced nodes can be considered equivalent to this node.
        /// </summary>
        [JsonPropertyName("replaces")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public IList<DelveSiteIdWildcard> Replaces { get; set; }

        [JsonPropertyName("suggestions")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Suggestions? Suggestions { get; set; }

        [JsonPropertyName("tags")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public Tags? Tags { get; set; }
    }
}
