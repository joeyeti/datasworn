// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Datasworn;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.List;

/**
 * A setting truth category.
 */
@JsonSerialize
public class Truth {
    @JsonProperty("_id")
    private TruthId id;

    @JsonProperty("_source")
    private SourceInfo source;

    @JsonProperty("dice")
    private DiceExpression dice;

    @JsonProperty("name")
    private Label name;

    @JsonProperty("options")
    private List<TruthOption> options;

    @JsonProperty("type")
    private TruthType type;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("_comment")
    private Documentation comment;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("canonical_name")
    private Label canonicalName;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("color")
    private CssColor color;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("factions")
    private List<EntityPrompt> factions;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("icon")
    private SvgImageUrl icon;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("images")
    private List<WebpImageUrl> images;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("replaces")
    private List<TruthIdWildcard> replaces;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("suggestions")
    private Suggestions suggestions;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("tags")
    private Tags tags;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("your_character")
    private MarkdownString yourCharacter;

    public Truth() {
    }

    /**
     * Getter for id.<p>
     * The unique Datasworn ID for this node.
     */
    public TruthId getId() {
        return id;
    }

    /**
     * Setter for id.<p>
     * The unique Datasworn ID for this node.
     */
    public void setId(TruthId id) {
        this.id = id;
    }

    /**
     * Getter for source.<p>
     * Attribution for the original source (such as a book or website) of this
     * node, including the author and licensing information.
     */
    public SourceInfo getSource() {
        return source;
    }

    /**
     * Setter for source.<p>
     * Attribution for the original source (such as a book or website) of this
     * node, including the author and licensing information.
     */
    public void setSource(SourceInfo source) {
        this.source = source;
    }

    /**
     * Getter for dice.<p>
     */
    public DiceExpression getDice() {
        return dice;
    }

    /**
     * Setter for dice.<p>
     */
    public void setDice(DiceExpression dice) {
        this.dice = dice;
    }

    /**
     * Getter for name.<p>
     * The primary name/label for this node.
     */
    public Label getName() {
        return name;
    }

    /**
     * Setter for name.<p>
     * The primary name/label for this node.
     */
    public void setName(Label name) {
        this.name = name;
    }

    /**
     * Getter for options.<p>
     */
    public List<TruthOption> getOptions() {
        return options;
    }

    /**
     * Setter for options.<p>
     */
    public void setOptions(List<TruthOption> options) {
        this.options = options;
    }

    /**
     * Getter for type.<p>
     */
    public TruthType getType() {
        return type;
    }

    /**
     * Setter for type.<p>
     */
    public void setType(TruthType type) {
        this.type = type;
    }

    /**
     * Getter for comment.<p>
     */
    public Documentation getComment() {
        return comment;
    }

    /**
     * Setter for comment.<p>
     */
    public void setComment(Documentation comment) {
        this.comment = comment;
    }

    /**
     * Getter for canonicalName.<p>
     * The name of this node as it appears on the page in the book, if it's
     * different from `name`.
     */
    public Label getCanonicalName() {
        return canonicalName;
    }

    /**
     * Setter for canonicalName.<p>
     * The name of this node as it appears on the page in the book, if it's
     * different from `name`.
     */
    public void setCanonicalName(Label canonicalName) {
        this.canonicalName = canonicalName;
    }

    /**
     * Getter for color.<p>
     * A thematic color associated with this node.
     */
    public CssColor getColor() {
        return color;
    }

    /**
     * Setter for color.<p>
     * A thematic color associated with this node.
     */
    public void setColor(CssColor color) {
        this.color = color;
    }

    /**
     * Getter for factions.<p>
     * Prompts for factions related to this truth, like those presented in
     * standard isles. This is presented as a single paragraph in the original
     * text; Datasworn uses an array (one faction prompt per string) to
     * represent them in order to make them more suitable for programmatic use.
     * 
     * This property is a placeholder and may see signficant changes in v0.2.0.
     */
    public List<EntityPrompt> getFactions() {
        return factions;
    }

    /**
     * Setter for factions.<p>
     * Prompts for factions related to this truth, like those presented in
     * standard isles. This is presented as a single paragraph in the original
     * text; Datasworn uses an array (one faction prompt per string) to
     * represent them in order to make them more suitable for programmatic use.
     * 
     * This property is a placeholder and may see signficant changes in v0.2.0.
     */
    public void setFactions(List<EntityPrompt> factions) {
        this.factions = factions;
    }

    /**
     * Getter for icon.<p>
     * An SVG icon associated with this collection.
     */
    public SvgImageUrl getIcon() {
        return icon;
    }

    /**
     * Setter for icon.<p>
     * An SVG icon associated with this collection.
     */
    public void setIcon(SvgImageUrl icon) {
        this.icon = icon;
    }

    /**
     * Getter for images.<p>
     */
    public List<WebpImageUrl> getImages() {
        return images;
    }

    /**
     * Setter for images.<p>
     */
    public void setImages(List<WebpImageUrl> images) {
        this.images = images;
    }

    /**
     * Getter for replaces.<p>
     * This node replaces all nodes that match these wildcards. References to
     * the replaced nodes can be considered equivalent to this node.
     */
    public List<TruthIdWildcard> getReplaces() {
        return replaces;
    }

    /**
     * Setter for replaces.<p>
     * This node replaces all nodes that match these wildcards. References to
     * the replaced nodes can be considered equivalent to this node.
     */
    public void setReplaces(List<TruthIdWildcard> replaces) {
        this.replaces = replaces;
    }

    /**
     * Getter for suggestions.<p>
     */
    public Suggestions getSuggestions() {
        return suggestions;
    }

    /**
     * Setter for suggestions.<p>
     */
    public void setSuggestions(Suggestions suggestions) {
        this.suggestions = suggestions;
    }

    /**
     * Getter for tags.<p>
     */
    public Tags getTags() {
        return tags;
    }

    /**
     * Setter for tags.<p>
     */
    public void setTags(Tags tags) {
        this.tags = tags;
    }

    /**
     * Getter for yourCharacter.<p>
     */
    public MarkdownString getYourCharacter() {
        return yourCharacter;
    }

    /**
     * Setter for yourCharacter.<p>
     */
    public void setYourCharacter(MarkdownString yourCharacter) {
        this.yourCharacter = yourCharacter;
    }
}
