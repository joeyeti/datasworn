// Code generated by jtd-codegen for Java + Jackson v0.2.1

package Datasworn;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.List;
import java.util.Map;

@JsonSerialize
public class Asset {
    @JsonProperty("_id")
    private AssetId id;

    @JsonProperty("_source")
    private SourceInfo source;

    @JsonProperty("abilities")
    private List<AssetAbility> abilities;

    @JsonProperty("category")
    private Label category;

    @JsonProperty("count_as_impact")
    private Boolean countAsImpact;

    @JsonProperty("name")
    private Label name;

    @JsonProperty("options")
    private Map<String, AssetOptionField> options;

    @JsonProperty("shared")
    private Boolean shared;

    @JsonProperty("type")
    private AssetType type;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("_comment")
    private Documentation comment;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("attachments")
    private AssetAttachment attachments;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("canonical_name")
    private Label canonicalName;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("color")
    private CssColor color;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("controls")
    private Map<String, AssetControlField> controls;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("icon")
    private SvgImageUrl icon;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("images")
    private List<WebpImageUrl> images;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("replaces")
    private List<AssetIdWildcard> replaces;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("requirement")
    private MarkdownString requirement;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("suggestions")
    private Suggestions suggestions;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("tags")
    private Tags tags;

    public Asset() {
    }

    /**
     * Getter for id.<p>
     * The unique Datasworn ID for this node.
     */
    public AssetId getId() {
        return id;
    }

    /**
     * Setter for id.<p>
     * The unique Datasworn ID for this node.
     */
    public void setId(AssetId id) {
        this.id = id;
    }

    /**
     * Getter for source.<p>
     * Attribution for the original source (such as a book or website) of this
     * node, including the author and licensing information.
     */
    public SourceInfo getSource() {
        return source;
    }

    /**
     * Setter for source.<p>
     * Attribution for the original source (such as a book or website) of this
     * node, including the author and licensing information.
     */
    public void setSource(SourceInfo source) {
        this.source = source;
    }

    /**
     * Getter for abilities.<p>
     */
    public List<AssetAbility> getAbilities() {
        return abilities;
    }

    /**
     * Setter for abilities.<p>
     */
    public void setAbilities(List<AssetAbility> abilities) {
        this.abilities = abilities;
    }

    /**
     * Getter for category.<p>
     * A localized category label for this asset. This is the surtitle above the
     * asset's name on the card.
     */
    public Label getCategory() {
        return category;
    }

    /**
     * Setter for category.<p>
     * A localized category label for this asset. This is the surtitle above the
     * asset's name on the card.
     */
    public void setCategory(Label category) {
        this.category = category;
    }

    /**
     * Getter for countAsImpact.<p>
     * If `true`, this asset counts as an impact (Starforged) or a debility
     * (classic Ironsworn).
     */
    public Boolean getCountAsImpact() {
        return countAsImpact;
    }

    /**
     * Setter for countAsImpact.<p>
     * If `true`, this asset counts as an impact (Starforged) or a debility
     * (classic Ironsworn).
     */
    public void setCountAsImpact(Boolean countAsImpact) {
        this.countAsImpact = countAsImpact;
    }

    /**
     * Getter for name.<p>
     * The primary name/label for this node.
     */
    public Label getName() {
        return name;
    }

    /**
     * Setter for name.<p>
     * The primary name/label for this node.
     */
    public void setName(Label name) {
        this.name = name;
    }

    /**
     * Getter for options.<p>
     * Options are input fields set when the player purchases the asset. They're
     * likely to remain the same through the life of the asset. Typically, they
     * are rendered at the top of the asset card.
     */
    public Map<String, AssetOptionField> getOptions() {
        return options;
    }

    /**
     * Setter for options.<p>
     * Options are input fields set when the player purchases the asset. They're
     * likely to remain the same through the life of the asset. Typically, they
     * are rendered at the top of the asset card.
     */
    public void setOptions(Map<String, AssetOptionField> options) {
        this.options = options;
    }

    /**
     * Getter for shared.<p>
     * Most assets only benefit to their owner, but certain assets (like
     * Starforged's module and command vehicle assets) are shared amongst the
     * player's allies, too.
     */
    public Boolean getShared() {
        return shared;
    }

    /**
     * Setter for shared.<p>
     * Most assets only benefit to their owner, but certain assets (like
     * Starforged's module and command vehicle assets) are shared amongst the
     * player's allies, too.
     */
    public void setShared(Boolean shared) {
        this.shared = shared;
    }

    /**
     * Getter for type.<p>
     */
    public AssetType getType() {
        return type;
    }

    /**
     * Setter for type.<p>
     */
    public void setType(AssetType type) {
        this.type = type;
    }

    /**
     * Getter for comment.<p>
     */
    public Documentation getComment() {
        return comment;
    }

    /**
     * Setter for comment.<p>
     */
    public void setComment(Documentation comment) {
        this.comment = comment;
    }

    /**
     * Getter for attachments.<p>
     */
    public AssetAttachment getAttachments() {
        return attachments;
    }

    /**
     * Setter for attachments.<p>
     */
    public void setAttachments(AssetAttachment attachments) {
        this.attachments = attachments;
    }

    /**
     * Getter for canonicalName.<p>
     * The name of this node as it appears on the page in the book, if it's
     * different from `name`.
     */
    public Label getCanonicalName() {
        return canonicalName;
    }

    /**
     * Setter for canonicalName.<p>
     * The name of this node as it appears on the page in the book, if it's
     * different from `name`.
     */
    public void setCanonicalName(Label canonicalName) {
        this.canonicalName = canonicalName;
    }

    /**
     * Getter for color.<p>
     * A thematic color associated with this node.
     */
    public CssColor getColor() {
        return color;
    }

    /**
     * Setter for color.<p>
     * A thematic color associated with this node.
     */
    public void setColor(CssColor color) {
        this.color = color;
    }

    /**
     * Getter for controls.<p>
     * Controls are condition meters, clocks, counters, and other asset input
     * fields whose values are expected to change throughout the life of the
     * asset.
     */
    public Map<String, AssetControlField> getControls() {
        return controls;
    }

    /**
     * Setter for controls.<p>
     * Controls are condition meters, clocks, counters, and other asset input
     * fields whose values are expected to change throughout the life of the
     * asset.
     */
    public void setControls(Map<String, AssetControlField> controls) {
        this.controls = controls;
    }

    /**
     * Getter for icon.<p>
     * An SVG icon associated with this collection.
     */
    public SvgImageUrl getIcon() {
        return icon;
    }

    /**
     * Setter for icon.<p>
     * An SVG icon associated with this collection.
     */
    public void setIcon(SvgImageUrl icon) {
        this.icon = icon;
    }

    /**
     * Getter for images.<p>
     */
    public List<WebpImageUrl> getImages() {
        return images;
    }

    /**
     * Setter for images.<p>
     */
    public void setImages(List<WebpImageUrl> images) {
        this.images = images;
    }

    /**
     * Getter for replaces.<p>
     * This node replaces all nodes that match these wildcards. References to
     * the replaced nodes can be considered equivalent to this node.
     */
    public List<AssetIdWildcard> getReplaces() {
        return replaces;
    }

    /**
     * Setter for replaces.<p>
     * This node replaces all nodes that match these wildcards. References to
     * the replaced nodes can be considered equivalent to this node.
     */
    public void setReplaces(List<AssetIdWildcard> replaces) {
        this.replaces = replaces;
    }

    /**
     * Getter for requirement.<p>
     * Describes prerequisites for purchasing or using this asset.
     */
    public MarkdownString getRequirement() {
        return requirement;
    }

    /**
     * Setter for requirement.<p>
     * Describes prerequisites for purchasing or using this asset.
     */
    public void setRequirement(MarkdownString requirement) {
        this.requirement = requirement;
    }

    /**
     * Getter for suggestions.<p>
     */
    public Suggestions getSuggestions() {
        return suggestions;
    }

    /**
     * Setter for suggestions.<p>
     */
    public void setSuggestions(Suggestions suggestions) {
        this.suggestions = suggestions;
    }

    /**
     * Getter for tags.<p>
     */
    public Tags getTags() {
        return tags;
    }

    /**
     * Setter for tags.<p>
     */
    public void setTags(Tags tags) {
        this.tags = tags;
    }
}
