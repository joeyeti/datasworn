{
	"discriminator": "type",
	"mapping": {
		"ruleset": {
			"properties": {
				"_id": {
					"ref": "RulesetId"
				},
				"datasworn_version": {
					"enum": ["0.1.0"],
					"metadata": {
						"description": "The version of the Datasworn format used by this data.",
						"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
					}
				},
				"title": {
					"ref": "Label",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
						"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))",
						"format": "date"
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": ["https://ironswornrpg.com"]
					}
				},
				"license": {
					"ref": "WebUrl"
				},
				"oracles": {
					"values": {
						"ref": "OracleTablesCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing asset collections, which contain assets."
					}
				},
				"rules": {
					"ref": "Rules"
				}
			},
			"optionalProperties": {
				"description": {
					"ref": "MarkdownString"
				},
				"atlas": {
					"values": {
						"ref": "AtlasCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site domains."
					}
				}
			},
			"metadata": {
				"description": "A standalone Datasworn package that describes its own ruleset."
			}
		},
		"expansion": {
			"properties": {
				"_id": {
					"ref": "ExpansionId"
				},
				"datasworn_version": {
					"enum": ["0.1.0"],
					"metadata": {
						"description": "The version of the Datasworn format used by this data.",
						"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
					}
				},
				"title": {
					"ref": "Label",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
						"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))",
						"format": "date"
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": ["https://ironswornrpg.com"]
					}
				},
				"license": {
					"ref": "WebUrl"
				},
				"oracles": {
					"values": {
						"ref": "OracleTablesCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing asset collections, which contain assets."
					}
				},
				"ruleset": {
					"ref": "RulesetId"
				}
			},
			"optionalProperties": {
				"description": {
					"ref": "MarkdownString"
				},
				"atlas": {
					"values": {
						"ref": "AtlasCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site domains."
					}
				},
				"rules": {
					"ref": "RulesExpansion"
				}
			},
			"metadata": {
				"description": "A Datasworn package that relies on an external package to provide its ruleset."
			}
		}
	},
	"metadata": {
		"description": "Describes game rules compatible with the Ironsworn tabletop role-playing game by Shawn Tomkin."
	},
	"definitions": {
		"ActionRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"player_choice": "The player chooses which roll option to use.",
					"highest": "Use the roll option with the best/highest value.",
					"lowest": "Use the roll option with the worst/lowest value.",
					"all": "Use _every_ roll option at once."
				}
			}
		},
		"AnyId": {
			"type": "string",
			"metadata": {
				"description": "Represents any kind of non-wildcard ID, including IDs of embedded objects."
			}
		},
		"AnyIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "Represents any kind of wildcard ID, including IDs of embedded objects."
			}
		},
		"AnyMoveId": {
			"type": "string"
		},
		"AnyMoveIdWildcard": {
			"type": "string"
		},
		"AnyOracleRollableId": {
			"type": "string"
		},
		"AnyOracleRollableIdWildcard": {
			"type": "string"
		},
		"AnyOracleRollableRowId": {
			"type": "string"
		},
		"AnyOracleRollableRowIdWildcard": {
			"type": "string"
		},
		"Asset": {
			"properties": {
				"_id": {
					"ref": "AssetId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"category": {
					"ref": "Label",
					"metadata": {
						"description": "A localized category label for this asset. This is the surtitle above the asset's name on the card.",
						"examples": [
							"Combat Talent",
							"Command Vehicle",
							"Companion",
							"Deed",
							"Module",
							"Path",
							"Ritual",
							"Support Vehicle"
						]
					}
				},
				"options": {
					"values": {
						"ref": "AssetOptionField"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Options are input fields set when the player purchases the asset. They're likely to remain the same through the life of the asset. Typically, they are rendered at the top of the asset card."
					}
				},
				"abilities": {
					"elements": {
						"ref": "AssetAbility",
						"metadata": {
							"description": "Abilities provided by this asset. Most assets have 3."
						}
					}
				},
				"count_as_impact": {
					"type": "boolean",
					"metadata": {
						"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
					}
				},
				"type": {
					"enum": ["asset"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "AssetIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"requirement": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "Describes prerequisites for purchasing or using this asset."
					}
				},
				"controls": {
					"values": {
						"ref": "AssetControlField"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset."
					}
				},
				"attachments": {
					"ref": "AssetAttachment"
				}
			}
		},
		"AssetAbility": {
			"properties": {
				"_id": {
					"ref": "AssetAbilityId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of this asset ability."
					}
				},
				"enabled": {
					"type": "boolean",
					"metadata": {
						"description": "Is this asset ability enabled?"
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "A handful of asset abilities have a label/name, for instance classic Ironsworn companion assets. Most canonical assets omit this property."
					}
				},
				"moves": {
					"values": {
						"ref": "EmbeddedMove"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Unique moves added by this asset ability."
					}
				},
				"oracles": {
					"values": {
						"ref": "EmbeddedOracleRollable"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"options": {
					"values": {
						"ref": "AssetAbilityOptionField"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Fields that are expected to be set once and remain the same through the life of the asset."
					}
				},
				"controls": {
					"values": {
						"ref": "AssetAbilityControlField"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Fields whose values are expected to change over the life of the asset."
					}
				},
				"enhance_asset": {
					"ref": "AssetEnhancement",
					"metadata": {
						"description": "Changes made to the asset, when this ability is enabled."
					}
				},
				"enhance_moves": {
					"elements": {
						"ref": "MoveEnhancement"
					},
					"metadata": {
						"description": "Describes changes made to various moves by this asset ability. Usually these require specific trigger conditions."
					}
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "An asset ability: one of the purchasable features of an asset. Most assets have three."
			}
		},
		"AssetAbilityControlField": {
			"discriminator": "field_type",
			"mapping": {
				"clock": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current value of this input."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The minimum number of filled clock segments. This is always 0."
							}
						},
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The size of the clock -- in other words, the maximum number of filled clock segments. Standard clocks have 4, 6, 8, or 10 segments."
							}
						},
						"rollable": {
							"type": "boolean"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "A clock with 4 or more segments."
					}
				},
				"counter": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current value of this input."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The (inclusive) minimum value."
							}
						},
						"max": {
							"type": "int16"
						},
						"rollable": {
							"type": "boolean"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "A basic counter representing a non-rollable integer value. They usually start at 0, and may or may not have a maximum."
					}
				},
				"checkbox": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				},
				"text": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "string"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents an input that accepts plain text."
					}
				}
			}
		},
		"AssetAbilityId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an AssetAbility object.",
				"pattern": "^asset\\.ability:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)$"
			}
		},
		"AssetAbilityIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AssetAbilityId that can be used to match multiple AssetAbility objects.",
				"pattern": "^asset\\.ability:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"
			}
		},
		"AssetAbilityMoveId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an AssetAbilityMove object.",
				"pattern": "^asset\\.ability\\.move:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"AssetAbilityMoveIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AssetAbilityMoveId that can be used to match multiple AssetAbilityMove objects.",
				"pattern": "^asset\\.ability\\.move:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"AssetAbilityOptionField": {
			"discriminator": "field_type",
			"mapping": {
				"text": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "string"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents an input that accepts plain text."
					}
				}
			}
		},
		"AssetAbilityOracleRollableId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an AssetAbilityOracleRollable object.",
				"pattern": "^asset\\.ability\\.oracle_rollable:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"AssetAbilityOracleRollableIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AssetAbilityOracleRollableId that can be used to match multiple AssetAbilityOracleRollable objects.",
				"pattern": "^asset\\.ability\\.oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"AssetAbilityOracleRollableRowId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an AssetAbilityOracleRollableRow object.",
				"pattern": "^asset\\.ability\\.oracle_rollable\\.row:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+)$"
			}
		},
		"AssetAbilityOracleRollableRowIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AssetAbilityOracleRollableRowId that can be used to match multiple AssetAbilityOracleRollableRow objects.",
				"pattern": "^asset\\.ability\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+|\\*)$"
			}
		},
		"AssetAttachment": {
			"properties": {
				"assets": {
					"elements": {
						"ref": "AssetIdWildcard"
					},
					"metadata": {
						"description": "Asset IDs (which may be wildcards) that may be attached to this asset"
					}
				},
				"max": {
					"type": "int16",
					"metadata": {}
				}
			},
			"metadata": {
				"description": "Describes which assets can be attached to this asset. Example: Starforged's Module assets, which can be equipped by Command Vehicle assets. See p. 55 of Starforged for more info."
			}
		},
		"AssetCardFlipField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "boolean",
					"metadata": {
						"description": "Is the card flipped over?"
					}
				},
				"field_type": {
					"enum": ["card_flip"]
				},
				"is_impact": {
					"type": "boolean",
					"metadata": {
						"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
					}
				},
				"disables_asset": {
					"type": "boolean",
					"metadata": {
						"description": "Does this field disable the asset when its value is set to `true`?"
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			}
		},
		"AssetCheckboxField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "boolean",
					"metadata": {
						"description": "Is the box checked?"
					}
				},
				"field_type": {
					"enum": ["checkbox"]
				},
				"is_impact": {
					"type": "boolean",
					"metadata": {
						"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
					}
				},
				"disables_asset": {
					"type": "boolean",
					"metadata": {
						"description": "Does this field disable the asset when its value is set to `true`?"
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			}
		},
		"AssetCollection": {
			"properties": {
				"_id": {
					"ref": "AssetCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "Asset"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"collections": {
					"values": {
						"ref": "AssetCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"type": {
					"enum": ["asset_collection"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "AssetCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "AssetCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			}
		},
		"AssetCollectionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an AssetCollection object.",
				"pattern": "^asset_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
			}
		},
		"AssetCollectionIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AssetCollectionId that can be used to match multiple AssetCollection objects.",
				"pattern": "^asset_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
			}
		},
		"AssetConditionMeter": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "int8",
					"metadata": {
						"description": "The current value of this meter."
					}
				},
				"min": {
					"type": "int8",
					"metadata": {
						"description": "The minimum value of this meter."
					}
				},
				"max": {
					"type": "int8",
					"metadata": {
						"description": "The maximum value of this meter."
					}
				},
				"rollable": {
					"type": "boolean",
					"metadata": {
						"description": "Is this meter's `value` usable as a stat in an action roll?"
					}
				},
				"field_type": {
					"enum": ["condition_meter"]
				},
				"controls": {
					"values": {
						"ref": "AssetConditionMeterControlField"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Checkbox controls rendered as part of the condition meter."
					}
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				},
				"moves": {
					"optionalProperties": {
						"suffer": {
							"elements": {
								"ref": "AnyMoveIdWildcard",
								"metadata": {
									"examples": [
										"move:classic/suffer/companion_endure_harm",
										"move:starforged/suffer/companion_takes_a_hit",
										"move:starforged/suffer/withstand_damage"
									]
								}
							},
							"metadata": {
								"description": "The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option."
							}
						},
						"recover": {
							"elements": {
								"ref": "AnyMoveIdWildcard",
								"metadata": {
									"examples": [
										"move:classic/adventure/heal",
										"move:classic/adventure/make_camp",
										"move:classic/relationship/sojourn",
										"move:starforged/recover/heal",
										"move:starforged/recover/repair"
									]
								}
							},
							"metadata": {
								"description": "The ID(s) of recovery moves associated with this meter."
							}
						}
					},
					"metadata": {
						"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves."
					}
				}
			},
			"metadata": {
				"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\"."
			}
		},
		"AssetConditionMeterControlField": {
			"discriminator": "field_type",
			"mapping": {
				"checkbox": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				},
				"card_flip": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the card flipped over?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				}
			},
			"metadata": {
				"description": "A checkbox control field, rendered as part of an asset condition meter."
			}
		},
		"AssetConditionMeterEnhancement": {
			"properties": {
				"field_type": {
					"enum": ["condition_meter"]
				},
				"max": {
					"type": "int8",
					"metadata": {
						"description": "The maximum value of this meter."
					}
				}
			},
			"metadata": {
				"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\"."
			}
		},
		"AssetControlField": {
			"discriminator": "field_type",
			"mapping": {
				"condition_meter": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "int8",
							"metadata": {
								"description": "The current value of this meter."
							}
						},
						"min": {
							"type": "int8",
							"metadata": {
								"description": "The minimum value of this meter."
							}
						},
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The maximum value of this meter."
							}
						},
						"rollable": {
							"type": "boolean",
							"metadata": {
								"description": "Is this meter's `value` usable as a stat in an action roll?"
							}
						},
						"controls": {
							"values": {
								"ref": "AssetConditionMeterControlField"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$",
								"description": "Checkbox controls rendered as part of the condition meter."
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						},
						"moves": {
							"optionalProperties": {
								"suffer": {
									"elements": {
										"ref": "AnyMoveIdWildcard",
										"metadata": {
											"examples": [
												"move:classic/suffer/companion_endure_harm",
												"move:starforged/suffer/companion_takes_a_hit",
												"move:starforged/suffer/withstand_damage"
											]
										}
									},
									"metadata": {
										"description": "The ID(s) of suffer moves associated with the condition meter. If the suffer move makes an action roll, this condition meter value should be made available as a roll option."
									}
								},
								"recover": {
									"elements": {
										"ref": "AnyMoveIdWildcard",
										"metadata": {
											"examples": [
												"move:classic/adventure/heal",
												"move:classic/adventure/make_camp",
												"move:classic/relationship/sojourn",
												"move:starforged/recover/heal",
												"move:starforged/recover/repair"
											]
										}
									},
									"metadata": {
										"description": "The ID(s) of recovery moves associated with this meter."
									}
								}
							},
							"metadata": {
								"description": "Provides hints for moves that interact with this condition meter, such as suffer and recovery moves."
							}
						}
					},
					"metadata": {
						"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\"."
					}
				},
				"select_enhancement": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"ref": "DictKey"
						},
						"choices": {
							"values": {
								"discriminator": "choice_type",
								"mapping": {
									"choice": {
										"properties": {
											"label": {
												"ref": "Label"
											}
										},
										"optionalProperties": {
											"enhance_asset": {
												"ref": "AssetEnhancement"
											},
											"enhance_moves": {
												"elements": {
													"ref": "MoveEnhancement"
												}
											}
										},
										"metadata": {
											"description": "Represents an option in a list of choices."
										}
									},
									"choice_group": {
										"properties": {
											"name": {
												"ref": "Label",
												"metadata": {
													"description": "A label for this option group."
												}
											},
											"choices": {
												"values": {
													"ref": "SelectEnhancementFieldChoice"
												},
												"metadata": {
													"propertyPattern": "^[a-z][a-z0-9_]*$"
												}
											}
										},
										"metadata": {
											"description": "Represents a grouping of options in a list of choices."
										}
									}
								}
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles)."
					}
				},
				"checkbox": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the box checked?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				},
				"card_flip": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "boolean",
							"metadata": {
								"description": "Is the card flipped over?"
							}
						},
						"is_impact": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field count as an impact (Starforged) or debility (Ironsworn classic) when its value is set to `true`?"
							}
						},
						"disables_asset": {
							"type": "boolean",
							"metadata": {
								"description": "Does this field disable the asset when its value is set to `true`?"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					}
				}
			}
		},
		"AssetControlFieldEnhancement": {
			"discriminator": "field_type",
			"mapping": {
				"condition_meter": {
					"properties": {
						"max": {
							"type": "int8",
							"metadata": {
								"description": "The maximum value of this meter."
							}
						}
					},
					"metadata": {
						"description": "Some assets provide a special condition meter of their own. The most common example is the health meters on companion assets. Asset condition meters may also include their own controls, such as the checkboxes that Starforged companion assets use to indicate they are \"out of action\"."
					}
				}
			}
		},
		"AssetControlValueRef": {
			"properties": {
				"assets": {
					"elements": {
						"ref": "AssetIdWildcard"
					}
				},
				"control": {
					"ref": "DictKey",
					"metadata": {
						"description": "The dictionary key of the asset control field.",
						"examples": ["health", "integrity"]
					}
				},
				"using": {
					"enum": ["asset_control"],
					"metadata": {
						"description": "A reference to the value of an asset control."
					}
				}
			},
			"metadata": {
				"description": "A reference to the value of an asset control."
			}
		},
		"AssetEnhancement": {
			"optionalProperties": {
				"controls": {
					"values": {
						"ref": "AssetControlFieldEnhancement"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Controls are condition meters, clocks, counters, and other asset input fields whose values are expected to change throughout the life of the asset."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"count_as_impact": {
					"type": "boolean",
					"metadata": {
						"description": "If `true`, this asset counts as an impact (Starforged) or a debility (classic Ironsworn)."
					}
				},
				"attachments": {
					"ref": "AssetAttachment"
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Most assets only benefit to their owner, but certain assets (like Starforged's module and command vehicle assets) are shared amongst the player's allies, too."
					}
				}
			},
			"metadata": {
				"description": "Describes enhancements made to this asset in a partial asset object. The changes should be applied recursively; only the values that are specified should be changed."
			}
		},
		"AssetId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an Asset object.",
				"pattern": "^asset:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
			}
		},
		"AssetIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AssetId that can be used to match multiple Asset objects.",
				"pattern": "^asset:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
			}
		},
		"AssetOptionField": {
			"discriminator": "field_type",
			"mapping": {
				"select_value": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"ref": "DictKey"
						},
						"choices": {
							"values": {
								"ref": "SelectValueFieldChoice"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents a list of mutually exclusive choices."
					}
				},
				"select_enhancement": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"ref": "DictKey"
						},
						"choices": {
							"values": {
								"discriminator": "choice_type",
								"mapping": {
									"choice": {
										"properties": {
											"label": {
												"ref": "Label"
											}
										},
										"optionalProperties": {
											"enhance_asset": {
												"ref": "AssetEnhancement"
											},
											"enhance_moves": {
												"elements": {
													"ref": "MoveEnhancement"
												}
											}
										},
										"metadata": {
											"description": "Represents an option in a list of choices."
										}
									},
									"choice_group": {
										"properties": {
											"name": {
												"ref": "Label",
												"metadata": {
													"description": "A label for this option group."
												}
											},
											"choices": {
												"values": {
													"ref": "SelectEnhancementFieldChoice"
												},
												"metadata": {
													"propertyPattern": "^[a-z][a-z0-9_]*$"
												}
											}
										},
										"metadata": {
											"description": "Represents a grouping of options in a list of choices."
										}
									}
								}
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles)."
					}
				},
				"text": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "string"
						}
					},
					"optionalProperties": {
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An icon associated with this input."
							}
						}
					},
					"metadata": {
						"description": "Represents an input that accepts plain text."
					}
				}
			},
			"metadata": {
				"description": "Options are asset input fields which are set once, usually when the character takes the asset. The most common example is the \"name\" field on companion assets. A more complex example is the choice of a god's stat for the Devotant asset."
			}
		},
		"AssetOptionValueRef": {
			"properties": {
				"assets": {
					"elements": {
						"ref": "AssetIdWildcard"
					}
				},
				"option": {
					"ref": "DictKey",
					"metadata": {
						"description": "The dictionary key of the asset option field."
					}
				},
				"using": {
					"enum": ["asset_option"],
					"metadata": {
						"description": "A reference to the value of an asset option."
					}
				}
			},
			"metadata": {
				"description": "A reference to the value of an asset option."
			}
		},
		"AtlasCollection": {
			"properties": {
				"_id": {
					"ref": "AtlasCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "AtlasEntry"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"collections": {
					"values": {
						"ref": "AtlasCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"type": {
					"enum": ["atlas_collection"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "AtlasCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "AtlasCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			}
		},
		"AtlasCollectionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an AtlasCollection object.",
				"pattern": "^atlas_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
			}
		},
		"AtlasCollectionIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AtlasCollectionId that can be used to match multiple AtlasCollection objects.",
				"pattern": "^atlas_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
			}
		},
		"AtlasEntry": {
			"properties": {
				"_id": {
					"ref": "AtlasEntryId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label"
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"features": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"type": {
					"enum": ["atlas_entry"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "AtlasEntryIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				},
				"your_truth": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {
				"description": "An atlas entry, like the Ironlands region entries found in classic Ironsworn."
			}
		},
		"AtlasEntryId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an AtlasEntry object.",
				"pattern": "^atlas_entry:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
			}
		},
		"AtlasEntryIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded AtlasEntryId that can be used to match multiple AtlasEntry objects.",
				"pattern": "^atlas_entry:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
			}
		},
		"AttachedAssetControlValueRef": {
			"properties": {
				"control": {
					"ref": "DictKey",
					"metadata": {
						"description": "The dictionary key of the asset control field.",
						"examples": ["health", "integrity"]
					}
				},
				"using": {
					"enum": ["attached_asset_control"],
					"metadata": {
						"description": "A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle."
					}
				}
			},
			"metadata": {
				"description": "A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle."
			}
		},
		"AttachedAssetOptionValueRef": {
			"properties": {
				"option": {
					"ref": "DictKey",
					"metadata": {
						"description": "The dictionary key of the asset option field."
					}
				},
				"using": {
					"enum": ["attached_asset_option"],
					"metadata": {
						"description": "A reference to the value of an attached asset option."
					}
				}
			},
			"metadata": {
				"description": "A reference to the value of an attached asset option."
			}
		},
		"AuthorInfo": {
			"properties": {
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of the author.",
						"examples": ["Shawn Tomkin"]
					}
				}
			},
			"optionalProperties": {
				"email": {
					"ref": "Email",
					"metadata": {
						"description": "An optional email contact for the author"
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "An optional URL for the author's website."
					}
				}
			},
			"metadata": {
				"description": "Information on the original creator of this material.",
				"examples": [
					{
						"name": "Shawn Tomkin",
						"url": "https://ironswornrpg.com"
					}
				]
			}
		},
		"ChallengeRank": {
			"type": "uint8",
			"metadata": {
				"description": "Challenge rank, represented as an integer from 1 (troublesome) to 5 (epic).",
				"enumDescription": {
					"1": "Troublesome",
					"2": "Dangerous",
					"3": "Formidable",
					"4": "Extreme",
					"5": "Epic"
				}
			}
		},
		"ClockField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "int8",
					"metadata": {
						"description": "The current value of this input."
					}
				},
				"min": {
					"type": "int8",
					"metadata": {
						"description": "The minimum number of filled clock segments. This is always 0."
					}
				},
				"max": {
					"type": "int8",
					"metadata": {
						"description": "The size of the clock -- in other words, the maximum number of filled clock segments. Standard clocks have 4, 6, 8, or 10 segments."
					}
				},
				"rollable": {
					"type": "boolean"
				},
				"field_type": {
					"enum": ["clock"]
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			},
			"metadata": {
				"description": "A clock with 4 or more segments."
			}
		},
		"CollectableType": {
			"enum": ["atlas_entry", "npc", "oracle_rollable", "asset", "move"]
		},
		"CollectionType": {
			"enum": [
				"atlas_collection",
				"npc_collection",
				"oracle_collection",
				"asset_collection",
				"move_category"
			]
		},
		"ConditionMeterField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "int8",
					"metadata": {
						"description": "The current value of this meter."
					}
				},
				"min": {
					"type": "int8",
					"metadata": {
						"description": "The minimum value of this meter."
					}
				},
				"max": {
					"type": "int8",
					"metadata": {
						"description": "The maximum value of this meter."
					}
				},
				"rollable": {
					"type": "boolean",
					"metadata": {
						"description": "Is this meter's `value` usable as a stat in an action roll?"
					}
				},
				"field_type": {
					"enum": ["condition_meter"]
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			},
			"metadata": {
				"description": "A meter with an integer value, bounded by a minimum and maximum."
			}
		},
		"ConditionMeterKey": {
			"ref": "DictKey",
			"metadata": {
				"description": "A basic, rollable player character resource specified by the ruleset.",
				"examples": ["health", "spirit", "supply"]
			}
		},
		"ConditionMeterRule": {
			"properties": {
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this condition meter."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this condition meter shared by all players?"
					}
				},
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "int8",
					"metadata": {
						"description": "The current value of this meter."
					}
				},
				"min": {
					"type": "int8",
					"metadata": {
						"description": "The minimum value of this meter."
					}
				},
				"max": {
					"type": "int8",
					"metadata": {
						"description": "The maximum value of this meter."
					}
				},
				"rollable": {
					"type": "boolean",
					"metadata": {
						"description": "Is this meter's `value` usable as a stat in an action roll?"
					}
				}
			},
			"metadata": {
				"description": "Describes a standard player character condition meter."
			}
		},
		"ConditionMeterValueRef": {
			"properties": {
				"condition_meter": {
					"ref": "ConditionMeterKey"
				},
				"using": {
					"enum": ["condition_meter"],
					"metadata": {
						"description": "A reference to the value of a standard player condition meter."
					}
				}
			},
			"metadata": {
				"description": "A reference to the value of a standard player condition meter."
			}
		},
		"CoreTags": {
			"optionalProperties": {
				"supernatural": {
					"type": "boolean",
					"metadata": {
						"description": "This object is supernatural in nature, and is ideal for settings that feature supernatural or mythic powers."
					}
				},
				"technological": {
					"type": "boolean",
					"metadata": {
						"description": "This object is technological in nature, and is ideal for settings that feature remarkable technologies."
					}
				},
				"requires_allies": {
					"type": "boolean",
					"metadata": {
						"description": "This object requires allies to function, and is intended for co-op play, or guided play with allies. It is not appropriate for solo play."
					}
				}
			}
		},
		"CounterField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "int8",
					"metadata": {
						"description": "The current value of this input."
					}
				},
				"min": {
					"type": "int8",
					"metadata": {
						"description": "The (inclusive) minimum value."
					}
				},
				"max": {
					"type": "int16"
				},
				"rollable": {
					"type": "boolean"
				},
				"field_type": {
					"enum": ["counter"]
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			},
			"metadata": {
				"description": "A basic counter representing a non-rollable integer value. They usually start at 0, and may or may not have a maximum."
			}
		},
		"CssColor": {
			"type": "string",
			"metadata": {
				"description": "A CSS color value."
			}
		},
		"CustomValue": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "int16"
				},
				"using": {
					"enum": ["custom"],
					"metadata": {
						"description": "An arbitrary static integer value with a label."
					}
				}
			},
			"metadata": {
				"description": "An arbitrary static integer value with a label."
			}
		},
		"DelveSite": {
			"properties": {
				"_id": {
					"ref": "DelveSiteId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"rank": {
					"ref": "ChallengeRank"
				},
				"theme": {
					"ref": "DelveSiteThemeId",
					"metadata": {
						"description": "The ID of the site's DelveSiteTheme card."
					}
				},
				"domain": {
					"ref": "DelveSiteDomainId",
					"metadata": {
						"description": "The ID of the site's DelveSiteDomain card."
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"denizens": {
					"elements": {
						"ref": "DelveSiteDenizen"
					},
					"metadata": {
						"description": "Represents the delve site's denizen matrix as an array of objects."
					}
				},
				"type": {
					"enum": ["delve_site"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "DelveSiteIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"region": {
					"ref": "AtlasEntryId",
					"metadata": {
						"description": "The ID of an atlas entry representing the region in which this delve site is located."
					}
				},
				"extra_card": {
					"type": "string",
					"metadata": {
						"description": "An additional theme or domain card ID, for use with optional rules in Ironsworn: Delve."
					}
				}
			},
			"metadata": {
				"description": "A delve site with a theme, domain, and denizens."
			}
		},
		"DelveSiteDenizen": {
			"properties": {
				"frequency": {
					"ref": "DelveSiteDenizenFrequency"
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "DelveSiteDenizenId"
				}
			},
			"optionalProperties": {
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "A name for the denizen, if it's different than the `name` property of the NPC."
					}
				},
				"npc": {
					"ref": "NpcId",
					"metadata": {
						"description": "The ID of the relevant NPC entry, if one is specified."
					}
				}
			},
			"metadata": {
				"description": "Represents an entry in a delve site denizen matrix. Denizen matrices are described in Ironsworn: Delve."
			}
		},
		"DelveSiteDenizenFrequency": {
			"enum": ["very_common", "common", "uncommon", "rare", "unforeseen"]
		},
		"DelveSiteDenizenId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSiteDenizen object.",
				"pattern": "^delve_site\\.denizen:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
			}
		},
		"DelveSiteDenizenIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteDenizenId that can be used to match multiple DelveSiteDenizen objects.",
				"pattern": "^delve_site\\.denizen:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
			}
		},
		"DelveSiteDomain": {
			"properties": {
				"_id": {
					"ref": "DelveSiteDomainId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The description text that appears below the title on the card."
					}
				},
				"features": {
					"elements": {
						"ref": "DelveSiteDomainFeature"
					}
				},
				"dangers": {
					"elements": {
						"ref": "DelveSiteDomainDanger"
					}
				},
				"type": {
					"enum": ["delve_site_domain"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "DelveSiteDomainIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"name_oracle": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "An oracle table ID containing place name elements. For examples, see oracle ID `oracle_rollable:delve/site_name/place/barrow`, and its siblings in oracle collection ID `oracle_collection:delve/site_name/place`. These oracles are used by the site name oracle from Ironsworn: Delve (`oracle_rollable:delve/site_name/format`) to create random names for delve sites."
					}
				}
			},
			"metadata": {
				"description": "A delve site Domain card."
			}
		},
		"DelveSiteDomainDanger": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "DelveSiteDomainDangerId"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table, with a single text cell."
			}
		},
		"DelveSiteDomainDangerId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSiteDomainDanger object.",
				"pattern": "^delve_site_domain\\.danger:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
			}
		},
		"DelveSiteDomainDangerIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteDomainDangerId that can be used to match multiple DelveSiteDomainDanger objects.",
				"pattern": "^delve_site_domain\\.danger:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
			}
		},
		"DelveSiteDomainFeature": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "DelveSiteDomainFeatureId"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table, with a single text cell."
			}
		},
		"DelveSiteDomainFeatureId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSiteDomainFeature object.",
				"pattern": "^delve_site_domain\\.feature:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
			}
		},
		"DelveSiteDomainFeatureIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteDomainFeatureId that can be used to match multiple DelveSiteDomainFeature objects.",
				"pattern": "^delve_site_domain\\.feature:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
			}
		},
		"DelveSiteDomainId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSiteDomain object.",
				"pattern": "^delve_site_domain:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
			}
		},
		"DelveSiteDomainIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteDomainId that can be used to match multiple DelveSiteDomain objects.",
				"pattern": "^delve_site_domain:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
			}
		},
		"DelveSiteId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSite object.",
				"pattern": "^delve_site:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
			}
		},
		"DelveSiteIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteId that can be used to match multiple DelveSite objects.",
				"pattern": "^delve_site:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
			}
		},
		"DelveSiteTheme": {
			"properties": {
				"_id": {
					"ref": "DelveSiteThemeId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The description text that appears below the title on the card."
					}
				},
				"features": {
					"elements": {
						"ref": "DelveSiteThemeFeature"
					}
				},
				"dangers": {
					"elements": {
						"ref": "DelveSiteThemeDanger"
					}
				},
				"type": {
					"enum": ["delve_site_theme"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "DelveSiteThemeIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				}
			},
			"metadata": {
				"description": "A delve site theme card."
			}
		},
		"DelveSiteThemeDanger": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "DelveSiteThemeDangerId"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table, with a single text cell."
			}
		},
		"DelveSiteThemeDangerId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSiteThemeDanger object.",
				"pattern": "^delve_site_theme\\.danger:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
			}
		},
		"DelveSiteThemeDangerIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteThemeDangerId that can be used to match multiple DelveSiteThemeDanger objects.",
				"pattern": "^delve_site_theme\\.danger:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
			}
		},
		"DelveSiteThemeFeature": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "DelveSiteThemeFeatureId"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table, with a single text cell."
			}
		},
		"DelveSiteThemeFeatureId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSiteThemeFeature object.",
				"pattern": "^delve_site_theme\\.feature:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
			}
		},
		"DelveSiteThemeFeatureIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteThemeFeatureId that can be used to match multiple DelveSiteThemeFeature objects.",
				"pattern": "^delve_site_theme\\.feature:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
			}
		},
		"DelveSiteThemeId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a DelveSiteTheme object.",
				"pattern": "^delve_site_theme:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
			}
		},
		"DelveSiteThemeIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded DelveSiteThemeId that can be used to match multiple DelveSiteTheme objects.",
				"pattern": "^delve_site_theme:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
			}
		},
		"DiceExpression": {
			"type": "string",
			"metadata": {
				"description": "A simple dice roll expression with an optional (positive or negative) modifer.",
				"examples": ["1d100", "1d6+2", "2d10"],
				"pattern": "([1-9][0-9]*)d([1-9][0-9]*)([+-]([1-9][0-9]*))?"
			}
		},
		"DiceRange": {
			"properties": {
				"min": {
					"type": "int16",
					"metadata": {
						"description": "Low end of the dice range."
					}
				},
				"max": {
					"type": "int16",
					"metadata": {
						"description": "High end of the dice range."
					}
				}
			},
			"metadata": {
				"description": "Represents a range of dice roll results, bounded by `min` and `max` (inclusive)."
			}
		},
		"DictKey": {
			"type": "string",
			"metadata": {
				"description": "A `snake_case` key used in a Datasworn dictionary object.",
				"pattern": "^[a-z][a-z0-9_]*$"
			}
		},
		"Documentation": {
			"type": "string",
			"metadata": {
				"description": "Implementation hints or other developer-facing comments on this node. These should be omitted when representing an object for gameplay."
			}
		},
		"Email": {
			"type": "string",
			"metadata": {
				"description": "An email address.",
				"format": "email"
			}
		},
		"EmbeddedActionRollMove": {
			"properties": {
				"_id": {
					"ref": "EmbeddedMoveId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerActionRoll",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"outcomes": {
					"ref": "MoveOutcomes"
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["action_roll"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				}
			}
		},
		"EmbeddedMove": {
			"discriminator": "roll_type",
			"mapping": {
				"action_roll": {
					"properties": {
						"_id": {
							"ref": "EmbeddedMoveId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerActionRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": ["move"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						}
					}
				},
				"no_roll": {
					"properties": {
						"_id": {
							"ref": "EmbeddedMoveId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerNoRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"type": {
							"enum": ["move"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						}
					}
				},
				"progress_roll": {
					"properties": {
						"_id": {
							"ref": "EmbeddedMoveId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerProgressRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": ["move"]
						},
						"tracks": {
							"ref": "ProgressTrackTypeInfo",
							"metadata": {
								"description": "Describes the common features of progress tracks associated with this move."
							}
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						}
					}
				},
				"special_track": {
					"properties": {
						"_id": {
							"ref": "EmbeddedMoveId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerSpecialTrack",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": ["move"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						}
					}
				}
			}
		},
		"EmbeddedMoveId": {
			"type": "string"
		},
		"EmbeddedMoveIdWildcard": {
			"type": "string"
		},
		"EmbeddedNoRollMove": {
			"properties": {
				"_id": {
					"ref": "EmbeddedMoveId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerNoRoll",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["no_roll"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				}
			}
		},
		"EmbeddedOracleColumnText": {
			"properties": {
				"_id": {
					"ref": "EmbeddedOracleRollableId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["column_text"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"EmbeddedOracleColumnText2": {
			"properties": {
				"_id": {
					"ref": "EmbeddedOracleRollableId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText2"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["column_text2"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"EmbeddedOracleColumnText3": {
			"properties": {
				"_id": {
					"ref": "EmbeddedOracleRollableId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText3"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["column_text3"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"EmbeddedOracleRollable": {
			"discriminator": "oracle_type",
			"mapping": {
				"table_text": {
					"properties": {
						"_id": {
							"ref": "EmbeddedOracleRollableId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				},
				"table_text2": {
					"properties": {
						"_id": {
							"ref": "EmbeddedOracleRollableId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText2"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				},
				"table_text3": {
					"properties": {
						"_id": {
							"ref": "EmbeddedOracleRollableId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText3"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								},
								"text3": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				},
				"column_text": {
					"properties": {
						"_id": {
							"ref": "EmbeddedOracleRollableId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				},
				"column_text2": {
					"properties": {
						"_id": {
							"ref": "EmbeddedOracleRollableId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText2"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				},
				"column_text3": {
					"properties": {
						"_id": {
							"ref": "EmbeddedOracleRollableId"
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText3"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				}
			}
		},
		"EmbeddedOracleRollableId": {
			"type": "string"
		},
		"EmbeddedOracleRollableIdWildcard": {
			"type": "string"
		},
		"EmbeddedOracleTableText": {
			"properties": {
				"_id": {
					"ref": "EmbeddedOracleRollableId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"column_labels": {
					"properties": {
						"roll": {
							"ref": "Label"
						},
						"text": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["table_text"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"EmbeddedOracleTableText2": {
			"properties": {
				"_id": {
					"ref": "EmbeddedOracleRollableId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText2"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"column_labels": {
					"properties": {
						"roll": {
							"ref": "Label"
						},
						"text": {
							"ref": "Label"
						},
						"text2": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["table_text2"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"EmbeddedOracleTableText3": {
			"properties": {
				"_id": {
					"ref": "EmbeddedOracleRollableId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText3"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"column_labels": {
					"properties": {
						"roll": {
							"ref": "Label"
						},
						"text": {
							"ref": "Label"
						},
						"text2": {
							"ref": "Label"
						},
						"text3": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["table_text3"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"EmbeddedProgressRollMove": {
			"properties": {
				"_id": {
					"ref": "EmbeddedMoveId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerProgressRoll",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"outcomes": {
					"ref": "MoveOutcomes"
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["progress_roll"]
				},
				"tracks": {
					"ref": "ProgressTrackTypeInfo",
					"metadata": {
						"description": "Describes the common features of progress tracks associated with this move."
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				}
			}
		},
		"EmbeddedSpecialTrackMove": {
			"properties": {
				"_id": {
					"ref": "EmbeddedMoveId"
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerSpecialTrack",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"outcomes": {
					"ref": "MoveOutcomes"
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["special_track"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				}
			}
		},
		"EmbedOnlyType": {
			"enum": [
				"ability",
				"option",
				"row",
				"feature",
				"danger",
				"denizen",
				"variant"
			]
		},
		"EntityPrompt": {
			"properties": {
				"text": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {
				"description": "This type is a placeholder and may see signficant changes in v0.2.0."
			}
		},
		"Expansion": {
			"properties": {
				"_id": {
					"ref": "ExpansionId"
				},
				"type": {
					"enum": ["expansion"]
				},
				"datasworn_version": {
					"enum": ["0.1.0"],
					"metadata": {
						"description": "The version of the Datasworn format used by this data.",
						"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
					}
				},
				"title": {
					"ref": "Label",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
						"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))",
						"format": "date"
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": ["https://ironswornrpg.com"]
					}
				},
				"license": {
					"ref": "WebUrl"
				},
				"oracles": {
					"values": {
						"ref": "OracleTablesCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing asset collections, which contain assets."
					}
				},
				"ruleset": {
					"ref": "RulesetId"
				}
			},
			"optionalProperties": {
				"description": {
					"ref": "MarkdownString"
				},
				"atlas": {
					"values": {
						"ref": "AtlasCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site domains."
					}
				},
				"rules": {
					"ref": "RulesExpansion"
				}
			},
			"metadata": {
				"description": "A Datasworn package that relies on an external package to provide its ruleset."
			}
		},
		"ExpansionId": {
			"type": "string",
			"metadata": {
				"description": "The ID of a Datasworn package that relies on an external package to provide its ruleset.",
				"examples": ["delve", "sundered_isles"],
				"pattern": "^[a-z][a-z0-9_]*$"
			}
		},
		"I18nHint": {
			"optionalProperties": {
				"part_of_speech": {
					"ref": "PartOfSpeech",
					"metadata": {
						"description": "The part of speech for this string."
					}
				}
			}
		},
		"I18nHints": {
			"optionalProperties": {
				"text": {
					"ref": "I18nHint"
				},
				"text2": {
					"ref": "I18nHint"
				},
				"text3": {
					"ref": "I18nHint"
				},
				"template": {
					"optionalProperties": {
						"text": {
							"ref": "I18nHint"
						},
						"text2": {
							"ref": "I18nHint"
						},
						"text3": {
							"ref": "I18nHint"
						}
					}
				}
			},
			"metadata": {
				"description": "Internationalization/localization hints for the text content of this object."
			}
		},
		"ImpactCategory": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "A label for this impact category."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this impact category."
					}
				},
				"contents": {
					"values": {
						"ref": "ImpactRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of the Impacts in this category."
					}
				}
			},
			"metadata": {
				"description": "Describes a category of standard impacts/debilities."
			}
		},
		"ImpactRule": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "The label for this impact."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this impact."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this impact applied to all players at once?"
					}
				},
				"prevents_recovery": {
					"elements": {
						"ref": "ConditionMeterKey"
					},
					"metadata": {
						"description": "Any ruleset condition meters that can't recover when this impact is active."
					}
				},
				"permanent": {
					"type": "boolean",
					"metadata": {
						"description": "Is this impact permanent?"
					}
				}
			},
			"metadata": {
				"description": "Describes a standard impact/debility."
			}
		},
		"Label": {
			"type": "string",
			"metadata": {
				"description": "A localized, player-facing name or label, formatted as plain text. In some contexts it may be undesirable to render this text, but it should always be exposed to assistive technology (e.g. with `aria-label` in HTML)."
			}
		},
		"MarkdownString": {
			"type": "string",
			"metadata": {
				"description": "Localized, player-facing text, formatted in Markdown. It is *not* formatted for use \"out of the box\"; it uses some custom syntax, intended to be replaced in whatever way is most appropriate for your implementation.\n\n* `[Link text](datasworn:move:starforged/suffer/pay_the_price)`: A link to the identified object. The ID must conform to the `AnyId` type; no wildcards allowed.\n* `{{table>oracle_rollable:starforged/core/action}}`: the referenced oracle is rendered here in the source material. The ID must conform to the `AnyOracleRollableId` type; no wildcards allowed.\n* `{{table_columns>move:delve/delve/delve_the_depths}}`: Render *all* direct OracleRollable children of the identified node. This can be an OracleCollectionId, or the ID of anything that can have EmbeddedOracleRollables (such as a Move or TruthOption).\n",
				"format": "markdown"
			}
		},
		"MarkdownTemplateString": {
			"type": "string",
			"metadata": {
				"description": "A rich text string in Markdown with replaced values from oracle roll results.\n\nThe custom syntax `{{some_row_key>some_oracle_table_id}}` should be replaced by the `some_row_key` string of a rolled oracle table. This is usually the `text` key, for example `{{text>oracle_rollable:starforged/core/action}}`\n",
				"format": "markdown"
			}
		},
		"Move": {
			"discriminator": "roll_type",
			"mapping": {
				"action_roll": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerActionRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": ["move"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "MoveIdWildcard"
							},
							"metadata": {
								"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"oracles": {
							"values": {
								"ref": "EmbeddedOracleRollable"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						}
					},
					"metadata": {
						"description": "A move that makes an action roll."
					}
				},
				"no_roll": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerNoRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"type": {
							"enum": ["move"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "MoveIdWildcard"
							},
							"metadata": {
								"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"oracles": {
							"values": {
								"ref": "EmbeddedOracleRollable"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						}
					},
					"metadata": {
						"description": "A move that makes no progress rolls or action rolls."
					}
				},
				"progress_roll": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerProgressRoll",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": ["move"]
						},
						"tracks": {
							"ref": "ProgressTrackTypeInfo",
							"metadata": {
								"description": "Describes the common features of progress tracks associated with this move."
							}
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "MoveIdWildcard"
							},
							"metadata": {
								"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"oracles": {
							"values": {
								"ref": "EmbeddedOracleRollable"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						}
					},
					"metadata": {
						"description": "A progress move that rolls on a standard progress track type (whose features are defined by this move object). For progress rolls that use special tracks, see MoveSpecialTrack."
					}
				},
				"special_track": {
					"properties": {
						"_id": {
							"ref": "MoveId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"text": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "The complete rules text of the move."
							}
						},
						"trigger": {
							"ref": "TriggerSpecialTrack",
							"metadata": {
								"description": "Trigger conditions for this move."
							}
						},
						"allow_momentum_burn": {
							"type": "boolean",
							"metadata": {
								"description": "Is burning momentum allowed for this move?"
							}
						},
						"outcomes": {
							"ref": "MoveOutcomes"
						},
						"type": {
							"enum": ["move"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "MoveIdWildcard"
							},
							"metadata": {
								"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"oracles": {
							"values": {
								"ref": "EmbeddedOracleRollable"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						}
					},
					"metadata": {
						"description": "A progress move that rolls on a special track, such as Legacies (Starforged) or Bonds (classic Ironsworn). For progress moves that use standard progress tracks, see MoveProgressRoll instead."
					}
				}
			}
		},
		"MoveActionRoll": {
			"properties": {
				"_id": {
					"ref": "MoveId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerActionRoll",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"outcomes": {
					"ref": "MoveOutcomes"
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["action_roll"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "MoveIdWildcard"
					},
					"metadata": {
						"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"oracles": {
					"values": {
						"ref": "EmbeddedOracleRollable"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "A move that makes an action roll."
			}
		},
		"MoveActionRollEnhancement": {
			"properties": {
				"enhances": {
					"elements": {
						"ref": "AnyMoveIdWildcard"
					}
				},
				"roll_type": {
					"enum": ["action_roll"],
					"metadata": {
						"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties."
					}
				}
			},
			"optionalProperties": {
				"trigger": {
					"ref": "TriggerActionRollEnhancement"
				}
			},
			"metadata": {
				"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
			}
		},
		"MoveCategory": {
			"properties": {
				"_id": {
					"ref": "MoveCategoryId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "Move"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"collections": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"type": {
					"enum": ["move_category"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "MoveCategoryIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "MoveCategoryIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			}
		},
		"MoveCategoryId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a MoveCategory object.",
				"pattern": "^move_category:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
			}
		},
		"MoveCategoryIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded MoveCategoryId that can be used to match multiple MoveCategory objects.",
				"pattern": "^move_category:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
			}
		},
		"MoveEnhancement": {
			"discriminator": "roll_type",
			"mapping": {
				"action_roll": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "AnyMoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerActionRollEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				},
				"no_roll": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "AnyMoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerNoRollEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				},
				"progress_roll": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "AnyMoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerProgressRollEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				},
				"special_track": {
					"properties": {
						"enhances": {
							"elements": {
								"ref": "AnyMoveIdWildcard"
							}
						}
					},
					"optionalProperties": {
						"trigger": {
							"ref": "TriggerSpecialTrackEnhancement"
						}
					},
					"metadata": {
						"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
					}
				}
			}
		},
		"MoveId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a Move object.",
				"pattern": "^move:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
			}
		},
		"MoveIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded MoveId that can be used to match multiple Move objects.",
				"pattern": "^move:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
			}
		},
		"MoveNoRoll": {
			"properties": {
				"_id": {
					"ref": "MoveId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerNoRoll",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["no_roll"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "MoveIdWildcard"
					},
					"metadata": {
						"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"oracles": {
					"values": {
						"ref": "EmbeddedOracleRollable"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "A move that makes no progress rolls or action rolls."
			}
		},
		"MoveNoRollEnhancement": {
			"properties": {
				"enhances": {
					"elements": {
						"ref": "AnyMoveIdWildcard"
					}
				},
				"roll_type": {
					"enum": ["no_roll"],
					"metadata": {
						"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties."
					}
				}
			},
			"optionalProperties": {
				"trigger": {
					"ref": "TriggerNoRollEnhancement"
				}
			},
			"metadata": {
				"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
			}
		},
		"MoveOracleRollableId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a MoveOracleRollable object.",
				"pattern": "^move\\.oracle_rollable:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"MoveOracleRollableIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded MoveOracleRollableId that can be used to match multiple MoveOracleRollable objects.",
				"pattern": "^move\\.oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"MoveOracleRollableRowId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a MoveOracleRollableRow object.",
				"pattern": "^move\\.oracle_rollable\\.row:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+)$"
			}
		},
		"MoveOracleRollableRowIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded MoveOracleRollableRowId that can be used to match multiple MoveOracleRollableRow objects.",
				"pattern": "^move\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+|\\*)$"
			}
		},
		"MoveOutcome": {
			"properties": {
				"text": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					}
				}
			}
		},
		"MoveOutcomes": {
			"properties": {
				"strong_hit": {
					"ref": "MoveOutcome"
				},
				"weak_hit": {
					"ref": "MoveOutcome"
				},
				"miss": {
					"ref": "MoveOutcome"
				}
			},
			"metadata": {
				"description": "A standalone localized description for each move outcome (miss, weak hit, or strong hit). This is for for e.g. VTT implementations, where it's often useful to display only the rules text relevant to a roll result.\n\n  This often requires light editorialization to create text that can stand alone without reference to the rest of the move. For example, 'as above' (in reference to another move outcome) shouldn't be used here; instead, the relevant text should be repeated."
			}
		},
		"MoveProgressRoll": {
			"properties": {
				"_id": {
					"ref": "MoveId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerProgressRoll",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"outcomes": {
					"ref": "MoveOutcomes"
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["progress_roll"]
				},
				"tracks": {
					"ref": "ProgressTrackTypeInfo",
					"metadata": {
						"description": "Describes the common features of progress tracks associated with this move."
					}
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "MoveIdWildcard"
					},
					"metadata": {
						"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"oracles": {
					"values": {
						"ref": "EmbeddedOracleRollable"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "A progress move that rolls on a standard progress track type (whose features are defined by this move object). For progress rolls that use special tracks, see MoveSpecialTrack."
			}
		},
		"MoveProgressRollEnhancement": {
			"properties": {
				"enhances": {
					"elements": {
						"ref": "AnyMoveIdWildcard"
					}
				},
				"roll_type": {
					"enum": ["progress_roll"],
					"metadata": {
						"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties."
					}
				}
			},
			"optionalProperties": {
				"trigger": {
					"ref": "TriggerProgressRollEnhancement"
				}
			},
			"metadata": {
				"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
			}
		},
		"MoveRollType": {
			"enum": ["no_roll", "action_roll", "progress_roll", "special_track"],
			"metadata": {
				"enumDescription": {
					"no_roll": "A move that makes no action rolls or progress rolls.",
					"action_roll": "A move that makes an action roll.",
					"progress_roll": "A progress move that rolls on a standard progress track type (defined by this move).",
					"special_track": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
				}
			}
		},
		"MoveSpecialTrack": {
			"properties": {
				"_id": {
					"ref": "MoveId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The complete rules text of the move."
					}
				},
				"trigger": {
					"ref": "TriggerSpecialTrack",
					"metadata": {
						"description": "Trigger conditions for this move."
					}
				},
				"allow_momentum_burn": {
					"type": "boolean",
					"metadata": {
						"description": "Is burning momentum allowed for this move?"
					}
				},
				"outcomes": {
					"ref": "MoveOutcomes"
				},
				"type": {
					"enum": ["move"]
				},
				"roll_type": {
					"enum": ["special_track"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "MoveIdWildcard"
					},
					"metadata": {
						"description": "Indicates that this move replaces the identified moves. References to the replaced moves can be considered equivalent to this move."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"oracles": {
					"values": {
						"ref": "EmbeddedOracleRollable"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "A progress move that rolls on a special track, such as Legacies (Starforged) or Bonds (classic Ironsworn). For progress moves that use standard progress tracks, see MoveProgressRoll instead."
			}
		},
		"MoveSpecialTrackEnhancement": {
			"properties": {
				"enhances": {
					"elements": {
						"ref": "AnyMoveIdWildcard"
					}
				},
				"roll_type": {
					"enum": ["special_track"],
					"metadata": {
						"description": "A move must have this `roll_type` to receive this enhancement. This is in addition to any other restrictions made by other properties."
					}
				}
			},
			"optionalProperties": {
				"trigger": {
					"ref": "TriggerSpecialTrackEnhancement"
				}
			},
			"metadata": {
				"description": "An object that describes changes to a move. These changes should be applied recursively, altering only the specified properties; enhanced arrays should be concatencated with the original array value."
			}
		},
		"NonCollectableType": {
			"enum": [
				"delve_site",
				"delve_site_domain",
				"delve_site_theme",
				"rarity",
				"truth"
			]
		},
		"Npc": {
			"properties": {
				"_id": {
					"ref": "NpcId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label"
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"features": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"description": {
					"ref": "MarkdownString"
				},
				"rank": {
					"ref": "ChallengeRank",
					"metadata": {
						"description": "The suggested challenge rank for this NPC."
					}
				},
				"nature": {
					"ref": "NpcNature"
				},
				"drives": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"tactics": {
					"elements": {
						"ref": "MarkdownString"
					}
				},
				"variants": {
					"values": {
						"ref": "NpcVariant"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"type": {
					"enum": ["npc"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "NpcIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				},
				"your_truth": {
					"ref": "MarkdownString"
				}
			},
			"metadata": {
				"description": "A non-player character entry, similar to those in Chapter 5 of the Ironsworn Rulebook, or Chapter 4 of Starforged."
			}
		},
		"NpcCollection": {
			"properties": {
				"_id": {
					"ref": "NpcCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "Npc"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"collections": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"type": {
					"enum": ["npc_collection"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "NpcCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "NpcCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			}
		},
		"NpcCollectionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a NpcCollection object.",
				"pattern": "^npc_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
			}
		},
		"NpcCollectionIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded NpcCollectionId that can be used to match multiple NpcCollection objects.",
				"pattern": "^npc_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
			}
		},
		"NpcId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a Npc object.",
				"pattern": "^npc:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
			}
		},
		"NpcIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded NpcId that can be used to match multiple Npc objects.",
				"pattern": "^npc:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
			}
		},
		"NpcNature": {
			"ref": "Label",
			"metadata": {
				"description": "A localized category label describing the nature of this NPC.\n\nIn Ironsworn classic, this is probably the singular form of the parent collection's name.\n\nFor Starforged, see the table on p. 258 for examples.",
				"examples": [
					"Ironlander",
					"Firstborn",
					"Animal",
					"Beast",
					"Horror",
					"Anomaly",
					"Creature",
					"Human",
					"Machine",
					"Monster",
					"Vehicle"
				]
			}
		},
		"NpcVariant": {
			"properties": {
				"_id": {
					"ref": "NpcVariantId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label"
				},
				"rank": {
					"ref": "ChallengeRank",
					"metadata": {
						"description": "The suggested challenge rank for this NPC."
					}
				},
				"nature": {
					"ref": "NpcNature"
				},
				"description": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"summary": {
					"ref": "MarkdownString"
				}
			}
		},
		"NpcVariantId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a NpcVariant object.",
				"pattern": "^npc\\.variant:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"NpcVariantIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded NpcVariantId that can be used to match multiple NpcVariant objects.",
				"pattern": "^npc\\.variant:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"OracleCollection": {
			"discriminator": "oracle_type",
			"mapping": {
				"tables": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleRollableTable"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						},
						"collections": {
							"values": {
								"ref": "OracleCollection"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						},
						"type": {
							"enum": ["oracle_collection"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection that represents a category or grouping of tables, which may themselves be `OracleTablesCollection`s."
					}
				},
				"table_shared_rolls": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								}
							},
							"metadata": {
								"description": "Provides column labels for this table. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row). For all other column labels, see the `name` property of each child `OracleColumn`."
							}
						},
						"type": {
							"enum": ["oracle_collection"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with one roll column and multiple text columns."
					}
				},
				"table_shared_text": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						},
						"column_labels": {
							"properties": {
								"text": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_collection"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with multiple roll columns and one text column."
					}
				},
				"table_shared_text2": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText2"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						},
						"column_labels": {
							"properties": {
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_collection"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with multiple roll columns, and 2 shared text columns."
					}
				},
				"table_shared_text3": {
					"properties": {
						"_id": {
							"ref": "OracleCollectionId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"contents": {
							"values": {
								"ref": "OracleColumnText3"
							},
							"metadata": {
								"propertyPattern": "^[a-z][a-z0-9_]*$"
							}
						},
						"column_labels": {
							"properties": {
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								},
								"text3": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_collection"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"enhances": {
							"elements": {
								"ref": "OracleCollectionIdWildcard"
							},
							"metadata": {
								"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
							}
						},
						"summary": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
							}
						},
						"description": {
							"ref": "MarkdownString",
							"metadata": {
								"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
							}
						}
					},
					"metadata": {
						"description": "An OracleCollection representing a single table with multiple roll columns, and 3 shared text columns."
					}
				}
			}
		},
		"OracleCollectionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an OracleCollection object.",
				"pattern": "^oracle_collection:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){1,4})$"
			}
		},
		"OracleCollectionIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded OracleCollectionId that can be used to match multiple OracleCollection objects.",
				"pattern": "^oracle_collection:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){1,4})$"
			}
		},
		"OracleColumnText": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["column_text"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleRollableIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			},
			"metadata": {
				"description": "Represents a single column in an OracleCollection."
			}
		},
		"OracleColumnText2": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText2"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["column_text2"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleRollableIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"OracleColumnText3": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText3"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["column_text3"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleRollableIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			}
		},
		"OracleDuplicateBehavior": {
			"enum": ["reroll", "keep", "make_it_worse"],
			"metadata": {
				"description": "Special roll instructions to use when rolling multiple times on a single oracle.",
				"enumDescription": {
					"reroll": "Duplicate results should be re-rolled.",
					"keep": "Duplicates results should be kept.",
					"make_it_worse": "Duplicate results should be kept, and they compound to make things worse."
				}
			}
		},
		"OracleMatchBehavior": {
			"properties": {
				"text": {
					"ref": "MarkdownString"
				}
			}
		},
		"OracleRoll": {
			"properties": {
				"oracle": {
					"ref": "OracleRollableId"
				},
				"auto": {
					"type": "boolean",
					"metadata": {
						"description": "Both Ironsworn and Starforged explicitly recommend *against* rolling all details at once. That said, some oracle results only provide useful information once a secondary roll occurs, such as \"Action + Theme\" or \"Roll twice\"."
					}
				},
				"duplicates": {
					"ref": "OracleDuplicateBehavior",
					"metadata": {
						"description": "Special rules on how to handle duplicate results, when rolling multiple times."
					}
				},
				"dice": {
					"ref": "DiceExpression"
				},
				"number_of_rolls": {
					"type": "int16",
					"metadata": {
						"description": "The number of times to roll."
					}
				}
			}
		},
		"OracleRollable": {
			"discriminator": "oracle_type",
			"mapping": {
				"table_text": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "Represents a basic rollable oracle table with one roll column and one text result column."
					}
				},
				"table_text2": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText2"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "A rollable oracle table with one roll column and two text columns."
					}
				},
				"table_text3": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText3"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								},
								"text3": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "A rollable oracle table with one roll column and 3 text columns."
					}
				},
				"column_text": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "Represents a single column in an OracleCollection."
					}
				},
				"column_text2": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText2"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				},
				"column_text3": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText3"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					}
				}
			},
			"metadata": {
				"description": "A collection of table rows from which random results may be rolled. This may represent a standalone table, or a column in a larger table."
			}
		},
		"OracleRollableId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an OracleRollable object.",
				"pattern": "^oracle_rollable:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})$"
			}
		},
		"OracleRollableIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded OracleRollableId that can be used to match multiple OracleRollable objects.",
				"pattern": "^oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})$"
			}
		},
		"OracleRollableRowId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing an OracleRollableRow object.",
				"pattern": "^oracle_rollable\\.row:([a-z][a-z0-9_]*(?:\\/[a-z][a-z0-9_]*){2,5})\\.(\\d+)$"
			}
		},
		"OracleRollableRowIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded OracleRollableRowId that can be used to match multiple OracleRollableRow objects.",
				"pattern": "^oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)(?:\\/(?:[a-z][a-z0-9_]*|\\*|\\*\\*)){2,5})\\.(\\d+|\\*)$"
			}
		},
		"OracleRollableRowText": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "AnyOracleRollableRowId"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table, with a single text cell."
			}
		},
		"OracleRollableRowText2": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "AnyOracleRollableRowId"
				},
				"text2": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table that provides a secondary text field."
			}
		},
		"OracleRollableRowText3": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "The primary text content of this row."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"_id": {
					"ref": "AnyOracleRollableRowId"
				},
				"text2": {
					"ref": "MarkdownString"
				},
				"text3": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl"
				},
				"oracle_rolls": {
					"elements": {
						"ref": "OracleRoll"
					},
					"metadata": {
						"description": "Further oracle rolls prompted by this table row."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"embed_table": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "Hints that the identified table should be rendered inside this table row."
					}
				},
				"template": {
					"ref": "OracleRollTemplate"
				},
				"_i18n": {
					"ref": "I18nHints"
				},
				"tags": {
					"ref": "Tags"
				}
			},
			"metadata": {
				"description": "Represents a row in an oracle table with 3 text cells."
			}
		},
		"OracleRollableTable": {
			"discriminator": "oracle_type",
			"mapping": {
				"table_text": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "Represents a basic rollable oracle table with one roll column and one text result column."
					}
				},
				"table_text2": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText2"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "A rollable oracle table with one roll column and two text columns."
					}
				},
				"table_text3": {
					"properties": {
						"_id": {
							"ref": "OracleRollableId",
							"metadata": {
								"description": "The unique Datasworn ID for this node."
							}
						},
						"name": {
							"ref": "Label",
							"metadata": {
								"description": "The primary name/label for this node."
							}
						},
						"_source": {
							"ref": "SourceInfo",
							"metadata": {
								"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
							}
						},
						"dice": {
							"ref": "DiceExpression",
							"metadata": {
								"description": "The roll used to select a result on this oracle."
							}
						},
						"rows": {
							"elements": {
								"ref": "OracleRollableRowText3"
							},
							"metadata": {
								"description": "An array of objects, each representing a single row of the table."
							}
						},
						"column_labels": {
							"properties": {
								"roll": {
									"ref": "Label"
								},
								"text": {
									"ref": "Label"
								},
								"text2": {
									"ref": "Label"
								},
								"text3": {
									"ref": "Label"
								}
							}
						},
						"type": {
							"enum": ["oracle_rollable"]
						}
					},
					"optionalProperties": {
						"_comment": {
							"ref": "Documentation"
						},
						"canonical_name": {
							"ref": "Label",
							"metadata": {
								"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
							}
						},
						"suggestions": {
							"ref": "Suggestions"
						},
						"tags": {
							"ref": "Tags"
						},
						"replaces": {
							"elements": {
								"ref": "OracleRollableIdWildcard"
							},
							"metadata": {
								"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
							}
						},
						"color": {
							"ref": "CssColor",
							"metadata": {
								"description": "A thematic color associated with this node."
							}
						},
						"images": {
							"elements": {
								"ref": "WebpImageUrl",
								"metadata": {
									"description": "Extra images associated with this node."
								}
							}
						},
						"icon": {
							"ref": "SvgImageUrl",
							"metadata": {
								"description": "An SVG icon associated with this collection."
							}
						},
						"recommended_rolls": {
							"properties": {
								"min": {
									"type": "int16"
								},
								"max": {
									"type": "int16"
								}
							}
						},
						"match": {
							"ref": "OracleMatchBehavior",
							"metadata": {
								"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
							}
						}
					},
					"metadata": {
						"description": "A rollable oracle table with one roll column and 3 text columns."
					}
				}
			}
		},
		"OracleRollTemplate": {
			"optionalProperties": {
				"text": {
					"ref": "MarkdownTemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleRollableRow#text.",
						"examples": [
							"{{text>oracle_rollable:starforged/faction/name/affiliation}} of the {{text>oracle_rollable:starforged/faction/name/legacy}} {{text>oracle_rollable:starforged/faction/name/identity}}"
						]
					}
				},
				"text2": {
					"ref": "MarkdownTemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleRollableRow#text2."
					}
				},
				"text3": {
					"ref": "MarkdownTemplateString",
					"metadata": {
						"description": "A string template that may be used in place of OracleRollableRow#text3."
					}
				}
			},
			"metadata": {
				"description": "Provides string templates that may be used in place of the static row text from `OracleRollableRow#text`, `OracleRollableRow#text2`, and `OracleRollableRow#text3`.\n\n  These strings are formatted in Markdown, but use a special syntax for their placeholders: `{{text>some_oracle_rollable_id}}`. The placeholder should be replaced with the value of a rolled (or selected) `OracleRollableRow#text` from the target oracle rollable ID."
			}
		},
		"OracleTablesCollection": {
			"properties": {
				"_id": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "OracleRollableTable"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"collections": {
					"values": {
						"ref": "OracleCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"type": {
					"enum": ["oracle_collection"]
				},
				"oracle_type": {
					"enum": ["tables"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			},
			"metadata": {
				"description": "An OracleCollection that represents a category or grouping of tables, which may themselves be `OracleTablesCollection`s."
			}
		},
		"OracleTableSharedRolls": {
			"properties": {
				"_id": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "OracleColumnText"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"column_labels": {
					"properties": {
						"roll": {
							"ref": "Label"
						}
					},
					"metadata": {
						"description": "Provides column labels for this table. The `roll` key refers to the roll column showing the dice range (`min` and `max` on each table row). For all other column labels, see the `name` property of each child `OracleColumn`."
					}
				},
				"type": {
					"enum": ["oracle_collection"]
				},
				"oracle_type": {
					"enum": ["table_shared_rolls"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			},
			"metadata": {
				"description": "An OracleCollection representing a single table with one roll column and multiple text columns."
			}
		},
		"OracleTableSharedText": {
			"properties": {
				"_id": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "OracleColumnText"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"column_labels": {
					"properties": {
						"text": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_collection"]
				},
				"oracle_type": {
					"enum": ["table_shared_text"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			},
			"metadata": {
				"description": "An OracleCollection representing a single table with multiple roll columns and one text column."
			}
		},
		"OracleTableSharedText2": {
			"properties": {
				"_id": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "OracleColumnText2"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"column_labels": {
					"properties": {
						"text": {
							"ref": "Label"
						},
						"text2": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_collection"]
				},
				"oracle_type": {
					"enum": ["table_shared_text2"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			},
			"metadata": {
				"description": "An OracleCollection representing a single table with multiple roll columns, and 2 shared text columns."
			}
		},
		"OracleTableSharedText3": {
			"properties": {
				"_id": {
					"ref": "OracleCollectionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"contents": {
					"values": {
						"ref": "OracleColumnText3"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"column_labels": {
					"properties": {
						"text": {
							"ref": "Label"
						},
						"text2": {
							"ref": "Label"
						},
						"text3": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_collection"]
				},
				"oracle_type": {
					"enum": ["table_shared_text3"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"enhances": {
					"elements": {
						"ref": "OracleCollectionIdWildcard"
					},
					"metadata": {
						"description": "This node's content enhances all nodes that match these wildcards, rather than being a standalone item of its own."
					}
				},
				"summary": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A brief summary of this collection, no more than a few sentences in length. This is intended for use in application tooltips and similar sorts of hints. Longer text should use the \"description\" key instead."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A longer description of this collection, which might include multiple paragraphs. If it's only a couple sentences, use the `summary` key instead."
					}
				}
			},
			"metadata": {
				"description": "An OracleCollection representing a single table with multiple roll columns, and 3 shared text columns."
			}
		},
		"OracleTableText": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"column_labels": {
					"properties": {
						"roll": {
							"ref": "Label"
						},
						"text": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["table_text"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleRollableIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			},
			"metadata": {
				"description": "Represents a basic rollable oracle table with one roll column and one text result column."
			}
		},
		"OracleTableText2": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText2"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"column_labels": {
					"properties": {
						"roll": {
							"ref": "Label"
						},
						"text": {
							"ref": "Label"
						},
						"text2": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["table_text2"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleRollableIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			},
			"metadata": {
				"description": "A rollable oracle table with one roll column and two text columns."
			}
		},
		"OracleTableText3": {
			"properties": {
				"_id": {
					"ref": "OracleRollableId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"dice": {
					"ref": "DiceExpression",
					"metadata": {
						"description": "The roll used to select a result on this oracle."
					}
				},
				"rows": {
					"elements": {
						"ref": "OracleRollableRowText3"
					},
					"metadata": {
						"description": "An array of objects, each representing a single row of the table."
					}
				},
				"column_labels": {
					"properties": {
						"roll": {
							"ref": "Label"
						},
						"text": {
							"ref": "Label"
						},
						"text2": {
							"ref": "Label"
						},
						"text3": {
							"ref": "Label"
						}
					}
				},
				"type": {
					"enum": ["oracle_rollable"]
				},
				"oracle_type": {
					"enum": ["table_text3"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "OracleRollableIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"recommended_rolls": {
					"properties": {
						"min": {
							"type": "int16"
						},
						"max": {
							"type": "int16"
						}
					}
				},
				"match": {
					"ref": "OracleMatchBehavior",
					"metadata": {
						"description": "Most oracle tables are insensitive to matches, but a few define special match behavior."
					}
				}
			},
			"metadata": {
				"description": "A rollable oracle table with one roll column and 3 text columns."
			}
		},
		"PageNumber": {
			"type": "uint16",
			"metadata": {
				"description": "Represents a page number in a book."
			}
		},
		"PartOfSpeech": {
			"enum": [
				"common_noun",
				"proper_noun",
				"adjunct_common_noun",
				"adjunct_proper_noun",
				"verb",
				"gerund",
				"adjective",
				"attributive_verb",
				"adjective_as_proper_noun",
				"common_noun_as_proper_noun"
			],
			"metadata": {
				"enumDescription": {
					"common_noun": "A common noun.",
					"proper_noun": "A proper noun.",
					"adjunct_common_noun": "A common noun used as an adjective, to modify another noun.",
					"adjunct_proper_noun": "A proper noun used as an adjective, to modify another noun.",
					"verb": "A verb in present tense",
					"gerund": "Gerund or present participle of a verb, e.g. \"going\", \"seeing\", \"waving\". Can function as a noun, an adjective, or a progressive verb.",
					"adjective": "An adjective.",
					"attributive_verb": "A verb used as an adjective, to modify a noun.",
					"adjective_as_proper_noun": "An adjective used as a proper noun.",
					"common_noun_as_proper_noun": "An common noun used as a proper noun."
				}
			}
		},
		"ProgressRollMethod": {
			"enum": ["miss", "weak_hit", "strong_hit", "progress_roll"],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"progress_roll": "Make a progress roll on a progress track associated with this move."
				}
			}
		},
		"ProgressRollOption": {
			"properties": {
				"using": {
					"enum": ["progress_track"]
				}
			}
		},
		"ProgressTrackTypeInfo": {
			"properties": {
				"category": {
					"ref": "Label",
					"metadata": {
						"description": "A category label for progress tracks of this type.",
						"examples": [
							"Vow",
							"Journey",
							"Combat",
							"Scene Challenge",
							"Expedition",
							"Connection",
							"Delve"
						]
					}
				}
			},
			"optionalProperties": {
				"controls": {
					"values": {},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "Describes the features of a type of progress track."
			}
		},
		"Rarity": {
			"properties": {
				"_id": {
					"ref": "RarityId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"asset": {
					"ref": "AssetId",
					"metadata": {
						"description": "The asset augmented by this rarity."
					}
				},
				"xp_cost": {
					"type": "int16",
					"metadata": {
						"description": "From Ironsworn: Delve, p. 174:\n\n      Some assets will bring a rarity into play more often than others, so the experience point cost for a rarity will vary by the linked asset. These costs are shown in the tables on page 175.\n\n      If you are playing solo, and aren’t concerned with the relative balance of rarity abilities, you can ignore these variable costs. If so, spend 3 experience points to purchase a rarity."
					}
				},
				"type": {
					"enum": ["rarity"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "RarityIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				}
			},
			"metadata": {
				"description": "A rarity, as described in Ironsworn: Delve."
			}
		},
		"RarityId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a Rarity object.",
				"pattern": "^rarity:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
			}
		},
		"RarityIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded RarityId that can be used to match multiple Rarity objects.",
				"pattern": "^rarity:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
			}
		},
		"RollableValue": {
			"discriminator": "using",
			"mapping": {
				"stat": {
					"properties": {
						"stat": {
							"ref": "StatKey"
						}
					},
					"metadata": {
						"description": "A reference to the value of a standard player character stat."
					}
				},
				"condition_meter": {
					"properties": {
						"condition_meter": {
							"ref": "ConditionMeterKey"
						}
					},
					"metadata": {
						"description": "A reference to the value of a standard player condition meter."
					}
				},
				"asset_control": {
					"properties": {
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": ["health", "integrity"]
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an asset control."
					}
				},
				"asset_option": {
					"properties": {
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an asset option."
					}
				},
				"attached_asset_control": {
					"properties": {
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": ["health", "integrity"]
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an attached asset control. For example, a Module asset could use this to roll using the `integrity` control of an attached Vehicle."
					}
				},
				"attached_asset_option": {
					"properties": {
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "A reference to the value of an attached asset option."
					}
				},
				"custom": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"value": {
							"type": "int16"
						}
					},
					"metadata": {
						"description": "An arbitrary static integer value with a label."
					}
				}
			},
			"metadata": {
				"description": "Provides a value like a stat, condition meter, or other number (usually for use in an action roll). The expected value is an integer, or null."
			}
		},
		"Rules": {
			"properties": {
				"stats": {
					"values": {
						"ref": "StatRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the standard stats used by player characters in this ruleset."
					}
				},
				"condition_meters": {
					"values": {
						"ref": "ConditionMeterRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the standard condition meters used by player characters in this ruleset."
					}
				},
				"impacts": {
					"values": {
						"ref": "ImpactCategory"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the standard impacts/debilities used by player characters in this ruleset."
					}
				},
				"special_tracks": {
					"values": {
						"ref": "SpecialTrackRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
					}
				},
				"tags": {
					"values": {
						"ref": "TagRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "Describes rules for player characters in this ruleset, such as stats and condition meters."
			}
		},
		"Ruleset": {
			"properties": {
				"_id": {
					"ref": "RulesetId"
				},
				"type": {
					"enum": ["ruleset"]
				},
				"datasworn_version": {
					"enum": ["0.1.0"],
					"metadata": {
						"description": "The version of the Datasworn format used by this data.",
						"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
					}
				},
				"title": {
					"ref": "Label",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
						"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))",
						"format": "date"
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": ["https://ironswornrpg.com"]
					}
				},
				"license": {
					"ref": "WebUrl"
				},
				"oracles": {
					"values": {
						"ref": "OracleTablesCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing oracle collections, which may contain oracle tables and/or oracle collections."
					}
				},
				"moves": {
					"values": {
						"ref": "MoveCategory"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing move categories, which contain moves."
					}
				},
				"assets": {
					"values": {
						"ref": "AssetCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing asset collections, which contain assets."
					}
				},
				"rules": {
					"ref": "Rules"
				}
			},
			"optionalProperties": {
				"description": {
					"ref": "MarkdownString"
				},
				"atlas": {
					"values": {
						"ref": "AtlasCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing atlas collections, which contain atlas entries."
					}
				},
				"npcs": {
					"values": {
						"ref": "NpcCollection"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing NPC collections, which contain NPCs."
					}
				},
				"truths": {
					"values": {
						"ref": "Truth"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of truth categories."
					}
				},
				"rarities": {
					"values": {
						"ref": "Rarity"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing rarities, like those presented in Ironsworn: Delve."
					}
				},
				"delve_sites": {
					"values": {
						"ref": "DelveSite"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object of delve sites, like the premade delve sites presented in Ironsworn: Delve"
					}
				},
				"site_themes": {
					"values": {
						"ref": "DelveSiteTheme"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site themes."
					}
				},
				"site_domains": {
					"values": {
						"ref": "DelveSiteDomain"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "A dictionary object containing delve site domains."
					}
				}
			},
			"metadata": {
				"description": "A standalone Datasworn package that describes its own ruleset."
			}
		},
		"RulesetId": {
			"type": "string",
			"metadata": {
				"description": "The ID of standalone Datasworn package that describes its own ruleset.",
				"examples": ["classic", "starforged"],
				"pattern": "^[a-z][a-z0-9_]*$"
			}
		},
		"RulesExpansion": {
			"optionalProperties": {
				"stats": {
					"values": {
						"ref": "StatRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the standard stats used by player characters in this ruleset."
					}
				},
				"condition_meters": {
					"values": {
						"ref": "ConditionMeterRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the standard condition meters used by player characters in this ruleset."
					}
				},
				"impacts": {
					"values": {
						"ref": "ImpactCategory"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the standard impacts/debilities used by player characters in this ruleset."
					}
				},
				"special_tracks": {
					"values": {
						"ref": "SpecialTrackRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$",
						"description": "Describes the special tracks used by player characters in this ruleset, like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
					}
				},
				"tags": {
					"values": {
						"ref": "TagRule"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "Describes rules for player characters in this ruleset, such as stats and condition meters."
			}
		},
		"RulesPackageId": {
			"type": "string"
		},
		"SelectEnhancementField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"ref": "DictKey"
				},
				"choices": {
					"values": {
						"discriminator": "choice_type",
						"mapping": {
							"choice": {
								"properties": {
									"label": {
										"ref": "Label"
									}
								},
								"optionalProperties": {
									"enhance_asset": {
										"ref": "AssetEnhancement"
									},
									"enhance_moves": {
										"elements": {
											"ref": "MoveEnhancement"
										}
									}
								},
								"metadata": {
									"description": "Represents an option in a list of choices."
								}
							},
							"choice_group": {
								"properties": {
									"name": {
										"ref": "Label",
										"metadata": {
											"description": "A label for this option group."
										}
									},
									"choices": {
										"values": {
											"ref": "SelectEnhancementFieldChoice"
										},
										"metadata": {
											"propertyPattern": "^[a-z][a-z0-9_]*$"
										}
									}
								},
								"metadata": {
									"description": "Represents a grouping of options in a list of choices."
								}
							}
						}
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"field_type": {
					"enum": ["select_enhancement"]
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			},
			"metadata": {
				"description": "Select from player and/or asset enhancements. Use it to describe modal abilities. For examples, see Ironclad (classic Ironsworn) and Windbinder (Sundered Isles)."
			}
		},
		"SelectEnhancementFieldChoice": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"choice_type": {
					"enum": ["choice"]
				}
			},
			"optionalProperties": {
				"enhance_asset": {
					"ref": "AssetEnhancement"
				},
				"enhance_moves": {
					"elements": {
						"ref": "MoveEnhancement"
					}
				}
			},
			"metadata": {
				"description": "Represents an option in a list of choices."
			}
		},
		"SelectEnhancementFieldChoiceGroup": {
			"properties": {
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "A label for this option group."
					}
				},
				"choice_type": {
					"enum": ["choice_group"]
				},
				"choices": {
					"values": {
						"ref": "SelectEnhancementFieldChoice"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			},
			"metadata": {
				"description": "Represents a grouping of options in a list of choices."
			}
		},
		"SelectValueField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"ref": "DictKey"
				},
				"choices": {
					"values": {
						"ref": "SelectValueFieldChoice"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				},
				"field_type": {
					"enum": ["select_value"]
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			},
			"metadata": {
				"description": "Represents a list of mutually exclusive choices."
			}
		},
		"SelectValueFieldChoice": {
			"discriminator": "using",
			"mapping": {
				"stat": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"choice_type": {
							"enum": ["choice"]
						},
						"stat": {
							"ref": "StatKey"
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"condition_meter": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"choice_type": {
							"enum": ["choice"]
						},
						"condition_meter": {
							"ref": "ConditionMeterKey"
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"asset_control": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"choice_type": {
							"enum": ["choice"]
						},
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": ["health", "integrity"]
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"asset_option": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"choice_type": {
							"enum": ["choice"]
						},
						"assets": {
							"elements": {
								"ref": "AssetIdWildcard"
							}
						},
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"attached_asset_control": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"choice_type": {
							"enum": ["choice"]
						},
						"control": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset control field.",
								"examples": ["health", "integrity"]
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"attached_asset_option": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"choice_type": {
							"enum": ["choice"]
						},
						"option": {
							"ref": "DictKey",
							"metadata": {
								"description": "The dictionary key of the asset option field."
							}
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				},
				"custom": {
					"properties": {
						"label": {
							"ref": "Label"
						},
						"choice_type": {
							"enum": ["choice"]
						},
						"value": {
							"type": "int16"
						}
					},
					"metadata": {
						"description": "Represents an option in a list of choices."
					}
				}
			}
		},
		"SemanticVersion": {
			"type": "string",
			"metadata": {
				"pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
			}
		},
		"SourceInfo": {
			"properties": {
				"title": {
					"ref": "Label",
					"metadata": {
						"description": "The title of the source document.",
						"examples": [
							"Ironsworn Rulebook",
							"Ironsworn Assets Master Set",
							"Ironsworn: Delve",
							"Ironsworn: Starforged Rulebook",
							"Ironsworn: Starforged Assets",
							"Sundered Isles"
						]
					}
				},
				"authors": {
					"elements": {
						"ref": "AuthorInfo"
					},
					"metadata": {
						"description": "Lists authors credited by the source material."
					}
				},
				"date": {
					"type": "timestamp",
					"metadata": {
						"description": "The date of the source documents's last update, formatted YYYY-MM-DD. Required because it's used to determine whether the data needs updating.",
						"pattern": "[0-9]{4}-((0[0-9])|(1[0-2]))-(([0-2][0-9])|(3[0-1]))",
						"format": "date"
					}
				},
				"url": {
					"ref": "WebUrl",
					"metadata": {
						"description": "A URL where the source document is available.",
						"examples": ["https://ironswornrpg.com"]
					}
				},
				"license": {
					"ref": "WebUrl"
				}
			},
			"optionalProperties": {
				"page": {
					"ref": "PageNumber",
					"metadata": {
						"description": "The page number where this content is described in full."
					}
				}
			},
			"metadata": {
				"description": "Metadata describing the original source of this node"
			}
		},
		"SpecialTrackRollMethod": {
			"enum": [
				"miss",
				"weak_hit",
				"strong_hit",
				"player_choice",
				"highest",
				"lowest",
				"all"
			],
			"metadata": {
				"enumDescription": {
					"miss": "An automatic miss.",
					"weak_hit": "An automatic weak hit.",
					"strong_hit": "An automatic strong hit.",
					"player_choice": "The player chooses which roll option to use.",
					"highest": "Use the roll option with the best/highest value.",
					"lowest": "Use the roll option with the worst/lowest value.",
					"all": "Use _every_ roll option at once."
				}
			}
		},
		"SpecialTrackRule": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "A label for this special track."
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this special track."
					}
				},
				"shared": {
					"type": "boolean",
					"metadata": {
						"description": "Is this track shared by all players?"
					}
				},
				"optional": {
					"type": "boolean",
					"metadata": {
						"description": "Is this track an optional rule?"
					}
				}
			},
			"metadata": {
				"description": "Describes a special track like Bonds (classic Ironsworn), Failure (Delve), or Legacies (Starforged)."
			}
		},
		"SpecialTrackType": {
			"ref": "DictKey",
			"metadata": {
				"description": "Special, ruleset-specific progress tracks. Usually, one exists per player character, and they persist through the life of the player character.\n'Canonical' examples:\n  * `bonds_track`, described in the Ironsworn Rulebook. For the Starforged legacy track, use `bonds_legacy` instead.\n  * `failure_track`, described in Ironsworn: Delve\n  * `quests_legacy`, `bonds_legacy`, and `discoveries_legacy`, described Ironsworn: Starforged\n\n",
				"examples": [
					"bonds_track",
					"failure_track",
					"quests_legacy",
					"bonds_legacy",
					"discoveries_legacy"
				]
			}
		},
		"StatKey": {
			"ref": "DictKey",
			"metadata": {
				"description": "A basic player character stat.",
				"examples": ["edge", "heart", "iron", "shadow", "wits"]
			}
		},
		"StatRule": {
			"properties": {
				"label": {
					"ref": "Label",
					"metadata": {
						"description": "A label for this stat.",
						"examples": ["edge"]
					}
				},
				"description": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A description of this stat.",
						"examples": [
							"Quickness, agility, and prowess when fighting at a distance."
						]
					}
				}
			},
			"metadata": {
				"description": "Describes a standard player character stat."
			}
		},
		"StatValueRef": {
			"properties": {
				"stat": {
					"ref": "StatKey"
				},
				"using": {
					"enum": ["stat"],
					"metadata": {
						"description": "A reference to the value of a standard player character stat."
					}
				}
			},
			"metadata": {
				"description": "A reference to the value of a standard player character stat."
			}
		},
		"Suggestions": {
			"elements": {
				"ref": "AnyIdWildcard"
			}
		},
		"SvgImageUrl": {
			"type": "string",
			"metadata": {
				"description": "A relative (local) URL pointing to a vector image in the SVG format.",
				"pattern": "\\.svg$",
				"format": "uri-reference"
			}
		},
		"Tag": {},
		"TaggableNodeType": {
			"enum": [
				"atlas_entry",
				"npc",
				"oracle_rollable",
				"asset",
				"move",
				"atlas_collection",
				"npc_collection",
				"oracle_collection",
				"asset_collection",
				"move_category",
				"delve_site",
				"delve_site_domain",
				"delve_site_theme",
				"rarity",
				"truth",
				"ability",
				"option",
				"row",
				"feature",
				"danger",
				"denizen",
				"variant"
			]
		},
		"TagRule": {
			"properties": {
				"node_types": {
					"elements": {
						"ref": "TaggableNodeType"
					}
				},
				"$schema": {
					"ref": "TagSchema",
					"metadata": {
						"description": "The JSON schema for this tag value."
					}
				}
			}
		},
		"Tags": {
			"values": {
				"values": {
					"ref": "Tag"
				},
				"metadata": {
					"propertyPattern": "^[a-z][a-z0-9_]*$"
				}
			},
			"metadata": {
				"propertyPattern": "^[a-z][a-z0-9_]*$",
				"description": "A dictionary of tags, keyed by the RulesPackageId that the tags are from."
			}
		},
		"TagSchema": {
			"metadata": {
				"description": "JSON schema used to validate the tag data, with a mandatory description. Only a subset of all possible JSON schema are allowed, including references to some Datasworn types.",
				"examples": [
					{
						"description": "An example tag with a simple true/false value.",
						"type": "boolean"
					},
					{
						"description": "An example tag with an array of oracle rollable ID wildcards.",
						"type": "array",
						"items": {
							"$ref": "OracleRollableIdWildcard"
						}
					}
				]
			}
		},
		"TextField": {
			"properties": {
				"label": {
					"ref": "Label"
				},
				"value": {
					"type": "string"
				},
				"field_type": {
					"enum": ["text"]
				}
			},
			"optionalProperties": {
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An icon associated with this input."
					}
				}
			},
			"metadata": {
				"description": "Represents an input that accepts plain text."
			}
		},
		"TriggerActionRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerActionRollCondition"
					},
					"metadata": {
						"description": "Specific conditions that qualify for this trigger."
					}
				}
			},
			"metadata": {
				"description": "Describes trigger conditions for a move that makes an action roll."
			}
		},
		"TriggerActionRollCondition": {
			"properties": {
				"method": {
					"ref": "ActionRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "RollableValue"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerActionRollConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "ActionRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "RollableValue"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerActionRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerActionRollConditionEnhancement"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"TriggerBy": {
			"properties": {
				"player": {
					"type": "boolean",
					"metadata": {
						"description": "Can this trigger be activated by the player who owns this?"
					}
				},
				"ally": {
					"type": "boolean",
					"metadata": {
						"description": "Can this trigger be activated by one of the player's allies?"
					}
				}
			},
			"metadata": {
				"description": "Information on who can activate this trigger condition. Usually this is just the player, but some asset abilities can trigger from an ally's move."
			}
		},
		"TriggerNoRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerNoRollCondition"
					},
					"metadata": {
						"description": "Specific conditions that qualify for this trigger."
					}
				}
			},
			"metadata": {
				"description": "Describes trigger conditions for a move that makes no rolls."
			}
		},
		"TriggerNoRollCondition": {
			"properties": {},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerNoRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerNoRollCondition"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"TriggerProgressRoll": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerProgressRollCondition"
					},
					"metadata": {
						"description": "Specific conditions that qualify for this trigger."
					}
				}
			}
		},
		"TriggerProgressRollCondition": {
			"properties": {
				"method": {
					"ref": "ProgressRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ProgressRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerProgressRollConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "ProgressRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "ProgressRollOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerProgressRollEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerProgressRollConditionEnhancement"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"TriggerSpecialTrack": {
			"properties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string containing the primary trigger text for this move.\n\nSecondary trigger text (for specific stats or uses of an asset ability) may be described in individual trigger conditions."
					}
				},
				"conditions": {
					"elements": {
						"ref": "TriggerSpecialTrackCondition"
					},
					"metadata": {
						"description": "Specific conditions that qualify for this trigger."
					}
				}
			}
		},
		"TriggerSpecialTrackCondition": {
			"properties": {
				"method": {
					"ref": "SpecialTrackRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			}
		},
		"TriggerSpecialTrackConditionEnhancement": {
			"properties": {
				"method": {
					"ref": "SpecialTrackRollMethod"
				},
				"roll_options": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionOption"
					},
					"metadata": {
						"description": "The options available when rolling with this trigger condition."
					}
				}
			},
			"optionalProperties": {
				"text": {
					"ref": "MarkdownString",
					"metadata": {
						"description": "A markdown string of any trigger text specific to this trigger condition."
					}
				},
				"by": {
					"ref": "TriggerBy"
				}
			},
			"metadata": {
				"description": "A progress move that rolls on one or more special tracks, like Bonds (classic Ironsworn), Failure (Delve), or Legacy (Starforged)."
			}
		},
		"TriggerSpecialTrackConditionOption": {
			"properties": {
				"using": {
					"ref": "SpecialTrackType"
				}
			}
		},
		"TriggerSpecialTrackEnhancement": {
			"properties": {
				"conditions": {
					"elements": {
						"ref": "TriggerSpecialTrackConditionEnhancement"
					},
					"metadata": {
						"description": "Trigger conditions added to the enhanced move."
					}
				}
			},
			"metadata": {
				"description": "Describes changes/additions made to the enhanced move's trigger conditions."
			}
		},
		"Truth": {
			"properties": {
				"_id": {
					"ref": "TruthId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"name": {
					"ref": "Label",
					"metadata": {
						"description": "The primary name/label for this node."
					}
				},
				"_source": {
					"ref": "SourceInfo",
					"metadata": {
						"description": "Attribution for the original source (such as a book or website) of this node, including the author and licensing information."
					}
				},
				"dice": {
					"ref": "DiceExpression"
				},
				"options": {
					"elements": {
						"ref": "TruthOption"
					}
				},
				"type": {
					"enum": ["truth"]
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"canonical_name": {
					"ref": "Label",
					"metadata": {
						"description": "The name of this node as it appears on the page in the book, if it's different from `name`."
					}
				},
				"suggestions": {
					"ref": "Suggestions"
				},
				"tags": {
					"ref": "Tags"
				},
				"replaces": {
					"elements": {
						"ref": "TruthIdWildcard"
					},
					"metadata": {
						"description": "This node replaces all nodes that match these wildcards. References to the replaced nodes can be considered equivalent to this node."
					}
				},
				"color": {
					"ref": "CssColor",
					"metadata": {
						"description": "A thematic color associated with this node."
					}
				},
				"images": {
					"elements": {
						"ref": "WebpImageUrl",
						"metadata": {
							"description": "Extra images associated with this node."
						}
					}
				},
				"icon": {
					"ref": "SvgImageUrl",
					"metadata": {
						"description": "An SVG icon associated with this collection."
					}
				},
				"your_character": {
					"ref": "MarkdownString"
				},
				"factions": {
					"elements": {
						"ref": "EntityPrompt"
					},
					"metadata": {
						"description": "Prompts for factions related to this truth, like those presented in standard isles. This is presented as a single paragraph in the original text; Datasworn uses an array (one faction prompt per string) to represent them in order to make them more suitable for programmatic use.\n\nThis property is a placeholder and may see signficant changes in v0.2.0."
					}
				}
			},
			"metadata": {
				"description": "A setting truth category."
			}
		},
		"TruthId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a Truth object.",
				"pattern": "^truth:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)$"
			}
		},
		"TruthIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded TruthId that can be used to match multiple Truth objects.",
				"pattern": "^truth:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)$"
			}
		},
		"TruthOption": {
			"properties": {
				"_id": {
					"ref": "TruthOptionId",
					"metadata": {
						"description": "The unique Datasworn ID for this node."
					}
				},
				"roll": {
					"ref": "DiceRange"
				},
				"description": {
					"ref": "MarkdownString"
				},
				"quest_starter": {
					"ref": "MarkdownString"
				}
			},
			"optionalProperties": {
				"_comment": {
					"ref": "Documentation"
				},
				"summary": {
					"ref": "MarkdownString"
				},
				"oracles": {
					"values": {
						"ref": "EmbeddedOracleRollable"
					},
					"metadata": {
						"propertyPattern": "^[a-z][a-z0-9_]*$"
					}
				}
			}
		},
		"TruthOptionId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a TruthOption object.",
				"pattern": "^truth\\.option:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)$"
			}
		},
		"TruthOptionIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded TruthOptionId that can be used to match multiple TruthOption objects.",
				"pattern": "^truth\\.option:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)$"
			}
		},
		"TruthOptionOracleRollableId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a TruthOptionOracleRollable object.",
				"pattern": "^truth\\.option\\.oracle_rollable:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"TruthOptionOracleRollableIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded TruthOptionOracleRollableId that can be used to match multiple TruthOptionOracleRollable objects.",
				"pattern": "^truth\\.option\\.oracle_rollable:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)$"
			}
		},
		"TruthOptionOracleRollableRowId": {
			"type": "string",
			"metadata": {
				"description": "A unique ID representing a TruthOptionOracleRollableRow object.",
				"pattern": "^truth\\.option\\.oracle_rollable\\.row:([a-z][a-z0-9_]*\\/[a-z][a-z0-9_]*)\\.(\\d+)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+)$"
			}
		},
		"TruthOptionOracleRollableRowIdWildcard": {
			"type": "string",
			"metadata": {
				"description": "A wildcarded TruthOptionOracleRollableRowId that can be used to match multiple TruthOptionOracleRollableRow objects.",
				"pattern": "^truth\\.option\\.oracle_rollable\\.row:((?:[a-z][a-z0-9_]*|\\*)\\/[a-z][a-z0-9_]*|\\/\\*|\\/\\*\\*)\\.(\\d+|\\*)\\.([a-z][a-z0-9_]*|\\*)\\.(\\d+|\\*)$"
			}
		},
		"WebpImageUrl": {
			"type": "string",
			"metadata": {
				"description": "A relative (local) URL pointing to a raster image in the WEBP format.",
				"pattern": "\\.webp$",
				"format": "uri-reference"
			}
		},
		"WebUrl": {
			"type": "string",
			"metadata": {
				"description": "An absolute URL pointing to a website.",
				"format": "uri"
			}
		}
	}
}
